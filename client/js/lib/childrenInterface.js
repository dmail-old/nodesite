/*au lieu de créer un tableau children qu'on manipuleune version plus light serait de reconstituer le tableau childrengrâce aux relations nextSiblingça serais bien de recréer TreeWalker à ma sauceutile pour visiblesController-> cependant j'avais abandonner l'idée parce que c'était chaud pourles méthodes de naviguation comme pageup, pagedownfaudrait que children soit plutot un object NS.NodeListet children seras ptet renommer childNodesle problème c'est que lorsqu'on crée un enfant si cet enfant dispose de sous enfantsownerDocument existe pas encore*/NS.childrenInterface = {	parentNode: null,	children: null,	firstChild: null,	lastChild: null,	nextSibling: null,	previousSibling: null,	ownerDocument: null, // the root holding all descendants	oninsertchild: Function.EMPTY,	onremovechild: Function.EMPTY,	initChildren: function(children){		this.children = [];	},	appendChild: function(child, index){		if( child.parentNode ){			child.parentNode.removeChild(child);		}		child.parentNode = this;		if( this.firstChild ){			child.previousSibling = this.lastChild;			this.lastChild.nextSibling = child;			this.lastChild = child;		}		else{			this.firstChild = this.lastChild = child;		}		this.children.push(child);		this.oninsertchild(child);		return child;	},	insertBefore: function(child, sibling){		if( !sibling || sibling.parentNode != this ){			this.appendChild(child);		}		else{			if( child.parentNode ){				child.parentNode.removeChild(child);			}			child.parentNode = this;			if( this.firstChild == sibling ) this.firstChild = child;			child.nextSibling = sibling;			child.previousSibling = sibling.previousSibling;			sibling.previousSibling = child;			this.children.splice(this.children.indexOf(sibling), 0, child);			this.oninsertchild(child);		}		return child;	},	removeChild: function(child){		if( child.parentNode == this ){			child.parentNode.children.remove(this);			child.parentNode = null;			child.nextSibling = null;			child.previousSibling = null;			if( this.firstChild == child ) this.firstChild = child.nextSibling;			if( this.lastChild == child ) this.lastChild = child.previousSibling;			if( child.previousSibling ) child.previousSibling.nextSibling = child.nextSibling;			if( child.nextSibling ) child.nextSibling.previousSibling = child.previousSibling;			this.onremovechild(child);		}		return child;	}};