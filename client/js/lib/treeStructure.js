var TreeStructure = {	getChildConstructor: function(){		return this.constructor;	},	create: function(item){		var constructor = this.getChildConstructor();		return new constructor(item);	},	parseChild: function(child){		if( child instanceof this.getChildConstructor() ){			if( child.parentNode ){				child.parentNode.removeChild(child);			}		}		else{			child = this.create(child);		}		child.parentNode = this;		return child;	},	parseChildren: function(children){		return children.map(this.parseChild, this);	},	initChildren: function(children){		if( children ){			this.children = this.parseChildren(children);		}		// only if this.children is undefined we set this.children = []		else if( typeof this.children == 'undefined' ){			this.children = [];		}	},	setChildren: function(children){		children.forEach(this.appendChild, this);		return this;	},	appendChild: function(child, index){		this.children.push(this.parseChild(child));		return child;	},	removeChild: function(child){		if( child.parentNode ){			child.parentNode.children.remove(this);			delete child.parentNode;		}		return child;	},	insertBefore: function(child, sibling){		if( !sibling  || sibling.parentNode != this ) return this.appendChild(child);		child = this.parseChild(child);		this.children.splice(this.children.indexOf(sibling), 0, child);		return child;	}};