/*---name: listdescription: Méthode qui réalise setProperty('children', children) au travers de l'action 'list'- permet de prévenir l'action et d'écouter un event list- permet de redéfinir la méthode list pour des types de noeuds (utile lorsque l'arbre représente le DOM par exemple)...*/Tree.definePlugin('list', {	require: 'states',			node: {		relist: function(){			// on repars de toJSON sur les enfants tout recalculer			// var children = [].concat(this.children).mapCall('toJSON');			this.removeProto('children').removeProperty('children').removeProto('listed').removeProperty('listed');			this.list();			return this;		}	},		init: function(){		this.setPropertyObtainAction('children', 'list');		this.on('list', function(node){			node.setProperty('listed', true).expand();		});		this.define('list', 'cancel', function(){			return this.get('listed');		});				this.define('expand', 'cancel', function(){			if( this.hasState('expanded') ) return true;			if( this.children.length === 0 ){				this.list();				return true;			}		});		// désormais si le noeud n'a pas été lu on montre qu'il le peut		this.define('expand', 'prevent', function(){ return this.hasState('disabled') || (this.get('listed') && !this.children.length); });	}});