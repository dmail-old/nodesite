/*---name: socket...*/(function(){var plugin = {	};plugin.node = {	// je dois connaitre le chemin absolute de la racine pas le choix	containPath: function(path){		var rootpath = this.root.getPath();				path = path.replace(/\\/g, '/');		return path.startsWith(rootpath);	},	// le chemin est absolu, je dois donc chercher les enfants depuis la racine ou je me trouve	getFromPath: function(path){		if( !this.containPath(path) ) return null;				var parts = oldpath.split('/');		var i = 0, j = parts.length;		var child = null;				for(;i<j;i++){			child = this.getChild(parts[i]);			if( !child ) return null;		}		return child;	}};plugin.init = function(){		// on Ã©coute les events du filesystem	var filesystem = IO.connect('http://localhost/filesystem');		filesystem.on('rename', function(path, name){		var node = tree.root.getFromPath(oldpath);		if( node ) node.exec('rename', [name]); // effet de fading du nom	});		filesystem.on('move', function(oldpath, path){		var node = tree.root.getFromPath(oldpath);		var into = tree.root.getFromPath(path);		if( node ) node.exec('move', [into]); // effet de fading	});		filesystem.on('remove', function(path){		var node = tree.root.getFromPath(oldpath);		if( node ) node.remove(); // effet de fading	});		filesystem.on('copy', function(path, destpath){		var node = tree.root.getFromPath(path);		var into = tree.root.getFromPath(destpath);		if( node ) node.exec('copy', [into, into.children.length, this.clone(true)]);	});		filesystem.on('insert', function(path, data){		var node = tree.root.getFromPath(path);		if( node ) node.exec('insert', [data]);	});		filesystem.on('trash', function(path){		var node = tree.root.getFromPath(path);		if( node ) node.exec('trash');	});		filesystem.on('recycle', function(path){		var node = tree.root.getFromPath(path);		if( node ) node.exec('recycle');	});};})();