/*---name: Sort plugindescription: Possibilité de trier les enfants d'un noeudrequire: actions...*/Tree.definePlugin('sort', {	require: 'actions',		node: {		prepareChildren: function(children){			var children = Treenode.prototype.prepareChildren.call(this, children);			if( this.has('orderby') ) children = this.tree.sortchildren(children, this.get('orderby'));			return children;		},				drawSort: function(){			if( this.branch && this.children.length ){				var children = this.children, i = 0, j = children.length, child, branch = this.branch, first, last;							for(;i<j;i++){					child = children[i];					branch.appendChild(child.trunk);										if( !child.hasState('hidden') ){						child.drawFirst().drawLast();						if( !first ) first = child;						last = child;					}				}				if( first ) first.drawFirst(true); 				if( last ) last.drawLast(true);				if( node.hasVisible() ) node.tree.updateVisibles();			}		}	},		tree: {		getSorter: function(name){			return this.getSchema(name, 'sorter') || function(node){ return node.get(name); };		},				sortchildren: function(children, by){			if( by && children.length ){				var order = 1, property, args = [];								switch(by.charAt(0)){					case '-': order = -1;					case '+': property = by.substr(1);				}				// on veut trier depuis -index vers +index, suffit de faire un reverse				if( order == 1 && property == 'index' ){					children = children.reverse();				}				else{					// en premier recours on se réfère au type					if( property != 'type' ) args.push(this.getSorter(property), order);					args.push(this.getSorter(property), order);					// en dernier recours on se réfèrere au nom					if( property != 'name' ) args.push(this.getSorter(property), order);					children = children.orderBy.apply(children, args);				}			}						return children;		}	},		events: {		'change:orderby': function(node, value){			node.children = this.sortchildren(node.children, value);			node.drawSort();		}	},		init: function(){		this.setPropertyUpdateAction('orderby', 'sort');		this.setSchema('name', 'sorter', function(node){ return node.name.toLowerCase(); });	}});