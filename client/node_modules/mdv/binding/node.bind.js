window.Node.prototype.bind = function(name, model, path){
	console.error('Unhandled binding to Node: ', this, name, model, path);
};

window.Node.prototype.unbind = function(name) {
	this.bindings = this.bindings || {};
	var binding = this.bindings[name];
	if( binding && typeof binding.close === 'function' ) binding.close();
	delete this.bindings[name];
};

window.Node.prototype.unbindAll = function(){
	if( !this.bindings ) return;

	var names = Object.keys(this.bindings), i = 0, j = names.length, binding;
	for(;i<j;i++) {
		binding = this.bindings[names[i]];
		if( binding ) binding.close();
	}

	this.bindings = {};
};

var NodeBinding = require('./nodeBinding');
window.Text.prototype.bind = function(name, model, path){
	if( name !== 'textContent' ){
		return Node.prototype.bind.call(this, name, model, path);
	}
	this.unbind(name);
	return this.bindings[name] = NodeBinding.new(this, 'textContent', model, path);
};

var AttributeBinding = require('./attributeBinding');
Element.prototype.bind = function(name, model, path) {
	this.unbind(name);
	return this.bindings[name] = AttributeBinding.new(this, name, model, path);
};