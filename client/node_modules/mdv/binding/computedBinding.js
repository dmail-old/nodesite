var PathObserver = require('objectObserver/pathObserver');
var ComputedBinding = {
	observers: null,
	values: null,
	value: undefined,
	size: 0,
	combinator: null,
	bind: null,
	closed: false,
	delayed: true,

	create: function(combinator, bind){
		this.observers = {};
		this.values = {};
		this.combinator = combinator;
		this.bind = bind || this;
	},

	resolve: function() {
		if( this.closed === false ){
			if ( !this.combinator ){
				throw Error('ComputedBinding attempted to resolve without a combinator');
			}
			this.value = this.combinator.call(this.bind, this.values);
			this.delayed = false;
		}
	},

	checkResolve: function(){
		if( this.delayed === false ){
			this.resolve();
		}
	},

	onchange: function(change, token){
		this.values[token] = change.value;
		this.checkResolve();
	},

	observe: function(name, model, path){
		this.unobserve(name);
		this.size++;
		this.observers[name] = PathObserver.new(path, model, this.onchange, this, name);
		this.checkResolve();
	},

	unobserve: function(name) {
		if( this.observers[name] ){
			this.size--;
			this.observers[name].close();
			delete this.observers[name];
			delete this.values[name];
			this.checkResolve();
		}
	},

	close: function(){
		if( this.closed === false ){
			for(var key in this.observers){
				this.unobserve(key, true);
			}
			this.closed = true;
			this.value = undefined;
		}
	}
};

module.exports = ComputedBinding;