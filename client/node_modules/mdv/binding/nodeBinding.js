var PathObserver = require('objectObserver/pathObserver');
var NodeBinding = {
	closed: false,
	node: null,
	property: null,
	observer: null,

	create: function(node, property, model, path){
		this.node = node;
		this.property = property;
		this.observer = this.observe(path, model, this.onchange, this);
	},

	encodeValue: function(value){
		return value === undefined ? '' : String(value);
	},

	valueChanged: function(value){
		this.node[this.property] = this.encodeValue(value);
	},

	onchange: function(change){
		this.valueChanged(change.value);
	},

	observe: function(path, model, token){
		return PathObserver.new(path, model, this.onchange, this, token);
	},

	close: function(){
		if( this.closed === false ){
			this.observer.close();
			this.observer = null;
			this.node = null;
			this.closed = true;
		}
	}
};

module.exports = NodeBinding;