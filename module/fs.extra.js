/* global util *//*call callback on every file of source directorycallback(error, path, stat, next)*/FS.iterate = function(source, callback){	source = source.replace(/\/$/, '');	FS.readdir(source, function(error, names){		if( error ) return callback(error);		var name;		function onstat(error, stat){			if( error ) return callback(error);			callback(null, name, stat, next);		}		function next(){			if( names.length === 0 ){				callback(null);			}			else{				name = names.shift();				FS.lstat(source + '/' + name, onstat);			}		}		next();	});};FS.rmdirRecursive = function(source, callback){	var path;	function remove(error, name, stat, next){		if( error ) return callback(error);		if( !name ) return FS.rmdir(source, callback);		path = source + '/' + name;		if( stat.isDirectory() ){			FS.rmdirRecursive(path, next);		}		else{			FS.unlink(path, next);		}	}	FS.iterate(source, remove);};function loaddirectory(source, recursive, callback){	var childNodes = [], child;	function load(error, name, stat, next){		if( error ) return callback(error);		if( !name ) return callback(null, childNodes);		child = {			name: name,			stat: stat		};		childNodes.push(child);		if( recursive && stat.isDirectory() ){			FS.loaddirRecursive(source + '/' + name, function(error, files){				if( error ) return callback(error);				child.childNodes = files;				next();			});		}		else{			next();		}	}	FS.iterate(source, load);}FS.loaddir = function(source, callback){ return loaddirectory(source, false, callback); };FS.loaddirRecursive = function(source, callback){ return loaddirectory(source, true, callback); };FS.copy = function(source, destination, callback){	FS.stat(destination, function(error){		if( !error ) return callback(new Error('File ' + destination + ' exists.'));		FS.stat(source, function(error, stat){			if( error ) return callback(error);			if( stat.isSymbolicLink() ) FS.readlink(source, function(error, link){ FS.symlink(link, destination, callback); });			else util.pump(FS.createReadStream(source), FS.createWriteStream(destination), callback);		});	});};FS.copydirRecursive = function(source, destination, callback){	FS.stat(source, function(error, sourceStat){		if( error ) return callback(error);		FS.mkdir(destination, sourceStat.mode, function(error){			if( error ) return callback(error);			FS.iterate(source, function(error, name, stat, next){				if( error ) return callback(error);				if( !name ) return callback();				var path = source + '/' + name;				var copy = destination + '/' + name;				if( stat.isDirectory() ) return FS.copydirRecursive(path, copy, next);				FS.copy(path, copy, next);			});		});	});};