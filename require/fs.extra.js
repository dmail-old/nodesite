/*call callback on every file of source directorycallback(error, path, stat)*/FS.iterate = function(source, callback){		source = source.replace(/\/$/, '');		FS.readdir(source, function(error, names){		if( error ) return callback(error);				function next(){			var name = names.shift();						if( name === null || typeof name == 'undefined' ) return callback(null);						FS.lstat(source + '/' + name, function(error, stat){				if( error ) return callback(error);				callback(null, name, stat, next);			});		}		next();	});};FS.rmdirRecursive = function(source, callback){	FS.iterate(source, function(error, name, stat, next){		if( error ) return callback(error);		if( !name ) return FS.rmdir(source, callback);				var path = source + '/' + name;				if( stat.isDirectory() ) return FS.rmdirRecursive(path, next);		FS.unlink(path, next);	});};function loaddirectory(source, recursive, callback){	var children = [];		FS.iterate(source, function(error, name, stat, next){		if( error ) return callback(error);		if( !name ) return callback(null, children);				var child = {			name: name,			stat: stat		};				children.push(child);				if( recursive && stat.isDirectory() ){			return FS.loaddirRecursive(source + '/' + name, function(error, subChildren){				if( error ) return callback(error);				child.children = subChildren;				next();			});		}				next();	});}FS.loaddir = function(source, callback){ return loaddirectory(source, false, callback); };	FS.loaddirRecursive = function(source, callback){ return loaddirectory(source, true, callback); };	FS.copy = function(source, destination, callback){	FS.stat(destination, function(error){		if( !error ) return callback(new Error('File ' + destination + ' exists.'));		FS.stat(source, function(error, stat){			if( error ) return callback(error);					if( stat.isSymbolicLink() ) FS.readlink(source, function(error, link){ FS.symlink(link, destination, callback); });			else util.pump(FS.createReadStream(source), FS.createWriteStream(destination), callback);		});	});};FS.copydirRecursive = function(source, destination, callback){	FS.stat(source, function(error, sourceStat){		if( error ) return callback(error);						FS.mkdir(destination, sourceStat.mode, function(error){			if( error ) return callback(error);						FS.iterate(source, function(error, name, stat, next){				if( error ) return callback(error);				if( !name ) return callback();								var path = source + '/' + name;				var copy = destination + '/' + name;									if( stat.isDirectory() ) return FS.copydirRecursive(path, copy, next);				FS.copy(path, copy, next);			});		});	});};