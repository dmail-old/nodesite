require('Object.implement');

String.implement = Object.implement.bind(Object, String);
String.complement = Object.complement.bind(Object, String);

String.SPACE = ' ';
String.EMPTY = '';

Function.UPPERCASE = function(a){ return a.toUpperCase(); };
Function.ESCAPE = function(a){ return '\\' + a; };

RegExp.WORD_GLOBAL = /\b[a-z]/g;
RegExp.SPECIAL_GLOBAL = /([-.*+?^${}()|[\]\/\\])/g;
RegExp.BLANK_GLOBAL = /\s+/g;
RegExp.BLANK_TRAILING_GLOBAL = /^\s+|\s+$/g;

String.complement({
	toInt: function(base){
		return parseInt(this, base || 10);
	},

	startsWith: function(pattern){
		return this.lastIndexOf(pattern, 0) === 0;
	},

	endsWith: function(pattern){
		var index = this.length - pattern.length;
		return index >= 0 && this.indexOf(pattern, index) === index;
	},

	contains: function(pattern, index){
		return this.indexOf(pattern, index) !== -1;
	},

	capitalize: function(){
		return String(this).replace(RegExp.WORD_GLOBAL, Function.UPPERCASE);
	},

	capitalizeFirst: function(){
		var string = String(this);
		return string.charAt(0).toUpperCase() + string.slice(1);
	},

	escapeRegExp: function(){
		return this.replace(RegExp.SPECIAL_GLOBAL, Function.ESCAPE);
	},

	singleSpace: function(){
		return String(this).replace(RegExp.BLANK_GLOBAL, ' ');
	},

	clean: function(){
		return String.prototype.singleSpace.call(this).trim();
	},

	trimLeft: function(){
		return String(this).replace(/^\s+/, '');
	},

	trimRight: function(){
		return String(this).replace(/\s+$/, '');
	},

	trim: function(){
		return String(this).replace(RegExp.BLANK_TRAILING_GLOBAL, '');
	},

	truncate: function(length, motif){
		length = length || 0;
		motif = motif || 'â€¦';
		var str = String(this);
		return str.length > length ? str.slice(0, length - motif.length) + motif : str;
	},

	// http://code.google.com/p/traceur-compiler/source/browse/src/runtime/polyfills/String.js?spec=svn3eb8737d4e8636badc64671f22c6899f3dc4106c&r=3eb8737d4e8636badc64671f22c6899f3dc4106c
	// http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.repeat
	repeat: function(count){
		/*! http://mths.be/repeat v0.1.0 by @mathias */
		if( this == null ){
			throw TypeError();
		}
		var string = String(this);
		// `ToInteger`
		var n = count ? Number(count) : 0;
		if( isNaN(n) ){
			n = 0;
		}
		// Account for out-of-bounds indices
		if( n < 0 || n == Infinity ){
			throw RangeError(n + ' < 0 or is Infinity');
		}
		if( n === 0 ){
			return '';
		}
		var result = '';
		while(n--){
			result+= string;
		}
		return result;
	},

	padRight: function(length, motif){
		return pad(this, length, motif, 'right');
	},

	padLeft: function(length, motif){
		return pad(this, length, motif, 'left');
	},

	pad: function(length, motif){
		return pad(this, length, motif, 'both');
	}
});

function pad(string, size, motif, direction){
	string = String(string);
	size = size || 0;
	motif = motif || ' ';
	direction = direction || 'both';

	var length = string.length;

	if( size + 1 >= length ){
		if( direction === 'left' ){
			string = motif.repeat(size + 1 - length) + string;
		}
		else if( direction === 'right' ){
			string = string + motif.repeat(size + 1 - length);
		}
		else{
			var motifCount = size - length;
			var right = Math.ceil(motifCount / 2);
			var left = motifCount - right;
			string = motif.repeat(left + 1) + string + motif.repeat(right + 1);
		}
	}

	return string;
}