var ansi = {
	types: {		
		fonts: {
			bold: [1, 22],
			italic: [3, 23],
			underline: [4, 24],
			inverse: [7, 27],
		},
		colors: {
			//grayscale
			white: [37, 39],
			grey: [90, 39],
			black: [30, 39],
			//colors
			blue: [34, 39],
			cyan: [36, 39],
			green: [32, 39],
			magenta: [35, 39],
			red: [31, 39],
			yellow: [33, 39],
		},
		backgrounds: {
			//backgrounds
			black: [40, 49],
			red: [41, 49],
			green: [42, 49],
			yellow: [43, 49],
			blue: [44, 49],
			magenta: [45, 49],
			cyan: [46, 49],
			white: [47, 49]
		}
	},
	styles: {},

	supported: function(){
		var argv = process.argv;

		if( argv.indexOf('--no-color') !== -1 || argv.indexOf('--color=false') !== -1 ){
			return false;
		}

		if( argv.indexOf('--color') !== -1 || argv.indexOf('--color=true') !== -1 || argv.indexOf('--color=always') !== -1 ){
			return true;
		}

		if( process.stdout && !process.stdout.isTTY ){
			return false;
		}

		if( process.platform === 'win32' ){
			return true;
		}

		if( 'COLORTERM' in process.env ){
			return true;
		}

		if( process.env.TERM === 'dumb' ){
			return false;
		}

		if( /^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM) ){
			return true;
		}

		return false;
	},

	defineStyle: function(name, properties){
		if( typeof properties == 'string' ) properties = {color: properties};
		this.styles[name] = properties;
		if( !(name in this) ){
			this[name] = function(str){
				return this.setStyle(str, name);
			};
		}
	},

	stylize: function(str, type, value){
		var type = this.types[type + 's'], tag;

		if( type ){
			tag = type[value];
			if( tag ){
				str = '\033[' + tag[0] + 'm' + str + '\033[' + tag[1] + 'm';
			}		
		}

		return str;
	},

	stylizeAll: function(str, properties){
		var key;

		for(key in properties){
			str = this.stylize(str, key, properties[key]);
		}

		return str;
	},

	setStyle: function(str, name){
		return this.stylizeAll(str, this.styles[name]);
	},

	removeStyles: function(str){
		return String(str).replace(/\033\[\d+m/g, '');
	}
};

Object.keys(ansi.tags).forEach(function(tagName){
	ansi.defineStyle(tagName, {color: tagName});
});

module.exports = ansi;