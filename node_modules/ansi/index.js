var ansi = {
	styles: {
		// font style
		'bold': [1, 22],
		'italic': [3, 23],
		'underline': [4, 24],
		'inverse': [7, 27],
		'normal': null,
		// grayscale colors
		'white': [37, 39],
		'grey': [90, 39],
		'black': [30, 39],
		//colors
		'blue': [34, 39],
		'cyan': [36, 39],
		'green': [32, 39],
		'magenta': [35, 39],
		'red': [31, 39],
		'yellow': [33, 39],
		'inherit': null,
		// backgrougds
		'bg-black': [40, 49],
		'bg-red': [41, 49],
		'bg-green': [42, 49],
		'bg-yellow': [43, 49],
		'bg-blue': [44, 49],
		'bg-magenta': [45, 49],
		'bg-cyan': [46, 49],
		'bg-white': [47, 49],
		'bg-transparent': null
	},
	formats: {},

	supported: function(){
		var argv = process.argv;

		if( argv.indexOf('--no-color') !== -1 || argv.indexOf('--color=false') !== -1 ){
			return false;
		}

		if( argv.indexOf('--color') !== -1 || argv.indexOf('--color=true') !== -1 || argv.indexOf('--color=always') !== -1 ){
			return true;
		}

		if( process.stdout && !process.stdout.isTTY ){
			return false;
		}

		if( process.platform === 'win32' ){
			return true;
		}

		if( 'COLORTERM' in process.env ){
			return true;
		}

		if( process.env.TERM === 'dumb' ){
			return false;
		}

		if( /^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM) ){
			return true;
		}

		return false;
	},

	writeStyle: function(string, style){
		var rule;

		if( style in this.styles ){
			rule = this.styles[style];
			if( rule ) string = '\033[' + rule[0] + 'm' + string + '\033[' + rule[1] + 'm';
		}

		return string;
	},

	stylize: function(string){
		var i = 1, j = arguments.length;

		for(;i<j;i++){
			string = this.writeStyle(string, arguments[i]);
		}

		return string;
	},

	clean: function(string){
		return String(string).replace(/\033\[\d+m/g, '');
	},

	writeFormat: function(string, format){
		return this.stylize.apply(this, [string].concat(this.formats[format]));
	},

	format: function(){
		var i = 1, j = arguments.length;

		for(;i<j;i++){
			string = this.writeFormat(string, arguments[i]);
		}

		return string;
	},

	addFormat: function(format, styles){
		if( typeof styles == 'string' ) styles = [styles];
		this.formats[format] = styles;
		if( !(format in this) ){
			this[format] = function(string){
				return this.writeFormat(string, format);
			};
		}
	},

	register: function(formats){
		for(var format in formats){
			this.addFormat(format, formats[format]);
		}
	}
};

Object.keys(ansi.styles).forEach(function(rule){
	ansi.addFormat(rule, rule);
});

module.exports = ansi;