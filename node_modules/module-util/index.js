var exports = {
	requireWithoutCache: function(path){
		path = require.resolve(path);
		delete require.cache[path];
		return require(path);
	},

	cache: {},
	
	clear: function(){
		// clear cache to compute the right dependencylevel
		// but module for which we already got the right level can remain in cache
		for(var id in require.cache){
			if( !(id in this.cache) ) delete require.cache[id];
		}
	},

	getDependencyLevel: function(module){
		if( typeof module.dependencylevel === 'number' ) return module.dependencylevel;

		var level = 0, children = module.children, i = 0, j = children.length, child, childLevel;

		if( j ){
			for(;i<j;i++){
				child = children[i];
				childLevel = this.getDependencyLevel(child);
				level = Math.max(level, childLevel);
			}

			level++;
		}

		return level;
	},

	requireModule: function(path){
		path = require.resolve(path);

		if( path in this.cache ){
			return this.cache[path];
		}
		this.clear();

		require(path);

		var module = require.cache[path];
		this.cache[path] = module;
		module.dependencylevel = this.getDependencyLevel(module);
		return module;
	},

	requireModuleWithoutCache: function(path){
		var fileName = require.resolve(path);
		delete require.cache[fileName];
		require(fileName);
		return require.cache[fileName];
	},	

	Collector: require('./Collector'),

	collectModulePaths: function(path, fn, bind){
		return this.Collector.new(path).resolve(fn, bind);
	},

	loadModules: function(paths){
		return paths.map(function(path){
			return this.requireModule(path);
		}, this);
	},

	comparer: function(moduleA, moduleB){
		return moduleA.dependencyLevel - moduleB.dependencyLevel;
	},

	sortModules: function(modules){
		return modules.sort(this.comparer);
	},

	readModuleRecursive: function(path, fn, bind){
		this.collectModulePaths(path, function(error, modulePaths, badSignaturePaths){
			var modules = null;

			if( !error ){				
				try{
					modules = this.loadModules(modulePaths);
				}
				catch(e){
					error = e;
				}
				if( !error ) modules = this.sortModules(modules);
			}

			fn.call(bind, error, modules, badSignaturePaths);
		}, this);
	}
};

module.exports = exports;