/*

ModuleLoader.load(path) -> returns an array of module found at path

a file is considered a module when he is contained into a node_modules folder

*/


var proto = require('proto');

var ModuleCollector = proto.create({
	fileSystem: require('fs'),
	path: require('path'),
	moduleFolderName: 'node_modules',

	folderPath: null,
	fn: null,
	bind: null,
	index: null,
	fileNames: null,
	currentFileName: null,
	currentFilePath: null,
	error: null,
	badSignaturePaths: null,
	modulePaths: null,

	constructor: function(folderPath){
		this.folderPath = folderPath;
	},

	filterFile: function(fileName){
		return fileName == '.git' || fileName == '.gitignore' || fileName == '.gitattributes';
	},

	hasModuleSignature: function(path){
		// one of his parent is node_modules but the fileName != 'node_modules'
		var directories = path.split(this.path.sep);
		var index = directories.indexOf(this.moduleFolderName);

		return index > -1 && index < directories.length - 1;
	},

	send: function(error){
		if( error ) this.error = error;
		this.fn.call(this.bind, this.error, this.modulePaths, this.badSignaturePaths);
	},

	onstat: function(error, stat){
		if( error ) return this.send(error);
		if( !stat.isDirectory() ) return this.next();				
		
		if( this.hasModuleSignature(this.currentFilePath) ){
			var modulePath;

			try{
				// locate module path for this folder
				modulePath = require.resolve(this.currentFilePath);
			}
			catch(e){
				this.badSignaturePaths.push(this.currentFilePath);
			}

			if( modulePath ) this.modulePaths.push(modulePath);
		}

		this.constructor.new(this.currentFilePath).resolve(function(error, paths){
			if( error ) return this.send(error);
			this.modulePaths = this.modulePaths.concat(paths);
			this.next();
		}, this);
	},

	next: function(error){
		this.index++;
		if( this.index >= this.length ) return this.send();

		this.currentFileName = this.fileNames[this.index];
		if( this.filterFile(this.currentFileName) ) return this.next();

		this.currentFilePath = this.folderPath + this.path.sep + this.currentFileName;
		this.fileSystem.stat(this.currentFilePath, this.onstat.bind(this));
	},

	onreaddir: function(error, fileNames){
		if( error ) return this.send(error);

		this.fileNames = fileNames;
		this.index = -1;
		this.length = fileNames.length;
		this.error = null;
		this.badSignaturePaths = [];
		this.modulePaths = [];
		
		this.next();
	},

	resolve: function(fn, bind){
		this.fn = fn;
		this.bind = bind || this;
		this.fileSystem.readdir(this.folderPath, this.onreaddir.bind(this));
	}
});

module.exports = ModuleCollector;