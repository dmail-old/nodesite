/*

a file is considered a module when he is contained into a node_modules folder

*/

var proto = require('@dmail/proto');
var Task = require('task');
require('task/callback');

var ModuleCollector = proto.extend({
	fileSystem: require('fs'),
	PATH: require('path'),
	moduleFolderName: 'node_modules',

	path: null,
	modulePaths: null,

	constructor: function(path){
		this.path = path;
	},

	filterFolder: function(path){
		var name = this.PATH.basename(path);
		return name != '.git' && name != 'vrac';
	},

	filterFile: function(path){
		return path.slice(-3) === '.js' && path != '.gitignore' && path != '.gitattributes';
	},

	hasModuleSignature: function(path){
		// contained in a directory named 'node_modules'
		var directories = path.split(this.PATH.sep);
		var index = directories.indexOf(this.moduleFolderName);

		return index > -1; //&& index < directories.length - 1;
	},

	stat: function(path){
		return Task.callback(function stat(complete){
			return this.fileSystem.stat(path, complete);
		}, this);
	},

	readdir: function(path){
		return Task.callback(function readdir(complete){
			return this.fileSystem.readdir(path, complete);
		}, this);
	},

	getPaths: function(path){
		return this.readdir(path).then(function(names){
			var paths = names.map(function(name){
				return path + this.PATH.sep + name;
			}, this);

			return paths.filter(this.filterFolder, this);
		}.bind(this));
	},

	collect: function collect(path){
		return this.stat(path).then(function(stat){
			if( stat.isDirectory() ){
				if( this.filterFolder(path) ){
					return this.getPaths(path).map(this.collect, this);
				}
			}
			else if( stat.isFile() ){
				if( this.hasModuleSignature(path) && this.filterFile(path) ){
					this.modulePaths.push(path);
					return path;
				}
			}
		}.bind(this));
	},

	createTask: function(){
		this.modulePaths = [];

		return this.collect(this.path).then(function(){
			return this.modulePaths;
		}.bind(this));
	},

	resolve: function(fn, bind){
		return this.createTask().then(
			function(modulePaths){
				fn.call(bind, null, modulePaths);
			}.bind(this),
			function(error){
				fn.call(bind, error);
			}
		);
	}
});

module.exports = ModuleCollector;