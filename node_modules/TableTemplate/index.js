/*

pouvoir styliser le header, les bords
we doesn't support \n

https://github.com/Automattic/cli-table/blob/master/lib/index.js

*/

require('core/string');

var options = {
	chars: {
		'top': '─',
		'topMid': '┬',
		'topLeft': '┌',
		'topRight': '┐',
		'bottom': '─',
		'bottomMid': '┴',
		'bottomLeft': '└',
		'bottomRight': '┘',
		'left': '│',
		'leftMid': '├',
		'mid': '─',
		'midMid': '┼',
		'right': '│',
		'rightMid': '┤',
		'middle': '│'
	},
	truncate: '…',
	colWidths: [],
	colAligns: [],
	style: {
		'padding-left': 1,
		'padding-right': 1,
		'text-align': 'center',
		head: 'red',
		border: 'grey',
		// compact: false
	},
	head: []
};

var proto = require('proto');
var chars = options.chars;

var Table = proto.create({
	constructor: function(){
		this.header = null;
		this.body = Array.prototype.slice.call(arguments);
		this.footer = null;
	},

	drawLine: function(char, left, right, separator){
		var line = '';

		line+= left;
		this.colmunWidths.forEach(function(width, index, array){
			line+= char.repeat(width);
			if( index != array.length - 1 ) line+= separator;
		});
		line+= right;

		return line;
	},

	drawSepLine: function(){
		return this.drawLine(chars.mid, chars.leftMid, chars.rightMid, chars.midMid);
	},

	drawTopLine: function(){
		return this.drawLine(chars.top, chars.topLeft || chars.top, chars.topRight || chars.top, chars.topMid);
	},

	drawBottomLine: function(){
		return this.drawLine(chars.bottom, chars.bottomLeft || chars.bottom, chars.bottomRight || chars.bottom, chars.bottomMid);
	},

	drawCell: function(content, width){
		width-= options.style['padding-left'];
		width-= options.style['padding-right'];

		content = content.replace(/\n/g, '\\n');

		var cell;

		if( content.length === width ){
			cell = content;
		}
		else if( content.length > width ){
			cell = content.truncate(width, chars.truncate);
		}
		else{
			if( options.style['text-align'] === 'left' ){
				cell = content.padRight(width, ' ');
			}
			else if( options.style['text-align'] === 'right' ){
				cell = content.padLeft(width, ' ');
			}
			else{
				cell = content.pad(width, ' ');
			}
		}
		
		return [
			' '.repeat(options.style['padding-left'] || 0),
			cell,
			' '.repeat(options.style['padding-right'] || 0)
		].join('');
	},

	drawRow: function(data){
		var row = '';

		this.colmunWidths.forEach(function(width, index, array){
			row+= chars.left + this.drawCell(String(data[index]), width);
		}, this);
		if( row.length ) row+= chars.right;

		return row;
	},

	drawHead: function(){
		var head = '';

		head+= this.drawRow(this.headers);
		head+= '\n';
		head+= this.drawSepLine();
		//head+= '\n';

		return head;
	},

	drawBody: function(){
		var body = '';

		this.body.forEach(function(row, index, array){
			body+= this.drawRow(row);
			if( index != array.length - 1 ){
				body+= '\n';
				body+= this.drawSepLine();
				body+= '\n';
			}
		}, this);

		return body;
	},

	toString: function(){
		/*
		minColumnWidth: 10, <- une cellule fait minimum 10 de large
		dans ce cas on cherche à occuper process.stdout.colmuns
		genre si y'a trois colonnes colmunWidths = columns / 3

		on peut se comporter comme un tableau de base, les colonnes cherche à occuper toute la place dispo
		dont on calcule la largeur d'une colonne avant
		*/

		this.colmunWidths = this.headers.map(function(header, index){
			return header.length + options.style['padding-left'] + options.style['padding-right'];
		});

		return [
			this.drawTopLine(),
			this.drawHead(),
			this.drawBody(),
			this.drawBottomLine()
		].join('\n');
	}
});

var table = new Table(
	[10, 'damien', 'dmail@gmail.com', 'd\nn'],
	[11, 'sandra', 'sandra@gmail.com']
);

table.headers = ['id', 'name', 'email', 'very large column yeah my friend'];

console.log(table.toString());

/*

garder à l'esprit

process.stdout.on('resize')
process.stdout.columns // permet de connaitre la largeur de la fenêtre

autre manière
new Table(
	{id: 10, name: 'damien', email: 'dmail@gmail.com'},
	{id: 11, name: 'sandra', email, 'sandra@gmail.com'}
);
table.headers = 'auto';

new Table(
	{id: 10, email: 'damien@gmail.com', name: 'damien'}
)
table.headers = ['id', 'name', 'email'];
*/