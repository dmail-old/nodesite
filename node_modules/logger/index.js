/*

Créer un logger pour admin.js
un pour server.js pour les requêtes
donne comme option d'aussi logger les messages dans un fichier

*/

var ansi = require('ansi');
var inspect = require('util').inspect;
var LogStream = require('./logStream');
var Logger = {
	inspect: inspect,
	streams: null,
	level: 'info',
	levels: ['info', 'debug', 'warn', 'error', 'fatal'],

	// options
	filePath: null,
	console: true,
	colorize: true,
	depth: 2,
	showHidden: false,

	init: function(options){
		this.streams = [];

		if( typeof options == 'string' ){
			options = {filePath: options};
		}

		for(var key in options){
			this[key] = options[key];
		}

		if( typeof this.filePath == 'string' ){
			this.addStream(this.createStream(this.filePath));
		}
		if( this.console === true ){
			this.addStream(this.createStream(process.stdout));
		}
	},

	createStream: function(stream){
		return LogStream.new(stream);
	},

	addStream: function(stream){
		this.streams.push(stream);
	},

	write: function(data){
		var i = 0, j = this.streams.length, stream;

		for(;i<j;i++){
			stream = this.streams[i];
			
			// remove ansi styles for non tty streams
			if( !stream.stream.isTTY ){
				stream.write(ansi.removeStyles(data));
			}
			else{
				stream.write(data);
			}
		}
	},

	getLevelIndex: function(level){
		return this.levels.indexOf(level);
	},

	canLog: function(level){
		return this.getLevelIndex(level) >= this.getLevelIndex(this.level);
	},

	format: function(level, message){
		return level + ': ' + message;
	},

	stringify: function(level, item){
		return this.inspect(item, {
			showHidden: this.showHidden,
			depth: this.depth,
			colors: this.colorize,
			customInspect: true
		});
	},

	log: function(level){
		if( !this.canLog(level) ){
			return false;
		}

		var args = Array.prototype.slice.call(arguments, 1), self = this, message = '';

		args.map(function(arg){
			if( typeof arg === 'string' ) return arg;
			return self.stringify(level, arg);
		});

		message = require('util').format.apply(null, args);
		message = this.format(level, message);

		this.write(message + '\n');

		return message;
	}
};

Logger.levels.forEach(function(level){
	Logger[level] = function(){
		return this.log.apply(this, [level].concat(Array.apply(Array, arguments)));
	};
});

var ansi = require('ansi');

ansi.defineStyle('info', {color: 'green'});
ansi.defineStyle('help', {color: 'cyan'});
ansi.defineStyle('warn', {color: 'yellow', font: 'bold'});
ansi.defineStyle('debug', {color: 'grey', font: 'bold'});
ansi.defineStyle('error', {color: 'red', font: 'bold'});

Logger.formatLevel = function(level){
	return this.colorize ? ansi.setStyle(level, level) : level;
};

// https://github.com/visionmedia/callsite/blob/master/lib/__stack.js
Object.defineProperty(global, '__stack', {
	get: function(){
		var orig = Error.prepareStackTrace;
		Error.prepareStackTrace = function(_, stack){ return stack; };
		var err = new Error();
		Error.captureStackTrace(err, arguments.callee);
		var stack = err.stack;
		Error.prepareStackTrace = orig;
		return stack;
	}
});

Logger.format = function(level, message){
	if( level == 'debug' ){
		var call, wrap, fileName, lineNumber, fileContent, lineContent, formattedLevel;

		call = global.__stack[1];
		fileName = call.getFileName();		
		lineNumber = call.getFileNumber();
		fileContent = require('fs').readFileSync(fileName, 'utf8');
		lineContent = fileContent.split('\n')[lineNumber];
		lineContent = lineContent.replace(/\n|\r/, '');

		formattedLevel = this.formatLevel(level);
		message = message.replace(/\n|\r/g, function(match){ return match + formattedLevel; });

		wrap = '';
		wrap+= formattedLevel + '\n';
		wrap+= formattedLevel + lineContent + ' (' + fileName + ':' + lineNumber + ')\n';
		wrap+= formattedLevel + message + '\n';
		wrap+= formattedLevel;

		return wrap;
	}
	else{
		return this.formatLevel(level) + ': ' + message;
	}
};

module.exports = Logger;