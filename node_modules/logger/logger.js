/*

Créer un logger pour admin.js
un pour server.js pour les requêtes
donne comme option d'aussi logger les messages dans un fichier

*/

var ansi = require('ansi');
var inspect = require('inspect');
var LogStream = require('./logStream');
var Logger = {
	inspect: inspect,
	streams: null,
	level: 'info',
	levels: ['info', 'debug', 'warn', 'error', 'fatal'],

	// options
	filePath: null,
	console: true,
	colorize: true,

	init: function(options){
		this.streams = [];

		if( typeof options == 'string' ){
			options = {filePath: options};
		}

		for(var key in options){
			this[key] = options[key];
		}

		if( typeof this.filePath == 'string' ){
			this.addStream(this.createStream(this.filePath));
		}
		if( this.console === true ){
			this.addStream(this.createStream(process.stdout));
		}
	},

	createStream: function(stream){
		return LogStream.new(stream);
	},

	addStream: function(stream){
		this.streams.push(stream);
	},

	write: function(data){
		var i = 0, j = this.streams.length, stream;

		for(;i<j;i++){
			stream = this.streams[i];
			
			// remove ansi styles for non tty streams
			if( !stream.stream.isTTY ){
				stream.write(ansi.removeStyles(data));
			}
			else{
				stream.write(data);
			}
		}
	},

	getLevelIndex: function(level){
		return this.levels.indexOf(level);
	},

	canLog: function(level){
		return this.getLevelIndex(level) >= this.getLevelIndex(this.level);
	},

	format: function(level, message){
		return level + ': ' + message;
	},

	stringify: function(level, item){
		return this.inspect(item, false, this.depth, this.colorize);
	},

	log: function(level){
		if( !this.canLog(level) ){
			return false;
		}

		var args = Array.slice(arguments, 1), self = this, message = '';

		args.map(function(arg){
			if( typeof arg === 'string' ) return arg;
			return self.stringify(level, arg);
		});

		message = require('util').format.apply(null, args);
		message = this.format(level, message);

		this.write(message + '\n');

		return message;
	}
};

Logger.levels.forEach(function(level){
	Logger[level] = function(){
		return this.log.apply(this, [level].concat(Array.slice(arguments)));
	};
});

module.exports = Logger;