var define = require('Object.define');
var clone = require('Object.clone');

var exports = {
	getValue: function(object, name){
		return object[name];
	},

	// set name in source cloning value and merging objects
	mergeProperty: function(object, name, source){
		var sourceValue = exports.getValue(source, name), targetValue;

		if( typeof sourceValue == 'object' && sourceValue !== null ){
			targetValue = exports.getValue(object, name);

			if( typeof targetValue == 'object' && targetValue !== null ){
				exports.mergeProperties(targetValue, sourceValue);
			}
			else{
				clone.set(object, name, source);
			}
		}
		else{
			define.set(object, name, source);
		}

		return object;
	},

	mergeProperties: function(target, source, names){
		var i = 0, j, name;

		if( names ){
			j = names.length;
			for(;i<j;i++){
				name = names[i];
				if( Object.prototype.hasOwnProperty.call(source, name) ){
					this.mergeProperty(target, name, source);
				}
			}
		}
		else{
			names = Object.keys(source);
			j = names.length;
			for(;i<j;i++){
				this.mergeProperty(target, names[i], source);
			}			
		}

		return target;
	}
};

if( 'getOwnPropertyDescriptor' in Object ){

	// custom setter/getter are merged without being called
	exports.getValue = function(object, name){
		var descriptor = Object.getOwnPropertyDescriptor(object, name);
		return descriptor && 'value' in descriptor ? descriptor.value : null;
	};

}

exports.mergeProperties = exports.mergeProperties.bind(exports);
module.exports = exports;
Object.merge = exports.mergeProperties;