/*

TestFileLoader.load(modulePath) -> returns an array of test file for this module or false

*/

var TestFileCollector = {
	PATH: require('path'),
	fileSystem: require('fs'),
	testFolderName: 'test',
	testFileName: 'test.js',

	isMainModule: function(path){
		var mainModulePath;

		try{
			mainModulePath = require.resolve(this.PATH.dirname(path));
		}
		catch(e){
			mainModulePath = '';
		}

		return mainModulePath === path;
	},

	getModuleFromTestFile: function(testFilePath){
		var dirname = this.PATH.dirname(testFilePath);

		if( dirname === this.testFolderName ){
			return this.PATH.dirname(dirname);
		}

		return dirname;
	},

	filterFolder: function(modulePath){
		var parts = modulePath.split(this.path.sep);
		return parts[parts.length - 1] !== this.testFolderName;
	},

	fromFile: function(path){
		var testFile, dirname = this.PATH.dirname(path);

		if( this.isMainModule(path) ){
			testFile = dirname + this.PATH.sep + this.testFileName;
			if( this.fileSystem.existsSync(testFile) ){
				return testFile;
			}
		}		

		testFile = dirname + this.PATH.sep + this.PATH.basename(path, '.js') + '-test.js';
		if( this.fileSystem.existsSync(testFile) ){
			return testFile;
		}

		return false;
	},

	filterFile: function(testFile){
		return testFile.slice(-3) === '.js' || testFile.slice(-5) === '.test';
	},

	readFolderFiles: function(path){
		var files;

		try{
			// any files in it is a test
			files = require('fs.extra').readdirSyncRecursive(path).filter(this.filterFile, this);
		}
		catch(e){
			files = false;
		}

		return files;
	},

	fromFolder: function(path){
		var testFolder, files;
		
		if( this.isMainModule(path) ){
			testFolder = this.PATH.dirname(path) + this.PATH.sep + this.testFolderName;
			if( this.fileSystem.existsSync(testFolder) ){
				return this.readFolderFiles(testFolder);
			}	
		}

		testFolder = this.PATH.dirname(path) + this.PATH.sep + this.PATH.basename(path, '.js') + '-test';
		if( this.fileSystem.existsSync(testFolder) ){
			return this.readFolderFiles(testFolder);
		}
		
		return [];
	},

	collect: function(modulePath, fn, bind){
		var file, error, result;

		try{
			file = this.fromFile(modulePath);
			result = file ? [file] : this.fromFolder(modulePath);
		}
		catch(e){
			error = e;
		}

		fn.call(bind, error, result);
	}
};

module.exports = TestFileCollector;