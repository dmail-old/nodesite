/*

TestFileLoader.load(modulePath) -> returns an array of test file for this module or false

pour le moment et pour simplifier on va considérer qu'un module ne peut avoir
qu'un seul fichier de test, on retourne un tableau par compatibilité mais il n'y a qu'un fichier

en premier test/test-nomdumodule.js
en second test-nomdumodule.js

si le module est le main module on fait
test/test.js
test.js

node_modules/
	Iterator/
		index.js
		Iterator.js
		test.js <- ne doit pas être considérer comme un module
		test-Iterator.js <- ne doit pas être considérer comme un module
		test/
			test.js
			test-Iterator.js

*/

require('promise');
var proto = require('proto');

var ModuleTestFileCollector = proto.extend({
	PATH: require('path'),
	fileSystem: require('fs'),
	testFolderName: 'test',
	testFileName: 'test.js',

	constructor: function(path){
		this.path = path;
		this.dirname = this.PATH.dirname(path);
		this.basename = this.PATH.basename(path);
	},

	exists: function(path){
		return new Promise(function(resolve, reject){
			this.fileSystem.exists(path, resolve);
		}.bind(this));
	},

	isMainModule: function(path){
		var mainModulePath;

		try{
			mainModulePath = require.resolve(this.dirname);
		}
		catch(e){
			mainModulePath = '';
		}

		return mainModulePath === path;
	},

	collect: function(){
		var testFolder = this.PATH.join(this.dirname, this.testFolderName);

		return this.exists(testFolder).then(function(hasTestFolder){
			var name, testFilePath;

			if( this.isMainModule(this.path) ){
				name = this.testFileName;
			}
			else{
				name = 'test-' + this.basename;
			}

			if( hasTestFolder ){
				testFilePath = this.PATH.join(testFolder, name);
			}
			else{
				testFilePath = this.PATH.join(this.dirname, name);
			}

			return this.exists(testFilePath).then(function(exists){
				if( exists ) return [testFilePath];
				return [];
			}.bind(this));
		}.bind(this));
	}
});

var TestFileCollector = {
	PATH: require('path'),

	isTestFile: function(testFilePath){
		var basename = this.PATH.basename(testFilePath);
		return basename === 'test.js' || basename.indexOf('test-') === 0;
	},

	getModuleFromTestFile: function(testFilePath){
		var dirname = this.PATH.dirname(testFilePath);

		if( this.PATH.basename(dirname) === 'test' ){
			dirname = this.PATH.dirname(dirname);
		}

		if( this.PATH.basename(testFilePath) === 'test.js' ){
			return require.resolve(dirname);
		}
		return this.PATH.join(dirname, testFilePath.slice('test-'.length));
	},

	collect: function(modulePath, fn, bind){
		ModuleTestFileCollector.create(modulePath).collect().then(
			function(paths){
				fn.call(bind, null, paths);
			},
			function(error){
				fn.call(bind, error);
			}
		);
	}
};

module.exports = TestFileCollector;