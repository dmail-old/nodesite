/*

*/

var TestSerie = require('../TestSerie');

var ModuleTest = TestSerie.create({
	type: 'module',
	Test: require('../FileTest'),
	Collector: require('./FileTestCollector'),
	FileObserver: require('FileObserver'),
	path: null, // path of the module

	init: function(path){
		TestSerie.init.call(this);
		this.path = path;
		
		this.testPaths = this.Collector.collect(path);
		if( this.testPaths.length ){
			this.tests = this.createTestList();
			this.load();
		}
	},

	createTestList: function(){
		return this.testPaths.map(this.createTest, this);
	},

	getDependencyLevel: function(module){
		var level = 0, children = module.children, i = 0, j = children.length, child, childLevel;

		if( j ){
			for(;i<j;i++){
				child = children[i];
				childLevel = this.getDependencyLevel(child);
				level = Math.max(level, childLevel);
			}

			level++;
		}

		return level;
	},

	setModule: function(module){
		this.level = this.getDependencyLevel(module);
		this.forEach(function(fileTest){ fileTest.setModule(module); });
		this.module = module;
	},

	load: function(){
		// delete all cache to compute the right dependencylevel
		for(var id in require.cache) delete require.cache[id];
		
		require(this.path);
		this.setModule(require.cache[this.path]);
	},

	augmentError: function(e){
		e.moduleTest = this;
		TestSerie.augmentError.call(this, e);
	},
	
	observe: function(fn, bind){
		// currently this.path is the path to the module file, dpenedencies are ignored
		// so we always got a file no need to collectFileSync
		/*
		require('fs.extra').collectFileSync(this.path).forEach(function(file){
			this.FileObserver.observe(file, this.onChange, this);
		}, this);
		*/

		function listener(){
			fn.call(bind, this);
		}

		this.FileObserver.observe(this.path, listener, this);

		this.forEach(function(fileTest){
			this.FileObserver.observe(fileTest.path, listener, fileTest);	
		}, this);
	}
});

module.exports = ModuleTest;