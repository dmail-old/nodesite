/*
Why Loader ?

-> We have to test the most dependent module in the end

To order the module tests by dependency we have to require() them and add their children count recursively
Because require.cache mess with children we have to delete all require.cache before require()
But we keep the module cache once the dependency level of this module is known
*/

var Loader = {
	cache: {},

	cached: function(path){
		return path in this.cache;
	},

	clear: function(){
		// clear cache to compute the right dependencylevel
		// but module for which we already got the right level can remain in cache
		for(var id in require.cache){
			if( !this.cached(id) ) delete require.cache[id];
		}
	},

	load: function(path){
		if( path in this.cache ){
			return this.cache[path];
		}
		this.clear();
		require(path);

		var module = require.cache[path];

		this.cache[path] = module;

		module.dependencylevel = this.getDependencyLevel(module);

		return module;
	},

	getDependencyLevel: function(module){
		if( typeof module.dependencylevel === 'number' ) return module.dependencylevel;

		var level = 0, children = module.children, i = 0, j = children.length, child, childLevel;

		if( j ){
			for(;i<j;i++){
				child = children[i];
				childLevel = this.getDependencyLevel(child);
				level = Math.max(level, childLevel);
			}

			level++;
		}

		return level;
	}
};

var TestSerie = require('../TestSerie');
var proto = require('proto');

var ModuleTest = proto.extend(TestSerie, {
	type: 'module',
	Test: require('../FileTest'),
	Collector: require('./FileTestCollector'),
	FileObserver: require('FileObserver'),
	Loader: Loader,
	path: null, // path of the module

	constructor: function(path){
		TestSerie.call(this);
		this.path = path;
		this.name = 'Test for module: ' + path;
		
		this.testPaths = this.Collector.collect(path);
		if( this.testPaths.length ){
			this.tests = this.createTestList();
			this.load();
		}
	},

	createTestList: function(){
		return this.testPaths.map(this.createTest, this);
	},

	setModule: function(module){
		this.level = module.dependencyLevel;
		this.forEach(function(fileTest){ fileTest.setModule(module); });
		this.module = module;
	},

	load: function(){
		this.setModule(Loader.load(this.path));
	},

	observe: function(fn, bind){
		// currently this.path is the path to the module file, dpenedencies are ignored
		// so we always got a file no need to collectFileSync
		/*
		require('fs.extra').collectFileSync(this.path).forEach(function(file){
			this.FileObserver.observe(file, this.onChange, this);
		}, this);
		*/

		function listener(){
			fn.call(bind, this);
		}

		this.FileObserver.prototype.observe(this.path, listener, this);

		this.forEach(function(fileTest){
			this.FileObserver.prototype.observe(fileTest.path, listener, fileTest);	
		}, this);
	}
});

module.exports = ModuleTest;