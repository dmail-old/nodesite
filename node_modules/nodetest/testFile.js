var proto = require('proto');
var debug = require('debug');
var FileObserver = require('FileObserver');
var Test = require('./test');

require('promise/map');
require('promise/reduce');

var TestFile = proto.extend({
	FileObserver: FileObserver,
	Test: Test,
	type: 'file',
	path: null,

	constructor: function(path, changeReaction){
		this.path = path;
		this.reset();

		if( changeReaction ){
			this.observe(function(){
				changeReaction(this);
			}, this);
		}
	},

	reset: function(){
		this.state = 'created';
	},

	observe: function(fn, bind){
		this.FileObserver.observe(this.path, fn, bind);
	},

	createTest: function(testFn, description){
		var test = this.Test.create(testFn, description);
		return test;
	},

	load: function(){
		return new Promise(function(resolve, reject){
			this.exports = require(this.path);
			this.state = 'loaded';
			resolve(this.exports);
		}.bind(this)).catch(function(error){
			this.state = 'loadError';
			return Promise.reject(error);
		}.bind(this));
	},

	createTests: function(){
		return Object.keys(this.exports).map(function(key){
			return this.createTest(this.exports[key], key);
		}, this);
	}
});

module.exports = TestFile;