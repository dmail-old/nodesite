/*

A test is a task with a setup() & teardown() method that is rejected after a timeout

maybe add a skip(reason) method a skip the test under some conditions (reason is optionnal)
and a method skipIf(condition, reason)

*/

var proto = require('proto');
var Task = require('Task');

var TestPrototype = proto.extend(Task, {
	type: 'test',
	name: 'Anonymous test',
	timeout: null,
	startDate: null,
	endDate: null,
	parent: null,

	constructor: function(test){
		this.test = test;
		Task.call(this.exec, this);
	},
	
	// called before calling the test
	setup: function(){
		// noop
	},

	// called when the test has been called
	teardown: function(){
		// noop
	},

	// called to clean stuff once test is completed
	clean: function(){
		Task.prototype.clean.call(this);
		this.endDate = new Date();
		if( this.timer != null ){
			clearTimeout(this.timer);
			this.timer = null;
		}
	},

	_exec: function(){
		this.test.call(this);
	},

	exec: function(worker){
		this.startDate = new Date();

		try{
			this.setup();
		}
		catch(e){
			return worker.reject(e); // during setup (todo: l'indiquer dans lerreur)
		}

		this._exec();		

		if( typeof this.timeout == 'number' ){
			this.timer = setTimeout(this.onTimeOut.bind(this), this.timeout);
		}

		try{
			this.teardown();
		}
		catch(e){
			return worker.reject(e); // during teardown
		}
	},

	createTimeOutError: function(){
		var error = new Error('Test '+ this.name +' is too slow');
		error.code = 'TEST_TIMEOUT';
		return error;
	},

	onTimeOut: function(){
		this.timer = null;
		this.worker.reject(this.createTimeOutError());
	},

	get duration(){
		return this.endDate - this.startDate;
	},

	toString: function(){
		return '[object Test]';
	}
});

module.exports = TestPrototype;