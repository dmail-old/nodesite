/*

Les autres test unitaires ignore les tests qui échouent et lancer les autres
Moi je choisit de m'arrêter au test qui fail

*/

var debug = require('debug');

var LineTemplate = '{lineNumber} {lineSource}';
var LineSeparator = '\n';
var LineStyles = {
	lineNumber: 'grey',
	lineSource: 'grey',
	currentLineNumber: 'white',
	currentLineSource: 'white',
	currentLine: 'bg-yellow'
};
var ConsoleTemplate = require('LogStream/Log/ConsoleTemplate');

var LineTemplate = ConsoleTemplate.create(LineTemplate);
LineTemplate.registerStyles(LineStyles);

var LogStream = require('LogStream');

function createErrorSourceLog(file, lineNumber){
	lineNumber = lineNumber - 1;

	// cannot read file out of the working directory
	if( file.indexOf(require('path').sep) === -1 ){
		return null;
	}

	var lines = require('fs').readFileSync(file, 'utf8').split(/\r?\n/);
	var contextDepth = 2;
	var minLine = Math.max(lineNumber - contextDepth, 0);
	var maxLine = Math.min(lineNumber + contextDepth, lines.length);

	lines = lines.slice(minLine, maxLine);

	var source = LineTemplate.repeat(lines, LineSeparator, function(line, index, log, array){
		if( minLine + index == lineNumber ){
			log.globalStyle = 'currentLine';
			log.registerStyle('lineNumber', 'currentLineNumber');
			log.registerStyle('lineSource', 'currentLineSource');
		}

		return {
			lineNumber: minLine + index + 1,
			lineSource: line
		};
	});

	return source;
}

function handleFailure(logger, error){
	if( error.file ){
		var stack = error.stack;
		var source = createErrorSourceLog(error.file, error.line);

		if( error.id ){
			console.log('Error in the test "', error.id, '"');
		}

		if( source == null ){
			logger.error('{stack}\n{source}', {
				stack: stack,
				source: 'node native code (certainly Promise)'
			});
		}
		else{
			logger.error('{stack}\n{path}\n{source}', {
				stack: stack,
				path: error.file,
				source: source
			});
		}
	}
	else{
		logger.error(error.stack);
	}
}

var proto = require('proto');

var TestResult = proto.extend({
	constructor: function(reporter){
		this.reporter = reporter;
		this.pending = true;
		this.promise = this.reporter.test.exec();
		this.promise.then(this.resolve.bind(this), this.reject.bind(this)).catch(function(error){
			console.error('internal error while testing', error.stack);
		});
	},

	resolve: function(value){
		if( !this.cancelled ){
			this.pending = false;
			this.reporter.onresolve(value);
		}
	},

	reject: function(value){
		if( !this.cancelled ){
			debug('rejected test with', value);
			this.pending = false;
			this.reporter.onreject(value);
		}
	},

	cancel: function(){
		this.cancelled = true;
	}
});

var TestReporter = proto.extend({
	constructor: function(test, listener, bind, watch){
		this.test = test;

		if( typeof listener == 'function' ){
			this.listener = listener;
			this.bind = bind;
		}
		else{
			var logger;
			if( LogStream.isPrototypeOf(listener) ){
				logger = listener;
			}
			else{
				logger = LogStream.create();
			}

			watch = bind;
			this.logger = logger;
			this.listener = function(error){
				if( this.test.type === 'folder' ){
					this.handleFolderResult(this.test);
				}
				else if( this.test.type === 'module' ){
					this.handleModuleResult(this.test);
				}
				else{
					this.handleTestResult(this.test);
				}

				if( error ){
					handleFailure(this.logger, error);
				}
			};
			this.bind = this;
		}

		if( watch ) this.enableFileWatch();
		this.start();
	},

	handleFolderResult: function(folderTest){
		if( folderTest.moduleTests.length === 1 ) return this.handleModuleResult(folderTest.moduleTests[0]);

		var message = 'Test results of {path} ({duration}ms {count} modules)\n{results}';

		this.logger.info(message, {
			path: folderTest.path,
			duration: folderTest.duration,
			count: folderTest.moduleTests.length,
			results: folderTest.toTable().toString()
		});
	},

	handleModuleResult: function(moduleTest){
		if( moduleTest.tests.length === 1 ) return this.handleTestResult(moduleTest.tests[0]);

		var message = 'Module test results {path} ({duration}ms {count} files)\n{results}';

		this.logger.info(message, {
			path: moduleTest.path,
			duration: moduleTest.duration,
			count: moduleTest.tests.length,
			results: moduleTest.toTable().toString()
		});
	},

	handleTestResult: function(meta){
		// we should render an assertions table

		var test = this.test;
		var message = 'Test results {description] ({duration}ms {count} assertions)\n{results}';

		this.logger.info(message, {
			description: test.description,
			duration: test.duration,
			count: test.assertionCount,
			results: test.toTable().toString()
		});
	},

	// EBUSY peut se produire ici aussi, il faudrait la même logique que dans nodeprocess
	moduleChangeReaction: function(moduleTest){
		console.log(moduleTest.path + ' module modified');
		require('module-util').uncache(moduleTest.path);
		//delete require.cache[moduleTest.path];
		delete moduleTest.util.cache[moduleTest.path];
		this.restart();
	},

	fileChangeReaction: function(testFile){
		console.log(testFile.path + ' file modified');
		require('module-util').uncache(testFile.path);
		//delete require.cache[testFile.path];
		this.restart();
	},

	enableFileWatch: function(){
		if( this.test.type === 'folder' ){
			this.test.moduleChangeReaction = this.moduleChangeReaction.bind(this);
			this.test.fileChangeReaction = this.fileChangeReaction.bind(this);
		}
		else if( this.test.type === 'module' ){
			this.test.changeReaction = this.moduleChangeReaction.bind(this);
			this.test.fileChangeReaction = this.fileChangeReaction.bind(this);
		}
	},

	onresolve: function(meta){
		this.listener.call(this.bind, null, meta);
	},

	onreject: function(error){
		if( !error ) error = new Error('rejected task without error');
		this.listener.call(this.bind, error);
	},

	start: function(){
		this.result = TestResult.create(this);
	},

	restart: function(){
		this.result.cancel();

		// avoid to recall restart when file is modified
		this.test.moduleChangeReaction = null;
		this.test.fileChangeReaction = null;
		this.test.changeReaction = null;
		// reset test metas and other stuff
		this.test.reset();

		this.start();
	}
});

var unit = require('./unit');
var nodetest = {
	testFolder: function(path, fn, bind, watch){
		path = require('path').resolve(process.cwd(), path);
		return TestReporter.create(unit.testFolder(path), fn, bind, watch);
	},

	testModule: function(path, fn, bind, watch){
		path = require.resolve(path);
		return TestReporter.create(unit.testModule(path), fn, bind, watch);
	},

	testFile: function(path, module, fn, bind){

	},

	test: function(test, module, fn, bind){

	}
};

module.exports = nodetest;