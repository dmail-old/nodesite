/*
*/

require('Profile');

var LineTemplate = '{lineNumber} {lineSource}';
var LineSeparator = '\n';
var LineStyles = {
	lineNumber: 'grey',
	lineSource: 'grey',
	currentLineNumber: 'white',
	currentLineSource: 'white',
	currentLine: 'bg-yellow'
};
var ConsoleTemplate = require('LogStream/Log/ConsoleTemplate');

var LineTemplate = new ConsoleTemplate(LineTemplate);
LineTemplate.registerStyles(LineStyles);

var LogStream = require('LogStream');

function createErrorSourceLog(file, lineNumber){
	lineNumber = lineNumber - 1;

	// cannot read file out of the working directory
	if( file.indexOf(require('path').sep) === -1 ){
		return 'node native code';
	}

	var lines = require('fs').readFileSync(file, 'utf8').split(/\r?\n/);
	var contextDepth = 2;
	var minLine = Math.max(lineNumber - contextDepth, 0);
	var maxLine = Math.min(lineNumber + contextDepth, lines.length);
	
	lines = lines.slice(minLine, maxLine);

	var source = LineTemplate.repeat(lines, LineSeparator, function(line, index, log, array){
		if( minLine + index == lineNumber ){
			log.globalStyle = 'currentLine';
			log.registerStyle('lineNumber', 'currentLineNumber');
			log.registerStyle('lineSource', 'currentLineSource');
		}

		return {
			lineNumber: minLine + index + 1,
			lineSource: line
		};
	});

	return source;
}

function handleFailure(logger, error){
	if( error.name == 'AssertionError' ){
		if( error.type == 'equal' ){
			error.message = error.args[0] + ' not equal to ' + error.args[1];
		}

		var source = createErrorSourceLog(error.file, error.line);

		logger.error('{stack}\n{path}\n{source}', {
			message: error.message,
			stack: error.stack,
			path: error.file,
			source: source
		});
	}
	else{
		console.log('error on tests' + error);
		logger.error(error.stack);
	}
}

var proto = require('proto');

var TestResult = proto.create({
	constructor: function(reporter){
		this.reporter = reporter;
		this.pending = true;
		this.promise = this.reporter.test.test();
		this.promise.then(this.resolve.bind(this), this.reject.bind(this));
	},

	resolve: function(value){
		if( !this.cancelled ){
			this.pending = false;
			this.reporter.onresolve(value);
		}
	},

	reject: function(value){
		if( !this.cancelled ){
			this.pending = false;
			this.reporter.onreject(value);
		}
	},

	cancel: function(){
		this.cancelled = true;
	}
});

var TestReporter = proto.create({
	profile: true,

	handleFolderResult: function(meta){
		var message = 'Test results for folder {path} : \n{results}';

		var Table = require('TableTemplate');
		var table = new Table();
		
		table.addRow(['module', 'test']);
		table.addRows(meta.moduleMetas.map(function(meta){
			return [
				meta.path,
				meta.fileMetas.reduce(function(previous, meta){
					return previous + meta.testMetas.length;
				}, 0)
			];
		}));
		table.setRowClass(0, 'header');

		this.logger.info(message, {			
			path: meta.path,
			//duration: meta.duration,
			results: table.toString()
		});
	},

	handleModuleResult: function(meta){
		var message = '{count} tests passed for {path} module in {duration}ms';
		message+= ' (find: {findDuration}, load: {loadDuration}, require: {requireDuration}, test: {execDuration})';
		
		this.logger.info(message, {
			count: meta.fileMetas.reduce(function(previous, current){
				return previous + current.testMetas.length;
			}, 0),
			path: meta.path,
			duration: meta.duration,
			findDuration: meta.findDuration,
			loadDuration: meta.loadDuration,
			requireDuration: meta.requireDuration,
			execDuration: meta.execDuration
		});
	},

	handleFileResult: function(meta){
		var message = '{count} tests passed in {duration}ms';
		message+= ' (find: {findDuration}, load: {loadDuration}, require: {requireDuration}, test: {execDuration})';
		
		this.logger.info(message, {
			count: meta.moduleMetas.length,
			duration: meta.duration,
			findDuration: meta.findDuration,
			loadDuration: meta.loadDuration,
			requireDuration: meta.requireDuration,
			execDuration: meta.execDuration
		});
	},

	constructor: function(test, listener, bind, watch){
		this.test = test;

		if( typeof listener == 'function' ){
			if( watch ) this.enableFileWatch();
			this.listener = listener;
			this.bind = bind;
		}
		else{
			var logger;
			if( LogStream.isPrototypeOf(listener) ){
				logger = listener;
			}
			else{
				logger = new LogStream();
			}			

			if( !bind ) this.enableFileWatch();
			
			this.logger = logger;			
			this.listener = function(error, meta){
				if( error ){
					handleFailure(this.logger, error);
				}
				else{
					if( this.profile ) console.profileEnd();
					if( this.test.type === 'folder' ){
						this.handleFolderResult(meta);
					}						
					else if( this.test.type === 'module' ){
						this.handleModuleResult(meta);
					}
					else if( this.test.type === 'file' ){
						this.handleFileResult(meta);
					}
					else{
						this.handleTestResult(meta);
					}				
				}
			};
			this.bind = this;
		}

		this.start();
	},

	moduleChangeReaction: function(moduleTest){
		console.log(moduleTest.path + ' module modified');
		// require('module-util').uncache(moduleTest.path);
		delete require.cache[moduleTest.path];
		delete moduleTest.util.cache[moduleTest.path];
		this.restart();
	},

	fileChangeReaction: function(testFile){
		console.log(testFile.path + ' file modified');
		delete require.cache[testFile.path];
		this.restart();
	},

	enableFileWatch: function(){
		if( this.test.type === 'folder' ){
			this.test.moduleChangeReaction = this.moduleChangeReaction.bind(this);
			this.test.fileChangeReaction = this.fileChangeReaction.bind(this);
		}
		else if( this.test.type === 'module' ){
			this.test.changeReaction = this.moduleChangeReaction.bind(this);
			this.test.fileChangeReaction = this.fileChangeReaction.bind(this);
		}
		else if( this.test.type === 'file' ){
			this.test.changeReaction = this.fileChangeReaction.bind(this);
		}
	},

	onresolve: function(meta){
		this.listener.call(this.bind, null, meta);
	},

	onreject: function(error){
		if( !error ) error = new Error('rejected task without error');
		this.listener.call(this.bind, error);
	},

	start: function(){
		if( this.profile ) console.profile();
		this.result = new TestResult(this);
	},

	restart: function(){
		this.result.cancel();
		
		// avoid to recall restart when file is modified
		this.test.moduleChangeReaction = null;
		this.test.fileChangeReaction = null;
		this.test.changeReaction = null;
		// reset test metas and other stuff
		this.test.reset();

		this.start();
	}
});

var runner = require('./TestRunner');
var nodetest = {
	testFolder: function(path, fn, bind, watch){
		path = require('path').resolve(process.cwd(), path);
		return new TestReporter(runner.testFolder(path), fn, bind, watch);
	},

	testModule: function(path, fn, bind, watch){
		path = require.resolve(path);
		return new TestReporter(runner.testModule(path), fn, bind, watch);
	},

	testFile: function(path, module, fn, bind){

	},

	test: function(test, module, fn, bind){

	}
};

module.exports = nodetest;