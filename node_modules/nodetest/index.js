/*
var nodetest = require('nodetest');

nodetest.testModule('es6'); // log in the console
nodetest.testModule('es6', logger); // log using logger
nodetest.testModule('es6', function(error, duration){
	// do something with error / duration
});
nodetest.testModuleRecursive('es6');

*/

var LineTemplate = '{lineNumber} {lineSource}';
var LineSeparator = '\n';
var LineStyles = {
	lineNumber: 'grey',
	lineSource: 'grey',
	currentLineNumber: 'white',
	currentLineSource: 'white',
	currentLine: 'bg-yellow'
};
var ConsoleTemplate = require('LogStream/Log/ConsoleTemplate');
var stackTrace = require('stackTrace');

var LineTemplate = new ConsoleTemplate(LineTemplate);
LineTemplate.registerStyles(LineStyles);

var LogStream = require('LogStream');

function createSourceLogFromCall(call){
	var file = call.getFileName();
	var line = call.getLineNumber() -1;

	// cannot read file out of the working directory
	if( file.indexOf(path.sep) === -1 ){
		return 'node native code';
	}

	var lines = require('fs').readFileSync(file, 'utf8').split(/\r?\n/);
	var contextDepth = 5;
	var minLine = Math.max(line - contextDepth, 0);
	var maxLine = Math.min(line + contextDepth, lines.length);
	
	lines = lines.slice(minLine, maxLine);

	var source = LineTemplate.repeat(lines, LineSeparator, function(index, lines, log){
		if( minLine + index == line ){
			log.globalStyle = 'currentLine';
			log.registerStyle('lineNumber', 'currentLineNumber');
			log.registerStyle('lineSource', 'currentLineSource');
		}

		return {
			lineNumber: minLine + index + 1,
			lineSource: lines[index]
		};
	});

	return source;
}

function handleFailure(logger, error){
	if( !error.stack ) return logger.error(error.stack); // max stack error
	
	var source, traces, call, path = error.fileName;

	traces = stackTrace.parse(error);

	if( !traces ) return logger.error(error.stack);

	call = stackTrace.findCallByFile(traces, path);

	if( !call ) return logger.error(error.stack);

	source = createSourceLogFromCall(call);

	if( error.name == 'AssertionError' ){
		if( error.type == 'equal' ){
			error.message = error.args[0] + ' not equal to ' + error.args[1];
		}
	}

	logger.error('{stack}\n{path}\n{source}', {
		message: error.message,
		stack: error.stack,
		path: path,
		source: source
	});
}

function thenCall(task, fn, bind){
	return task.then(
		function(result){
			fn.call(bind, null, result);
		},
		function(error){
			fn.call(bind, error);
		}
	);
}

function thenLog(task, logger){
	return task.then(
		function(result){
			var message = '{count} module tested in {duration} ms';
			logger.info(message, result);				
		},
		function(error){
			handleFailure(logger, error);
		}
	);	
}

/*
testFolder lancé dans le même process

module changed -> relance les tests du folder
file changed -> relance les tests ce fichier

testModule lancé dans le même process

module changed -> relance les tests pour ce module
file changed -> relance les tests pour ce fichier

testFolder lancé comme childProcess
module changed -> 

ok dans tout les cas ça ne change rien mais
faut faire ça

*/

var runner = require('./Runner');
var nodetest = {
	testFolder: function(path, fn, bind){
		var task = runner.testFolder(path);

		if( typeof fn === 'function' ){
			thenCall(task, fn, bind);
		}
		else if( LogStream.isPrototypeOf(fn) ){
			thenLog(task, fn);
		}
		// log to the console
		else{
			thenLog(task, new LogStream());
		}

		return task;
	},

	testModule: function(path, fn, bind){
		var task = runner.testModule(path);

		if( typeof fn === 'function' ){
			thenCall(task, fn, bind);
		}
		else if( LogStream.isPrototypeOf(fn) ){
			thenLog(task, fn);
		}
		else{
			thenLog(task, new LogStream());
		}
	}
};

module.exports = nodetest;