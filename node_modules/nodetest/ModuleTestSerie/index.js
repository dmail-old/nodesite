/*

le fait qu'on require les modules y compris ceux n'ayant pas de tests associ√©s parait bizarre
cependant c'est ok pour moi

*/

var TestSerie = require('../TestSerie');
var proto = require('proto');

var ModuleTestSerie = proto.extend(TestSerie, {
	path: null, // path of a folder/module to test
	Test: require('../ModuleTest'),	
	util: require('module-util'),
	loadStartDate: null,
	loadEndDate: null,
	loadDuration: null,
	loadFn: null,
	loadBind: null,

	constructor: function(path, tests){
		this.path = path;
		this.name = 'Test for modules in ' + path;
		TestSerie.call(this, tests);
	},

	onload: function(error, modules, badSignaturePaths){
		if( !error ){
			if( badSignaturePaths.length ){
				badSignaturePaths = badSignaturePaths.filter(this.Test.Collector.filterFolder, this.Test.Collector);
				if( badSignaturePaths.length ) this.emit('badSignature', badSignaturePaths);
			}

			var i = 0, j = modules.length, moduleTest;
			for(;i<j;i++){
				moduleTest = this.createChild(modules[i]);
				moduleTest.load();
				if( moduleTest.length ){
					this.add(moduleTest);
				}
			}
		}
		
		this.loadEndDate = new Date();
		this.loadDuration = this.loadEndDate - this.loadStartDate;
		this.loadFn.call(this.loadBind, error, this.loadDuration);
	},

	load: function(fn, bind){
		this.loadFn = fn;
		this.loadBind = bind;
		this.loadStartDate = new Date();
		this.util.readModuleRecursive(this.path, this.onload, this);		
	},

	observe: function(fn, bind){
		this.forEach(function(moduleTest){
			moduleTest.observe(fn, bind);
		});
	}
});

module.exports = ModuleTestSerie;