var proto = require('proto');
var debug = require('debug');
var moduleUtil = require('module-util');
var ModuleTest = require('./moduleTest');
require('promise/map');
require('promise/reduce');
require('promise/mapReduce');

var FolderTest = proto.extend({
	type: 'folder',
	util: moduleUtil,
	ModuleTest: ModuleTest,
	moduleChangeReaction: null,
	fileChangeReaction: null,
	moduleTests: [],

	constructor: function(path){
		this.path = path;
		this.reset();
	},

	reset: function(){
		this.state = 'created';
		this.moduleTests = [];
		this.findDuration =  0;
		this.loadDuration =  0;
		this.requireDuration = 0;
		this.testDuration = 0;
		this.duration = 0;
	},

	toJSON: function(){
		return {
			state: this.state,
			path: this.path,
			moduleTests: this.moduleTests,
			findDuration: this.findDuration,
			loadDuration: this.loadDuration,
			requireDuration: this.requireDuration,
			testDuration: this.testDuration,
			duration: this.duration
		};
	},

	createModuleTest: function(path){
		return this.ModuleTest.create(path, this.moduleChangeReaction, this.fileChangeReaction);
	},

	findModulePaths: function(){
		var start = new Date();
		var folderPath = this.path;
		return new Promise(function(resolve, reject){
			this.util.collectModulePaths(folderPath, function(error, modulePaths, badPaths){
				/*
				// faudrais faire kkchose avec badPaths
				if( badPaths.length ){
					// test files cannot be considered as bad modules
					badPaths = badPaths.filter(this.Collector.filterFolder, this.Collector);
					//if( badSignaturePaths.length ) this.test.emit('badSignature', badSignaturePaths);
				}
				*/
				if( error ) reject(error);
				else resolve(modulePaths);
			}, this);
		}.bind(this)).then(function(modulePaths){
			this.findDuration = new Date() - start;
			return modulePaths;
		}.bind(this));
	},

	filterTestModules: function(modulePaths){
		return modulePaths.filter(function(modulePath){
			return !ModuleTest.FileCollector.isTestFile(modulePath);
		}, this);
	},

	createModules: function(modulePaths){
		return this.moduleTests = modulePaths.map(this.createModuleTest, this);
	},

	loadModuleTests: function(){
		var start = new Date();

		return Promise.mapReduce(this.moduleTests, function(moduleTest){
			return moduleTest.loadTests();
		}).then(function(){
			this.loadDuration = new Date() - start;
		}.bind(this));
	},

	filterModules: function(){
		return this.moduleTests = this.moduleTests.filter(function(moduleTest){
			return moduleTest.hasTest();
		});
	},

	loadModules: function(){
		var start = new Date();
		return Promise.mapReduce(this.moduleTests, function(moduleTest){
			return moduleTest.load();
		}).then(function(){
			this.requireDuration = new Date() - start;
		}.bind(this));
	},

	sortModules: function(){
		return this.moduleTests = this.moduleTests.sort(function(a, b){
			return this.util.getDependencyLevel(a.module) - this.util.getDependencyLevel(b.module);
		}.bind(this));
	},

	execTests: function(){
		var start = new Date();

		return Promise.map(this.moduleTests, function(moduleTest){
			return moduleTest.execTests();
		}).then(function(){
			this.testDuration = new Date() - start;
		}.bind(this)).catch(function(value){
			debug('foldertest rejected', this.path, 'with', value);
			return Promise.reject(value);
		}.bind(this));
	},

	exec: function(){
		var start = new Date();

		return Promise.reduce([
			this.findModulePaths, // find modules
			this.filterTestModules, // exclude test that sounds like modules byt are not
			this.createModules, // create module object
			this.loadModuleTests, // create module tests
			this.filterModules, // filter module without tests
			this.loadModules, // require the module
			this.sortModules, // sort module by dependency
			this.execTests, // exec module tests
			function(){
				debug('tests are over');
				this.state = 'passed';
				this.duration = new Date() - start;
				return this;
			}
		], this, this.path).catch(function(value){
			debug('folder rejected', this.path, 'with', value);
			this.state = 'failed';
			this.duration = new Date() - start;
			return Promise.reject(value);
		}.bind(this));
	}
});

module.exports = FolderTest;