/*

comment manager moduleChangeReaction et fileChangeReaction?

*/

var proto = require('proto');
var debug = require('debug');
var moduleUtil = require('module-util');
var ModuleTest = require('./moduleTest');

require('promise/map');
require('promise/reduce');
require('promise/mapReduce');

var Task = require('task');
var ModuleCollector = require('module-util/collector');

var FolderTest = proto.extend({
	type: 'folder',
	reactions: {},

	constructor: function(path){
		this.path = path;
	},

	exec: function(){
		this.task = Task.reduce(this.tasks, this.reactions);
		return this.task.spawn(this.path);
	}
});

FolderTest.tasks = [
	// find modules
	function findModulePaths(path){
		var process = this, collector = ModuleCollector.create(path);
		collector.onmodule = function(path){
			process.progress(path);
		};
		return collector.createPromise();
	},
	// exclude test that sounds like modules byt are not
	function filterTestFiles(modulePaths){
		return modulePaths.filter(function(modulePath){
			return !ModuleTest.FileCollector.isTestFile(modulePath);
		}, this);
	},
	// create module object
	function createModules(modulePaths){
		return modulePaths.map(function(modulePath){
			return ModuleTest.create(modulePath);
		}, this);
	},
	// create module tests
	function loadModuleTests(moduleTests){
		moduleTests.forEach(function(moduleTest){
			this.exec(function(){
				return moduleTest.loadTests();
			});
		}, this);
		return moduleTests;
	},
	// filter module without tests
	function filterModules(moduleTests){
		return moduleTests.filter(function(moduleTest){
			return moduleTest.hasTest();
		});
	},
	// require the module
	function loadModules(moduleTests){
		return Promise.mapReduce(moduleTests, function(moduleTest){
			return moduleTest.load();
		}).then(function(){
			return moduleTests;
		});
	},
	// sort module by dependency
	function sortModules(moduleTests){
		return moduleTests.sort(function(a, b){
			return moduleUtil.getDependencyLevel(a.module) - moduleUtil.getDependencyLevel(b.module);
		});
	},
	// exec module tests
	function execTests(moduleTests){
		return Promise.mapReduce(moduleTests, function(moduleTest){
			return moduleTest.execTests();
		});
	}
];

module.exports = FolderTest;