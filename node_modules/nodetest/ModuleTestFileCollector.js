/*

TestFileLoader.load(modulePath) -> returns an array of test file for this module or false

pour le moment et pour simplifier on va considérer qu'un module ne peut avoir
qu'un seul fichier de test, on retourne un tableau par compatibilité mais il n'y a qu'un fichier

en premier test/test-nomdumodule.js
en second test-nomdumodule.js

si le module est le main module on fait
test/test.js
test.js

node_modules/
	Iterator/
		index.js
		Iterator.js
		index.test.js <- ne doit pas être considérer comme un module
		Iterator.test.js <- ne doit pas être considérer comme un module

*/

require('promise');
var proto = require('proto');

var ModuleTestFileCollector = proto.extend({
	PATH: require('path'),
	fileSystem: require('fs'),
	extension: 'test.js',
	folder: 'test',

	constructor: function(path){
		this.path = path;
		this.dirname = this.PATH.dirname(path);
		this.basename = this.PATH.basename(path);

		var extension = this.PATH.extname(this.basename);
		// remove the extension
		if( extension ){
			this.basename = this.basename.slice(0, this.basename.lastIndexOf('.'));
		}
	},

	exists: function(path){
		return new Promise(function(resolve, reject){
			this.fileSystem.exists(path, resolve);
		}.bind(this));
	},

	read: function(){
		var testFolder = this.PATH.join(this.dirname, this.folder);

		return this.exists(testFolder).then(function(hasTestFolder){
			var name, testFilePath;

			name = this.basename + '.' + this.extension;

			if( hasTestFolder ){
				// test folder ignored atm
			}

			testFilePath = this.PATH.join(this.dirname, name);

			return this.exists(testFilePath).then(function(exists){
				if( exists ) return [testFilePath];
				return [];
			}.bind(this));
		}.bind(this));
	},

	isTestFile: function(testFilePath){
		return this.PATH.extname(testFilePath) == '.' + this.extension;
	},

	getModuleFromTestFile: function(testFilePath){
		var dirname = this.PATH.dirname(testFilePath);

		if( this.PATH.basename(dirname) === 'test' ){
			dirname = this.PATH.dirname(dirname);
		}

		return this.PATH.join(dirname, this.PATH.basename(dirname, '.' + this.extension));
	},

	collect: function(path){
		if( this.isTestFile(path) ) return Promise.resolve([]);
		return this.create(path).read();
	}
});

module.exports = ModuleTestFileCollector;