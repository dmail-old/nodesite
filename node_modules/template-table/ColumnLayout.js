var proto = require('@dmail/proto');
var forOf = require('for-of');
var CellLayout = require('./CellLayout');

var ColumnLayout = proto.extend({
	minWidth: 0,
	maxWidth: Infinity,
	minCellWidth: Infinity,
	maxCellWidth: 0,
	totalCellWidth: 0,
	averageCellWidth: null,
	width: 0,
	resizable: true,

	constructor: function(column, availableWidth){
		this.column = column;
		this.cells = [];

		forOf(column, function(cell){
			var cellLayout = CellLayout.create(cell, availableWidth);

			this.minWidth = Math.max(this.minWidth, cellLayout.minWidth);
			this.maxWidth = Math.min(this.maxWidth, cellLayout.maxWidth);
			this.minCellWidth = Math.min(this.minCellWidth, cellLayout.width);
			this.maxCellWidth = Math.max(this.maxCellWidth, cellLayout.width);
			this.totalCellWidth+= cellLayout.width;
			if( cell.style.width != 'auto' ) this.resizable = false;

			this.cells.push(cellLayout);
		}, this);

		this.averageCellWidth = this.totalCellWidth / this.cells.length;
		this.width = this.maxCellWidth;
	},

	setWidth: function(desired){
		var validWidth = desired, diff;

		validWidth = Math.max(this.minWidth, validWidth);
		validWidth = Math.min(this.maxWidth, validWidth);

		diff = validWidth - this.width;
		this.width = validWidth;

		return diff;
	},

	increaseWidth: function(num){
		return this.setWidth(this.width + num);
	},

	decreaseWidth: function(num){
		return - this.setWidth(this.width - num);
	}
});

module.exports = ColumnLayout;