var property = require('property');
var clone = require('../clone');

var exports = {
	getValue: function(name, object){
		return object[name];
	},

	// set name in source cloning value and merging objects
	mergeProperty: function(name, object){
		var objectValue = exports.getValue(name, object), sourceValue;

		if( typeof objectValue == 'object' && objectValue !== null ){
			sourceValue = exports.getValue(name, this);

			if( typeof sourceValue == 'object' && sourceValue !== null ){
				exports.mergeProperties(sourceValue, objectValue);
			}
			else{
				clone.cloneProperty(name, this, object);
			}
		}
		else{
			property.defineProperty.call(this, name, object);
		}

		return this;
	},

	mergeProperties: function(source, object, names){
		var i = 0, j, name;

		if( names ){
			j = names.length;
			for(;i<j;i++){
				name = names[i];
				if( Object.prototype.hasOwnProperty.call(object, name) ){
					this.mergeProperty(name, source, object);
				}
			}
		}
		else{
			property.forEachKey(object, this.mergeProperty, source);
		}

		return object;
	}
};

if( 'getOwnPropertyDescriptor' in Object ){

	// custom setter/getter are merged without being called
	exports.getValue = function(name, object){
		var descriptor = Object.getOwnPropertyDescriptor(object, name);
		return descriptor && 'value' in descriptor ? descriptor.value : null;
	};

}

exports.mergeProperties = exports.mergeProperties.bind(exports);
Object.merge = exports.mergeProperties;

module.exports = exports;
