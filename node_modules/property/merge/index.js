
var property = require('property');
var clone = require('../clone');

var merge = {
	getValue: function(name, object){
		return object[name];
	},

	// set name in source cloning value and merging objects
	mergeProperty: function(name, source, object){
		var objectValue = this.getValue(name, object), sourceValue;

		if( typeof objectValue == 'object' && objectValue !== null ){
			sourceValue = this.getValue(name, source);

			if( typeof sourceValue == 'object' && sourceValue !== null ){
				this.mergeProperties(sourceValue, objectValue);
			}
			else{
				clone.cloneProperty(name, source, object);
			}
		}
		else{
			property.appendMethod.call(source, name, object);
		}

		return this;
	},

	mergeProperties: function(source, object, names){
		var i = 0, j;

		if( names ){
			j = names.length;
			for(;i<j;i++){
				if( Object.prototype.hasOwnProperty.call(object, names[i]) ){
					this.mergeProperty(names[i], source, object);
				}
			}
		}
		else{
			names = property.ownNames(object);
			j = names.length;
			for(;i<j;i++){
				this.mergeProperty(names[i], source, object);
			}
		}		

		return object;
	}
};

if( 'getOwnPropertyDescriptor' in Object ){

	// custom setter/getter are merged without being called
	merge.getValue = function(name, object){
		var descriptor = Object.getOwnPropertyDescriptor(object, name);
		// custom getter & setter are not called
		return descriptor && 'value' in descriptor ? descriptor.value : null;
	};

}

Object.merge = merge.mergeProperties.bind(merge);

module.exports = merge;
