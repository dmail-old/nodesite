exports['support circular references'] = function(test){
	var a = {};
	a.self = a;
	var b = test.imports.cloneProperties(a);

	test.equal(a.self, a);
	test.equal(b.self, b);
	test.ok(a != b);
};

exports['cloned object have same prototype'] = function(test){
	var a = {};
	var b = Object.create(a);
	var c = test.imports.cloneProperties(b);

	test.equal(Object.getPrototypeOf(c), b);
};

exports['cloned array get non numeric properties as well'] = function(test){
	var a = [0];
	a.foo = 'bar';
	var b = test.imports.cloneProperties(a);

	test.equal(b.foo, 'bar');
};

exports['cloned function share reference (are not cloned)'] = function(test){
	var a = {
		foo: function(){}
	};
	var b = test.imports.cloneProperties(a);

	test.equal(a.foo, b.foo);
};