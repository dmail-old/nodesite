var proto = require('proto');
var EventEmitter = require('events').EventEmitter;
var FileObserver = require('FileObserver');

var NodeProcess = proto.createFrom(EventEmitter.prototype, {
	Path: require('path'),
	childProcess: require('child_process'),
	args: null,
	state: 'closed', // closed, started, restarting
	process: null,
	ctime: null,
	hasRestartFile: false,
	restartFiles: null,
	console: console,

	init: function(path, args){
		this.constructor.call(this);
		this.path = this.Path.normalize(path);
		this.args = Array.prototype.slice.call(arguments, 1);
	},

	onFileChange: function(path){
		this.emit('fileChange', path);
		this.console.warn('{path} modified -> {processPath} restart', {path: path, processPath: this.path});
		this.restart();
	},

	setRestartFiles: function(){
		this.restartFiles = arguments;

		var extraFS = require('fs.extra');
		var i = 0, j = this.restartFiles.length;
		this.hasRestartFile = true;
		for(;i<j;i++){
			extraFS.collectFileSync(this.restartFiles[i]).forEach(function(file){
				FileObserver.observe(file, this.onFileChange, this);
			}, this);
		}
	},

	isWindows: function(){
		return process.platform === 'win32';
	},

	start: function(){
		if( this.state != 'closed' ) throw new TypeError('process is not in closed state' + this.state);

		this.process = this.childProcess.fork(this.path, this.args, {
			cwd: this.Path.dirname(this.path)
		});
		this.ctime = Number(new Date());

		this.process.on('exit', this.onexit.bind(this));
		this.process.on('message', this.onmessage.bind(this));

		this.state = 'started';
		this.emit('start');
	},

	restart: function(){
		if( this.state == 'restarting' ) return;

		if( this.state == 'started' ){
			this.state = 'restarting';
			if( this.isWindows() ){
				this.kill();
			}
			else{
				this.kill('SIGUSR2');
			}
		}
		else{
			this.emit('restart');
			this.start();
		}
	},

	kill: function(signal){
		this.emit('kill', signal);
		this.process.kill(signal);
	},

	onexit: function(code, signal){
		if( this.state == 'restarting' ) signal = 'SIGUSR2';
		// this is nasty, but it gives it windows support
		else if( this.isWindows() && signal == 'SIGTERM' ) signal = 'SIGUSR2';
		// asked to restart
		else if( code == 2 ) signal = 'SIGUSR2';

		this.process = null;
		this.state = 'closed';

		// exit the monitor, but do it gracefully
		if( signal == 'SIGUSR2' ){
			this.restart();
		}
		// clean exit - wait until file change to restart
		else if( code === 0 ){
			if( this.hasRestartFile ){
				this.console.log('{path} graceful stop - waiting for file changes before restart', this);
			}
			this.emit('stop');
		}
		else{
			if( this.hasRestartFile ){
				this.console.error('{path} crashed - waiting for file changes before restarting', this);
			}
			this.emit('crash');
		}
	},

	send: function(message, handle){
		this.process.send(message, handle);
	},

	onmessage: function(message, handle){
		if( message.type ){
			this.emit(message.type, message.event);
		}
	}
});

module.exports = NodeProcess;