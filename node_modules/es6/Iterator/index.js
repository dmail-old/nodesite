require('../Symbol');
var proto = require('proto');

var Iterator = proto.create({
	constructor: function(object, keyOnly){
		if( arguments.length === 0 ){
			throw new TypeError('missing argument 0 when calling function Iterator');
		}
		if( object == null ){
			throw new TypeError('can\'t convert null to object');
		}
		if( !(this instanceof Iterator) ){
			return new Iterator(this, keyOnly);
		}

		object = Object(object); // will convert "a" into new String("a") for instance

		this.iteratedObject = object;
		this.keyOnly = keyOnly || false;
	},

	next: function(){
		return {done: true, value: undefined};
	},

	createResult: function(value, done){
		this.result.value = value;
		this.result.done = done;
		return this.result;
	},

	toString: function(){
		return '[object Iterator]'; 
	}
});

Iterator.prototype[Symbol.iterator] = function(){
	return this;
};

module.exports = Iterator;