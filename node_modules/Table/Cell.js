var proto = require('proto');
var Cell = proto.create({
	x: null,
	y: null,
	data: null, // row data of the cell
	meta: null, // meta concerning this cell

	fixed: false, // the cell is fixed (it cannot be sorted or moved)
	dependencies: [], // the cell.value depends of this array of cells
	getter: null, // cell.data will be cell.getter()
	setter: null, // cell.value will be cell.setter(data)
	value: null, // formatted value of the cell

	constructor: function(x, y, meta){
		this.x = x;
		this.y = y;
		
		if( typeof meta === 'object' && meta != null ){
			this.meta = meta;
			this.data = meta.data;
		}
		else{
			this.data = meta;
		}
	},

	compute: function(){
		if( !this.fixed && this.getter ){
			this.data = this.getter.apply(this, this.dependencies.map(function(cell){
				return cell.data;
			}));
		}
	},

	addDependency: function(cell){
		if( !(cell instanceof Cell) ){
			throw new TypeError('A cell can only depends of an other cell');
		}

		if( this.hasOwnProperty('dependencies') ){
			this.dependencies.push(cell);
		}
		else{
			this.dependencies = [cell];
		}
	},

	format: function(){
		var data = String(this.data);

		if( !this.fixed && this.setter ){
			data = this.setter(data);
		}

		data = data.replace(/\n/g, '\\n');

		this.value = data;
		return data;
	}
});

module.exports = Cell;