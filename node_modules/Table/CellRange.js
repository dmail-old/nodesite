var proto = require('proto');
var Iterator = require('iterator');

var CellRangeIterator = proto.extend.call(Iterator, {
	constructor: function(cells, left, top, width, height){
		var rowCount = cells.length, columnCount = rowCount === 0 ? 0 : cells[0].length;

		if( left < 0 ) left = 0;
		if( top < 0 ) top = 0;
		if( height > rowCount ) height = rowCount;
		if( width > columnCount ) width = columnCount;

		this.cells = cells;
		this.left = left;
		this.top = top;
		this.width = width;
		this.height = height;
		this.x = left;
		this.y = top;
		this.right = this.left + this.width;
		this.bottom = this.top + this.height;
	},

	next: function(){
		var cell;

		if( this.x >= this.right ){
			this.x = this.left;
			this.y++;
			if( this.y >= this.bottom ){
				return this.done();
			}
		}

		cell = this.cells[this.y][this.x];
		this.x++;

		return this.createResult(cell, false);
	}
});

var forOf = require('forOf');
var CellRange = proto.extend({
	Iterator: CellRangeIterator,
	cells: null,
	x: null,
	y: null,
	width: null,
	height: null,
	_meta: null, // meta about this cellRange

	constructor: function(cells, x, y, width, height){
		this.cells = cells;
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
	},

	meta: function(name, value){
		if( arguments.length === 1 ){
			return this._meta ? this._meta[name] : null;
		}
		else{
			this._meta = this._meta || {};
			this._meta[name] = value;
		}
	},

	forEach: function(fn, bind){
		forOf(this, fn, bind);
	},

	set: function(property, value){
		forOf(this, function(cell){
			cell[property] = value;
		});
		return this;
	},

	fix: function(){
		return this.set('fixed', true);
	},

	unfix: function(){
		return this.set('fixed', false);
	},

	compute: function(getter){
		return this.set('getter', getter);
	},

	format: function(setter){
		return this.set('setter', setter);
	},

	addDependency: function(requiredCell){
		if( CellRange.isPrototypeOf(requiredCell) ){
			var dependencyRangeIterator = requiredCell[Symbol.iterator]();
			var rangeIterator = this[Symbol.iterator]();
			var next = rangeIterator.next();
			var cell;
			var nextDependency;

			while( next.done === false ){
				cell = next.value;
				nextDependency = dependencyRangeIterator.next();
				if( nextDependency.done === true ) break;
				cell.addDependency(nextDependency.value);
				next = rangeIterator.next();
			}
		}
		else{
			forOf(this, function(cell){
				cell.addDependency(requiredCell);
			});
		}
		return this;
	}
});

CellRange[Symbol.iterator] = function(){
	var width = this.width, height = this.height;

	if( height === 'auto' ){
		height = this.cells.length;
	}
	if( width === 'auto' ){
		width = height ? this.cells[0].length : 0;
	}

	return this.Iterator.create(this.cells, this.x, this.y, width, height);
};

module.exports = CellRange;