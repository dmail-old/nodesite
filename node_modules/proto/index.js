/*

proto

provides: create, new, supplement, extend, extendFrom

see http://jsperf.com/objec-create-vs-new-function for perf.

Chome : new 28x faster than Object.create
Firefox: Object.create 5x faster than new

*/

var property = require('property');

if( !Object.create ){
	Object.create = function(object){
		if( typeof o != 'object') throw TypeError('Argument must be an object');
		var F = function(){};
		F.prototype = object;
		return new F();
	};
}

var exports = {
	supplement: function(){
		return property.forEachKeyIn(arguments, property.implementProperty, this.prototype);
	},

	getConstructor: function(proto, defaultConstructor){
		var constructor;

		if( Object.prototype.hasOwnProperty.call(proto, 'constructor') ){
			constructor = proto.constructor;
			if( typeof constructor != 'function' ){
				throw new TypeError('constructor must be a function');
			}
		}
		else{
			if( typeof defaultConstructor != 'function' ){
				throw new TypeError('constructor must be a function');
			}
			constructor = function(){
				return defaultConstructor.apply(this, arguments);
			};
			proto.constructor = constructor;
		}

		return constructor;
	},

	create: function(proto){
		proto = proto || {};
		var constructor = exports.getConstructor(proto, exports.constructor);

		constructor.prototype = proto;
		if( arguments.length > 1 ){
			exports.supplement.apply(constructor, Array.prototype.slice.call(arguments, 1));
		}

		return constructor;
	},
	
	extend: function(parentConstructor, proto){
		proto = proto || {};
		var constructor = exports.getConstructor(proto, parentConstructor);
		
		constructor.prototype = Object.create(parentConstructor.prototype);
		exports.supplement.call(constructor, proto);
		if( arguments.length > 2 ){
			exports.supplement.apply(constructor, Array.prototype.slice.call(arguments, 2));
		}

		return constructor;
	},

	new: function(){
		var instance = Object.create(this.prototype), constructor = instance.constructor;
		return constructor.apply(instance, arguments) || instance;
	}
};

module.exports = exports;

// backward compat (we will no longer extend prototype)
Function.prototype.new = exports.new;
Function.prototype.create = function(){ return exports.extend(this, arguments[0]); };
Function.prototype.supplement = exports.supplement;