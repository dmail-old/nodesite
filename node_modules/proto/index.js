/*

proto

provides: create, new, supplement, extend

see http://jsperf.com/objec-create-vs-new-function for perf.

Chome : new 28x faster than Object.create
Firefox: Object.create 5x faster than new

*/

var property = require('property');

if( !Object.create ){
	Object.create = (function(){
		function F(){}

		return function(object){
			if( typeof object != 'object') throw TypeError('Argument must be an object');
			
			F.prototype = object;
			var instance = new F();
			F.prototype = null;
			return instance;
		};
	})();
}

var exports = {
	constructor: function(){
		
	},

	supplement: function(){
		return property.forEachKeyIn(arguments, property.implementProperty, this.prototype);
	},

	getConstructor: function(proto, defaultConstructor){
		var constructor;

		if( Object.prototype.hasOwnProperty.call(proto, 'constructor') ){
			constructor = proto.constructor;
			if( typeof constructor != 'function' ){
				throw new TypeError('constructor must be a function');
			}
		}
		else{
			if( typeof defaultConstructor != 'function' ){
				throw new TypeError('defaultConstructor must be a function');
			}
			constructor = function(){
				return defaultConstructor.apply(this, arguments);
			};
			proto.constructor = constructor;
		}

		if( !('new' in proto) ) proto.new = exports.new;

		return constructor;
	},

	create: function(proto){
		proto = proto || {};
		var constructor = exports.getConstructor(proto, exports.constructor);

		constructor.prototype = proto;
		if( arguments.length > 1 ){
			exports.supplement.apply(constructor, Array.prototype.slice.call(arguments, 1));
		}

		return constructor;
	},
	
	extend: function(parentConstructor, proto){
		proto = proto || {};
		if( typeof parentConstructor == 'object' ) parentConstructor = parentConstructor.constructor;
		var constructor = exports.getConstructor(proto, parentConstructor);
		
		constructor.prototype = Object.create(parentConstructor.prototype);
		exports.supplement.call(constructor, proto);
		if( arguments.length > 2 ){
			exports.supplement.apply(constructor, Array.prototype.slice.call(arguments, 2));
		}

		return constructor;
	},

	define: function(proto){
		var object = typeof proto === 'function' ? proto.prototype : proto;
		property.forEachKeyIn(Array.prototype.slice.call(arguments, 1), property.defineProperty, object);
		return proto;
	},

	defineProperty: function(proto, name, descriptor){
		var object = typeof proto === 'function' ? proto.prototype : proto;
		Object.defineProperty(object, name, descriptor);
		return proto;
	},

	new: function(){
		var constructor = this, length = arguments.length, instance;

		if( typeof constructor == 'object' ) constructor = constructor.constructor;
		if( typeof constructor != 'function' ) throw new TypeError(constructor + ' is not a constructor');

		if( length === 0 ) return new constructor();
		if( length === 1 ) return new constructor(arguments[0]);
		if( length === 2 ) return new constructor(arguments[0], arguments[1]);

		instance = Object.create(constructor.prototype);
		return constructor.apply(instance, arguments) || instance;				
	}
};

module.exports = exports;

// backward compat (we will no longer extend prototype)
Function.prototype.new = exports.new;
Function.prototype.isPrototypeOf = function(object){
	return this.prototype.isPrototypeOf(object);
};
Function.prototype.supplement = exports.supplement;