/*

proto

provides: create, new, supplement, extend, extendFrom

see http://jsperf.com/objec-create-vs-new-function for perf.

Chome : new 28x faster than Object.create
Firefox: Object.create 5x faster than new

*/

var property = require('property');

if( !Object.create ){
	Object.create = function(object){
		if( typeof o != 'object') throw TypeError('Argument must be an object');
		var F = function(){};
		F.prototype = object;
		return new F();
	};
}

var proto = {
	// NOTE: maybe will become Object.assign (non enumerable property are not set)
	supplement: function(){
		return property.forEachOwnIn(arguments, property.appendMethod, this);
	},

	create: function(){
		var instance = Object.create(this);

		if( arguments.length > 0 ){
			proto.supplement.apply(instance, arguments);
		}

		return instance;
	},

	new: function(){
		var instance = Object.create(this), init = instance.init, ret;

		if( typeof init == 'function' ){
			ret = init.apply(instance, arguments);
			if( typeof ret == 'object' ) instance = ret;
		}

		return instance;
	},

	// equivalent to proto.create.call(bind, proto, ...)
	// create an old style new constructor() into a constructor.new()
	createFrom: function(bind){
		var instance = proto.create.call(bind);

		proto.supplement.call(instance, proto);
		if( arguments.length > 1 ){
			instance.supplement.apply(instance, Array.prototype.slice.call(arguments, 1));
		}

		return instance;
	},
	
	extend: function(parentConstructor, properties){
		var constructor;

		if( properties && 'constructor' in properties ){
			constructor = properties.constructor;
			if( typeof constructor != 'function' ){
				throw new TypeError('constructor must be a function');
			}
		}
		else{
			constructor = function(){
				return parentConstructor.apply(this, arguments);
			};
		}
		
		constructor.prototype = Object.create(parentConstructor.prototype);
		proto.supplement.call(constructor.prototype, properties);
		return constructor;
	}
};

module.exports = proto;

// backward compat (we will no longer extend Object.prototype)
if( !true ){
	property.implement(Object, proto);
}
