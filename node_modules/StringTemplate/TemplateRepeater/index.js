var proto = require('proto');

var TemplateRepeater = proto.create({
	template: null,
	separator: null,
	templates: null,
	propertyNames: ['templates'],

	init: function(template, separator){
		this.template = template;
		this.separator = separator;
		this.templates = [];
	},

	exec: function(array, fn, bind){
		var template = this.template, i = 0, j = array.length, clone, suffix;

		// because separator is used as suffix
		suffix = template.suffix;
		template.suffix = this.separator;
		for(;i<j;i++){
			if( i == j-1 ){
				template.suffix = suffix;
			}

			clone = template.clone();
			if( this.map ){
				clone = this.map.call(this.bind, clone, i, array);
			}
			else{
				clone.exec(array[i]);
			}
			this.templates.push(clone);
		}

		return this;
	},

	reduce: function(fn, buffer){
		var i = 0, j = this.templates.length;

		for(;i<j;i++){
			buffer = fn(buffer, this.templates[i], i, this.templates);
		}

		return buffer;
	},

	toJSON: function(){
		return this.templates;
	},

	toString: function(){
		return this.reduce(function(previous, current, index, array){
			return previous + current.toString();
		}, '');
	},

	toStylizedString: function(){
		return this.reduce(function(previous, current, index, array){
			return previous + current.toStylizedString();
		}, '');
	}
});

module.exports = TemplateRepeater;