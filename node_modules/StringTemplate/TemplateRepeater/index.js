var proto = require('proto');

var TemplateRepeater = proto.create({
	template: null,
	separator: null,
	templates: null,
	propertyNames: ['templates'],

	constructor: function(template, separator){
		this.template = template;
		this.separator = separator;
	},

	exec: function(iterable, fn, bind){
		var template = this.template, i, j, clone, suffix, templates, ret, keys, values, key, value;

		if( Array.isArray(iterable) ){
			i = 0;
			j = iterable.length;
		}
		else if( typeof iterable == 'object' ){
			keys = Object.keys(iterable);
			i = 0;
			j = keys.length;
		}
		else{
			throw new TypeError('repeat expect iterable object');
		}

		templates = this.templates = [];
		// because separator is used as suffix
		suffix = template.suffix;
		template.suffix = this.separator;

		for(;i<j;i++){
			if( i === j-1 ){
				template.suffix = suffix;
			}
			clone = template.clone();

			key = keys ? keys[i] : i;
			value = iterable[key];

			if( fn ){
				ret = fn.call(bind, value, key, clone, iterable);
				if( typeof ret === 'object' ) clone.exec(ret);
			}
			else{
				clone.exec(value);
			}

			templates.push(clone);
		}

		return this;
	},

	stylizeTemplate: function(tpl){
		return tpl.toStylizedString();
	},

	toJSON: function(){
		return this.templates || '{}';
	},

	toString: function(){
		return this.templates ? this.templates.join('') : '';
	},

	toStylizedString: function(){
		return this.templates ? this.templates.map(this.stylizeTemplate).join('') : '';
	}
});

module.exports = TemplateRepeater;