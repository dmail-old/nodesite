var proto = require('proto');

var TemplateRepeater = proto.create({
	Template: require('../StringTemplate'),
	template: null,
	separator: null,
	array: null,
	map: null,
	bind: null,

	init: function(template, separator){
		if( typeof template == 'string' ) template = this.Template.new(template);
		this.template = template;
		this.separator = separator;
	},

	exec: function(array, fn, bind){
		this.array = array;
		this.map = fn;
		this.bind = bind;
		return this;
	},

	reduce: function(fn, buffer){
		var array = this.array, i = 0, j = array.length, log;

		// because separator is used as suffix
		var suffix = this.template.suffix;
		this.template.suffix = null;

		for(;i<j;i++){
			log = this.template.clone();
			if( this.map ){
				log = this.map.call(this.bind, log, i, array);
			}
			else{
				log.exec(array[i]);
			}

			buffer = fn(buffer, log, i != j-1 ? this.separator : '', i, array);
		}

		this.template.suffix = suffix;

		return buffer;
	},

	toJSON: function(){
		return this.reduce(function(previous, current, separator, index, array){
			return previous + current.toJSON() + separator;
		}, '');
	},

	toString: function(){
		return this.reduce(function(previous, current, separator, index, array){
			return previous + current.toString() + separator;
		}, '');
	},

	toStylizedString: function(){
		return this.reduce(function(previous, current, separator, index, array){
			return previous + current.toStylizedString() + separator;
		}, '');
	}
});

module.exports = TemplateRepeater;