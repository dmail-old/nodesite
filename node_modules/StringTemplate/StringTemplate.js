/*

*/

require('Object.merge'); // Object.merge
var proto = require('proto');

var StringTemplate = proto.create({
	Compiler: require('./Compiler'),
	Resolver: require('./Resolver'),
	Renderer: require('./Renderer'),
	string: null,
	scope: null,
	map: null,
	bind: null,
	cachedValues: null,
	cachedCompilation: null,
	mergePropertyNames: ['string', 'compilationResult', 'values'],

	constructor: function(string){
		this.string = string;
	},

	populate: function(template){
		Object.merge(this, template, this.mergePropertyNames);
		return this;
	},

	clone: function(){
		var tpl = new this.constructor(this.string);// proto.new.call(this, this.string);
		tpl.populate(this);
		return tpl;
	},

	compile: function(string){
		return this.Compiler.compile(string);
	},

	get compilationResult(){
		if( this.cachedCompilation == null ){
			this.cachedCompilation = this.compile(this.string);
		}
		return this.cachedCompilation;
	},

	get strings(){
		return this.compilationResult.strings;
	},

	get expressions(){
		return this.compilationResult.expressions;
	},

	set strings(value){
		this.compilationResult.strings = value;
	},

	set expressions(value){
		this.compilationResult.expressions = value;
	},

	get values(){
		if( this.cachedValues === null ){
			this.cachedValues = this.Resolver.resolve(this.expressions, this.scope, this.map, this.bind);
		}
		return this.cachedValues;
	},

	set values(value){
		this.cachedValues = value;
	},

	toString: function(){
		return this.Renderer.renderAsString(this.strings, this.values);
	},

	toArray: function(){
		return this.Renderer.renderAsArray(this.strings, this.values);
	},

	tag: function(fn, bind){
		return fn.apply(bind, [this.strings].concat(this.values));
	},

	exec: function(scope, map, bind){
		if( scope != this.scope || map ){
			this.scope = scope;
			this.map = map;
			this.bind = bind;
			this.values = null;
		}
		return this;
	},

	render: function(scope, map, bind){
		return this.exec(scope, map, bind).toString();
	},

	format: function(string, scope){
		return new this.constructor(string).render(scope);
	},
	
	stringifyValue: function(value){	

		if( typeof value == 'object' ){
			try{
				JSON.stringify(value);
			}
			catch(e){
				value = '[Circular]';
			}
		}
		
		return value;
	},

	/* create a short version of the data

	to resume calling
	logger.log('info', 'name: {name}', {name: 'damien', age:10});
	must ignore the age property to shorten the data passed to the streams
	logger.log('info', 'name: {name}', {name: 'damien', age:10});
	*/
	subsetValues: function(values){
		var i = 0, j = values.length, subset = {};

		for(;i<j;i++){
			subset[this.expressions[i]] = this.stringifyValue(values[i]);
		}

		return subset;
	},

	toJSON: function(){
		return {
			string: this.string,
			scope: this.scope ? this.subsetValues(this.values) : null
		};
	}
});

/*
require('CustomProperty');

Object.defineCustomProperty(StringTemplate, 'values', {
	subproperties: ['expressions', 'scope', 'map', 'bind'],
	get: function(expressions, scope, map, bind){
		return this.Resolver.resolve(expressions, scope, map, bind);
	},
	cache: true
});

Object.defineCustomProperty(StringTemplate, 'compilationResult', {
	subproperties: ['string'],
	get: function(string){
		return this.compile(string);
	},
	cache: true
});
*/

/*
String.format = function(string){
	var tpl = StringTemplate.new(string);

	if( arguments.length > 1 ){
		var scope = Array.prototype.slice.call(arguments, tpl.expressions.length);
		tpl.exec(scope);
	}

	return tpl.toString();
};
*/

module.exports = StringTemplate;
