/*

*/

var proto = require('proto');

var StringTemplate = proto.create({
	Compiler: require('./Compiler'),
	Resolver: require('./Resolver'),
	Renderer: require('./Renderer'),
	string: null,
	scope: null,
	map: null,
	bind: null,
	cachedValues: null,
	cachedCompilation: null,
	merge: require('property/merge').mergeProperties,
	mergePropertyNames: ['string', 'compilationResult', 'values'],

	init: function(string){
		if( this.isPrototypeOf(string) ){
			this.populate(string);
		}
		else{
			this.string = string;
		}
	},

	populate: function(template){
		this.merge(this, template, this.mergePropertyNames);
		return template;
	},

	clone: function(){
		return proto.new.call(this, this);
	},

	compile: function(string){
		return this.Compiler.compile(string);
	},

	get compilationResult(){
		if( this.cachedCompilation == null ){
			this.cachedCompilation = this.compile(this.string);
		}
		return this.cachedCompilation;
	},

	get strings(){
		return this.compilationResult.strings;
	},

	get expressions(){
		return this.compilationResult.expressions;
	},

	set strings(value){
		this.compilationResult.strings = value;
	},

	set expressions(value){
		this.compilationResult.expressions = value;
	},

	get values(){
		if( this.cachedValues === null ){
			this.cachedValues = this.Resolver.resolve(this.expressions, this.scope, this.map, this.bind);
		}
		return this.cachedValues;
	},

	set values(value){
		this.cachedValues = value;
	},

	toString: function(){
		return this.Renderer.renderAsString(this.strings, this.values);
	},

	toArray: function(){
		return this.Renderer.renderAsArray(this.strings, this.values);
	},

	tag: function(fn, bind){
		return fn.apply(bind, [this.strings].concat(this.values));
	},

	exec: function(scope, map, bind){
		this.scope = scope;
		this.map = map;
		this.bind = bind;
		this.values = null;
		return this;
	},

	render: function(scope, map, bind){
		return this.exec(scope, map, bind).toString();
	}
});

/*
require('CustomProperty');

Object.defineCustomProperty(StringTemplate, 'values', {
	subproperties: ['expressions', 'scope', 'map', 'bind'],
	get: function(expressions, scope, map, bind){
		return this.Resolver.resolve(expressions, scope, map, bind);
	},
	cache: true
});

Object.defineCustomProperty(StringTemplate, 'compilationResult', {
	subproperties: ['string'],
	get: function(string){
		return this.compile(string);
	},
	cache: true
});
*/

/*
String.format = function(string){
	var tpl = StringTemplate.new(string);

	if( arguments.length > 1 ){
		var scope = Array.prototype.slice.call(arguments, tpl.expressions.length);
		tpl.exec(scope);
	}

	return tpl.toString();
};
*/

module.exports = StringTemplate;
