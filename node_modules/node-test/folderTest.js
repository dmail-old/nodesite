/*

comment manager moduleChangeReaction et fileChangeReaction?

*/

var proto = require('proto');
var debug = require('debug');
var moduleUtil = require('module-util');
var ModuleTest = require('./moduleTest');
var Task = require('task');
var ModuleCollector = require('module-util/collector');

var FolderTest = proto.extend({
	type: 'folder',
	reactions: {},

	constructor: function(path){
		this.path = path;
	},

	exec: function(){
		this.task = Task.pipe(this.tasks, this, this.path);
		return this.task;
	}
});

FolderTest.tasks = [
	// find modules
	function findModulePaths(path){
		console.log('calling find module', path);
		return ModuleCollector.create(path).createPromise();
	},
	// exclude test that sounds like modules byt are not
	function filterTestFiles(modulePaths){
		console.log('filtering modules', modulePaths.length);
		return modulePaths.filter(function(modulePath){
			return !ModuleTest.FileCollector.isTestFile(modulePath);
		}, this);
	},
	// create module object
	function createModules(modulePaths){
		return this.moduleTests = modulePaths.map(function(modulePath){
			return ModuleTest.create(modulePath);
		}, this);
	},
	// create module tests
	function loadModuleTests(moduleTests){
		console.log('loading moduleTests', moduleTests.length);

		return Task.map(moduleTests, function(moduleTest){
			return moduleTest.loadTests();
		}).then(function(){
			console.log('all tests loaded');
		});
	},
	// filter module without tests
	function filterModules(){
		console.log('filtering tests', this.moduleTests.length);

		return this.moduleTests = this.moduleTests.filter(function(moduleTest){
			return moduleTest.hasTest();
		});
	},
	// require the module
	function loadModules(){
		console.log('loading modules', this.moduleTests.length);

		return Task.map(this.moduleTests, function(moduleTest){
			return moduleTest.load();
		});
	},
	// sort module by dependency
	function sortModules(){
		return this.moduleTests = this.moduleTests.sort(function(a, b){
			return moduleUtil.getDependencyLevel(a.module) - moduleUtil.getDependencyLevel(b.module);
		});
	},
	// exec module tests
	function execTests(){
		return Task.map(this.moduleTests, function(moduleTest){
			return moduleTest.execTests();
		});
	}
];

module.exports = FolderTest;