var Table = require('template-table');
var Test = require('./test');
var ModuleTest = require('./moduleTest');
var FolderTest = require('./folderTest');
require('object/assign');

function stylizeTable(table){
	table.row(0).fix().setClass('header');

	table.column('state').conditionalFormat(function(state){
		return state == 'passed' ? 'green' : state === 'failed' ? 'red' : 'grey';
	});
	// avoid module taking too much space
	table.column(1).setStyle('maxWidth', 0.4);
	// third column always showing a count
	table.column(2).setStyle('textAlign', 'center');
	// fourth column always showing a duration
	table.column(3).setStyle('textAlign', 'center').format(function(value){
		return value + 'ms';
	});
}

Object.assign(FolderTest, {
	toCells: function(){
		return [
			['state', 'module', 'tests', 'duration'],
		].concat(
			this.moduleTests.map(function(moduleTest){
				return [
					moduleTest.state,
					moduleTest.path,
					moduleTest.tests.length,
					moduleTest.tests.reduce(function(previous, test){
						return previous + test.duration;
					}, 0)
				];
			})
		);
	},

	toTable: function(){
		var table = Table.create(this.toCells());
		stylizeTable(table);

		// we don't need the full path
		table.column('module').format(function(path){
			return path.slice(Math.max(path.lastIndexOf('node_modules') + 'node_modules'.length + 1, this.path.length));
		}.bind(this));

		return table;
	}
});

Object.assign(ModuleTest, {
	toCells: function(){
		return [
			['state', 'name', 'assertions', 'duration'],
		].concat(
			this.tests.map(function(test){
				return [
					test.state,
					test.description,
					test.assertions.length,
					test.duration
				];
			})
		);
	},

	toTable: function(){
		var table = Table.create(this.toCells());
		stylizeTable(table);
		return table;
	}
});

Object.assign(Test, {
	toCells: function(){
		return [
			['state', 'name', 'line', 'duration'],
		].concat(
			this.assertions.map(function(assertion){
				return [
					assertion.state,
					assertion.type,
					assertion.line,
					assertion.duration
				];
			})
		);
	},

	toTable: function(){
		var table = Table.create(this.toCells());
		stylizeTable(table);
		return table;
	}
});