var proto = require('@dmail/proto');
var debug = require('debug');
var FileObserver = require('file-observer');
var moduleUtil = require('module-util');
var FileCollector = require('./ModuleTestFileCollector');
var TestFile = require('./testFile');
var Test = require('./test');
require('promise/map');
require('promise/reduce');
require('promise/mapReduce');
require('array/prototype/some');

var Task = require('task');

var ModuleTest = proto.extend({
	type: 'module',
	Test: Test,
	TestFile: TestFile,
	FileObserver: FileObserver,
	FileCollector: FileCollector,
	util: moduleUtil,
	path: null,
	module: null,
	tests: [],

	constructor: function(path, changeReaction, fileChangeReaction){
		if( typeof path === 'object' ){
			this.module = {
				exports: path,
				dependencyLevel: 0,
				parent: null,
				children: []
			};
			this.loadModule = function(){
				return Promise.resolve(this.module);
			};
		}

		this.path = path;
		this.reset();

		if( changeReaction ){
			this.observe(function(){
				changeReaction(this);
			}, this);
		}
		if( fileChangeReaction ){
			this.fileChangeReaction = fileChangeReaction;
		}
	},

	reset: function(){
		this.state = 'created';
		this.tests = [];
		this.requireDuration = 0;
		this.loadDuration = 0;
		this.testDuration = 0;
		this.duration = 0;
	},

	hasTest: function(){
		return this.tests.length !== 0;
	},

	createTest: function(fn, description){
		var test = this.Test.create(fn, description);
		return test;
	},

	observe: function(fn, bind){
		// test.path lead to the module main file (index.js), dependencies are ignored
		// to be exaustive we should detect dependencies changes too
		this.FileObserver.observe(this.path, fn, bind);
	},

	fileChangeReaction: function(testFile){},

	createFile: function(filePath){
		var file = this.TestFile.create(filePath, this.fileChangeReaction);
		return file;
	},

	findFilePaths: function(){
		if( this.testFilePaths ) return Promise.resolve(this.testFilePaths);
		return this.FileCollector.collect(this.path);
	},

	createFiles: function(filePaths){
		return this.testFiles = filePaths.map(this.createFile, this);
	},

	loadFiles: function(){
		return Promise.mapReduce(this.testFiles, function(testFile){
			return testFile.load();
		});
	},

	createTests: function(){
		return Promise.mapReduce(this.testFiles, function(testFile){
			this.tests = this.tests.concat(testFile.createTests());
		}, this).then(function(){
			return this.tests;
		}.bind(this));
	},

	loadTests: function(){
		/*
		return Task.serie('loadTests', [
			function findFilePaths(modulePath){
				return FileCollector.collect(modulePath);
			},
			function createFiles(testFilePaths){
				return testFilePaths.map(function(testFilePath){
					return TestFile.create(testFilePath);
				}, this);
			},
			function loadFiles(testFiles){
				return Promise.mapReduce(testFiles, function(testFile){
					return testFile.load();
				}).then(function(){
					return testFiles;
				});
			},
			function createTests(testFiles){
				var tests = [];

				return Promise.mapReduce(testFiles, function(testFile){
					tests = tests.concat(testFile.createTests());
				}, this).then(function(){
					return tests;
				});
			}
		], this.path, this.reactions);
		*/

		return Promise.reduce([
			this.findFilePaths, // find the file paths
			this.createFiles, // create the files
			this.loadFiles, // load files content
			this.createTests // create test from file content
		], this);
	},

	loadModule: function(){
		return new Promise(function(resolve){
			this.module = this.util.requireModule(this.path);
			resolve(this.module);
		}.bind(this));
	},

	load: function(){
		var start = new Date();

		return this.loadModule().catch(function(error){
			this.state = 'loadError';
			return Promise.reject(error);
		}.bind(this)).then(function(module){
			this.state = 'loaded';
			this.requireDuration = new Date() - start;

			this.tests.forEach(function(test){
				test.imports = this.module.exports;
			}, this);

			return module;
		}.bind(this));
	},

	execTests: function(){
		var start = new Date();

		return Promise.mapReduce(this.tests, function(test){
			return test.exec();
		}, this).then(function(){
			this.state = 'passed';
			this.testDuration = new Date() - start;
			return this.tests;
		}.bind(this)).catch(function(value){
			debug('moduletest rejected', this.path, 'with', value);
			this.state = 'failed';
			return Promise.reject(value);
		}.bind(this));
	},

	exec: function(){
		var start = new Date();

		return Promise.reduce([
			this.loadTests, // get tests for this module
			this.load, // load the module (we could not load the module when he got no tests to run)
			this.execTests, // exec tests found
			function(){
				this.duration = new Date() - start;
				return this;
			}
		], this);
	}
});

module.exports = ModuleTest;