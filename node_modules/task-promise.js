//require('promise');
var isThenable = require('promise/is-thenable');
var proto = require('proto');

var Task = proto.extend({
	state: 'started',
	promise: Promise.resolve(null),
	exec: function(){},
	name: '',
	children: [],

	constructor: function(exec){
		this.state = 'started';
		this.exec = exec;
		this.name = exec.name;
		this.startDate = new Date();
		this.children = [];

		this.promise = new Promise(function(resolve, reject){
			this._resolve = resolve;
			this._reject = reject;
			this.exec(this.resolve.bind(this), this.reject.bind(this));
		}.bind(this));
	},

	toString: function(){
		return '[Object Task]';
	},

	then: function(onResolve, onReject){
		var child = new this.constructor(function nextTask(){

		});

		this.children.push(child);

		this.promise.then(
			function(value){
				if( onResolve ) value = onResolve(value);
				child.resolve(value);
			},
			function(value){
				if( onReject ) value = onReject(value);
				child.reject(value);
			}
		);

		return child;
	},

	catch: function(onReject){
		return this.then(null, onReject);
	},

	fromThenable: function(thenable){
		return new this.constructor(function thenableTask(resolve, reject){
			thenable.then(resolve, reject);
		});
	},

	resolve: function(value){
		if( this.state === 'started' ){
			if( isThenable(value) && !Task.isPrototypeOf(value) ){
				value = this.fromThenable(value);
			}

			if( Task.isPrototypeOf(value) ){
				var task = value;

				this.children.push(task);
				task.then(this.resolve.bind(this), this.reject.bind(this));
			}
			else{
				this.endDate = new Date();
				this.duration = this.endDate - this.startDate;
				this.state = 'resolved';
				this.value = value;
				this._resolve(value);
			}
		}
	},

	reject: function(value){
		if( this.state === 'started' ){
			this.state = 'rejected';
			this.value = value;
			this._reject(value);
		}
	},

	cancel: function(){
		this.state = 'cancelled';
		this.children.forEach(function(child){
			child.cancel();
		});
		return this;
	}
});

Task = Task.constructor;

var taskA = new Task(function taskA(resolve){
	var result = new Promise(function taskAchild(res){
		res('ok');
	});

	//result = Promise.resolve('ok');

	resolve(result);
});

taskA.then(function(value){
	console.log('taskA done', taskA);
});

/*
var taskB = taskA.then(function taskB(value){
	return value + 'bar';
});

taskB.then(function(){
	console.log('end taskB', taskA);
});
*/

module.exports = Task;