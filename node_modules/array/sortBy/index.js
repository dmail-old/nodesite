/**

Sort an array towards the properties of object he contains

orderBy('name');
orderBy('name');
orderBy('name', 'index', -1, function(a){ return a.name.toLowerCase(); }, 'getCount()');

*/

var proto = require('proto');

var Distinction = proto.extend({
	order: 1,

	constructor: function(valueGetter, order){
		this.get = valueGetter;
		if( order ) this.order = order;
	}
});

var Comparer = proto.extend({
	Distinction: Distinction,
	PropertyPath: require('PropertyPath'),

	constructor: function(args){
		this.distinctions = args ? this.createDistinctions(args) : [];
		this.compare = this.compare.bind(this);
	},

	createDistinctionGetter: function(path){
		var accessor = this.PropertyPath.create(path);
		return function(a){
			return accessor.setModel(a).value;
		};
	},

	createDistinctions: function(args){
		var i = 0, j = args.length, arg, distinctions = [];

		for(;i<j;i++){
			arg = args[i];
			if( typeof arg === 'function' ){
				distinctions.push(Distinction.create(arg));
			}
			else if( typeof arg === 'number' ){
				if( i !== 0 ){
					distinctions[distinctions.length-1].order = arg;
				}
			}
			else{
				distinctions.push(Distinction.create(this.createDistinctionGetter(arg)));
			}
		}

		return distinctions;
	},

	addDistinction: function(valueGetter, order){
		var distinction = Distinction.create(valueGetter, order);
		this.distinctions.push(distinction);
	},

	compare: function(a, b){
		var distinctions = this.distinctions, i = 0, j = distinctions.length, distinction, va, vb;

		for(;i<j;i++){
			distinction = distinctions[i];
			va = distinction.get(a);
			vb = distinction.get(b);

			if( va > vb ) return distinction.order;
			if( va < vb ) return -distinction.order;
		}

		return 0;
	}
});

module.exports = {
	Comparer: Comparer,

	sortBy: function(array){
		var comparer = Comparer.create(Array.prototype.slice.call(arguments, 1));
		return array.sort(comparer.compare);
	}
};