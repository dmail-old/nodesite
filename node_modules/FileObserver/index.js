/*


*/

var Notifier = require('Notifier');

var FileNotifier = Notifier.create({
	resolvePath: require('path').resolve,
	fileSystem: require('fs'),
	resolvedPaths: {},
	cache: {},
	path: null,
	watcher: null,
	lastChangeTime: null,
	changeInterval: 100,

	resolve: function(path){
		var resolvedPath;
		
		if( path in this.resolvedPaths ){
			resolvedPath = this.resolvedPaths[path];
		}
		else{
			resolvedPath = this.resolvePath(path);
			this.resolvedPaths[path] = resolvedPath;
		}

		return resolvedPath;
	},

	getNotifier: function(path){
		path = this.resolve(path);
		return path in this.cache ? this.cache[path] : null;
	},

	new: function(path){
		path = this.resolve(path);
		var notifier = this.getNotifier(path);
		if( notifier === null ){
			notifier = Notifier.new.call(this, path);
			this.cache[path] = notifier;
		}
		return notifier;
	},

	init: function(path){
		this.path = path;
		Notifier.init.call(this);
	},

	handleEvent: function(){
		var now = Number(new Date());

		if( now - this.lastChangeTime > this.changeInterval ){
			this.lastChangeTime = now;
			this.notify(this.path);
		}
	},

	open: function(){
		this.lastChangeTime = Number(new Date()) - this.changeInterval;
		this.watcher = this.fileSystem.watch(this.path, {persistent: false}, this.handleEvent.bind(this));
	},

	close: function(){
		this.watcher.close();
		this.watcher = null;
	},

	observe: function(path, listener, bind){
		return this.new(path).add(listener, bind);
	},

	unobserve: function(path, listener, bind){
		return this.new(path).remove(listener, bind);
	}
});

module.exports = FileNotifier;
