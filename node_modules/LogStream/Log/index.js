/*

*/

var ansi = require('ansi');
var StylizedTemplate = require('../StringTemplate/StylizedTemplate');

var Log = StylizedTemplate.create({
	stackTrace: require('stackTrace'),
	inspect: require('util').inspect,
	fileSystem: require('fs'),
	ansi: ansi,

	styleRules: Object.create(ansi.styleRules),
	//expressionStyles: Object.create(StylizedTemplate.expressionStyles),
	// own expressionStyles object
	expressionStyles: {},

	depth: 2,
	showHidden: false,
	useStyle: false,
	autoReturn: true,

	level: null,
	message: null,
	data: null,

	init: function(level, message, data, styles){
		this.level = level;
		this.message = message;
		this.data = data;

		StylizedTemplate.init.call(this, message);
		if( styles ) this.styles.set(styles);
		this.exec(data);
	},

	writeStyle: function(string, rules){
		return this.ansi.stylizeAll(string, rules);
	},

	// TODO: rewrite this function
	createDebugMessage: function(message){
		/*
		var call, wrap, lineFile, lineNumber, lineContent, levelPrefix;

		call = this.stackTrace.get()[1];
		lineFile = call.getFileName();
		lineNumber = call.getFileNumber();
		lineContent = this.stackTrace.readFileLine(lineFile, lineNumber);
		lineContent = lineContent.replace(/\n|\r/, '');
		message = message.replace(/\n|\r/g, function(match){ return match + '{debug}: '; });

		wrap = '\
			{debug}: \n\
			{debug}: {lineContent} ({lineFile: {lineNumber}})\n\
			{debug}: {message}\n\
			{debug}: \
		';

		return this._render(wrap, {
			debug: 'debug',
			message: message,
			lineContent: lineContent,
			lineFile: lineFile,
			lineNumber: lineNumber
		});
		*/
		return message;
	},

	toString: function(){
		var message = this.message, level = this.level, string;

		if( typeof message != 'string' ){
			message = this.inspect(message, {
				showHidden: this.showHidden,
				depth: this.depth,
				colors: false,
				customInspect: true
			});
		}

		string = this.stylize(level, level) + ':' + StylizedTemplate.toString.call(this);

		if( this.autoReturn ) string+= '\n';

		return string;
	},

	toStylizedString: function(){
		var message = this.message, level = this.level, string;

		if( typeof message != 'string' ){
			message = this.inspect(message, {
				showHidden: this.showHidden,
				depth: this.depth,
				colors: true,
				customInspect: true
			});
		}

		string = level + ':' + StylizedTemplate.toStylizedString.call(this);

		if( this.autoReturn ) string+= '\n';

		return string;
	},

	format: function(value){
		if( typeof value == 'string' ) return value;
		try{
			return JSON.stringify(value);
		}
		catch(e){
			return '[Circular]';
		}
	},

	/* create a short version of the data

	to resume calling
	logger.log('info', 'name: {name}', {name: 'damien', age:10});
	must ignore the age property to shorten the data passed to the streams
	logger.log('info', 'name: {name}', {name: 'damien', age:10});
	*/
	subsetValues: function(values){
		var i = 0, j = values.length, subset = {};

		for(;i<j;i++){
			subset[this.expressions[i]] = this.format(values[i]);
		}

		return subset;
	},

	subsetObjectOwnKeys: function(object){
		var keys = Object.keys(object), i = 0, j = keys.length, key, result;
		
		if( j ){
			result = {};
			for(;i<j;i++){
				key= keys[i];
				result[key] = object[key];
			}
		}

		return result;
	},

	toJSON: function(){
		return {
			level: this.level,
			message: this.message,
			data: this.data ? this.subsetValues(this.values) : null,
			expressionStyles: this.subsetObjectOwnKeys(this.expressionStyles),
			styleRules: this.subsetObjectOwnKeys(this.styleRules)
		};	
	}
});

module.exports = Log;
