var StylizedTemplate = require('../StringTemplate/StylizedTemplate');

var StylizedTemplateResult = StylizedTemplate.Result;
var LogResult = StylizedTemplateResult.create({
	ansi: require('ansi'),
	level: null,

	init: function(log){
		StylizedTemplateResult.init.call(this, log);
		this.level = log.level;
	},

	writeStyle: function(string, format){
		return this.ansi.writeFormat(string, format);
	},

	toString: function(){
		var output;
		
		output = this.level + ':';		
		output+= StylizedTemplateResult.toString.call(this);

		return output;
	},

	toStylizedString: function(){
		var output;

		output = this.stylizeValue(this.level, this.level) + ':';
		output+= StylizedTemplateResult.toStylizedString.call(this);

		return output;
	},

	stringifyValue: function(value){
		if( typeof value == 'string' ) return value;
		try{
			return JSON.stringify(value);
		}
		catch(e){
			return '[Circular]';
		}
	},

	/* create a short version of the data

	to resume calling
	logger.log('info', 'name: {name}', {name: 'damien', age:10});
	must ignore the age property to shorten the data passed to the streams
	logger.log('info', 'name: {name}', {name: 'damien', age:10});
	*/
	subsetValues: function(values){
		var i = 0, j = values.length, subset = {};

		for(;i<j;i++){
			subset[this.expressions[i]] = this.stringifyValue(values[i]);
		}

		return subset;
	},

	subsetObjectOwnKeys: function(object){
		var keys = Object.keys(object), i = 0, j = keys.length, key, result;
		
		if( j ){
			result = {};
			for(;i<j;i++){
				key= keys[i];
				result[key] = object[key];
			}
		}

		return result;
	},

	toJSON: function(){
		return {
			string: this.string,
			level: this.level,
			scope: this.scope ? this.subsetValues(this.values) : null,
			formats: this.subsetObjectOwnKeys(this.formats),
			styles: this.subsetObjectOwnKeys(this.styles)
		};	
	}
});

var Log = StylizedTemplate.create({
	stackTrace: require('stackTrace'),
	fileSystem: require('fs'),
	Result: LogResult,
	styles: {},
	formats: Object.create(LogResult.ansi.formats),
	
	level: null,
	suffix: '\n',

	init: function(string, level){
		StylizedTemplate.init.call(this, string);
		this.level = level || 'log';
	},

	toJSON: function(){
		return this.result.toJSON();
	}
});

Log.registerFormats({
	//'log': {},
	'info': 'green',
	'help': 'cyan',
	'warn': ['yellow', 'bold'],
	'debug': ['grey', 'bold'],
	'error': ['red', 'bold']
});

/*
logger.inspect({
	foo: 'bar',
	name: 1
},{
	name: 'grey',
	number: 'yellow'
});

va créer un inspectlog, voir comment on fait pis go
en gros c'est un log spécial qui n'a pas de level, bref à voir, ça me soule ce cas particulier de merde
*/

var proto = require('proto');
var InspectLog = proto.create({
	inspect: require('util').inspect,
	ansi: require('ansi'),
	depth: 2,
	showHidden: false,

	init: function(object, styles){
		this.object = object;
	},

	stringify: function(string, stylized){
		var self = this;

		return this.inspect(string, {
			showHidden: this.showHidden,
			depth: this.depth,
			stylize: function(value, type){
				return stylized ? value : self.ansi.writeFormat(value, type);
			},
			customInspect: true
		});		
	},

	toString: function(){
		return this.stringify(this.object);
	},

	toStylizedString: function(){
		return this.stringify(this.object, true);
	},

	toJSON: function(){
		return {
			object: this.object
		};
	}
});

InspectLog.ansi.register({
	'number': 'yellow',
	'string': 'green',
	'date': 'magenta',
	'regexp': 'red',
	'null': 'bold',
	'undefined': 'grey',
	'special': 'cyan',
	'name': 'inherit'
});

/* rewrite this function
	createDebugMessage: function(message){
		var call, wrap, lineFile, lineNumber, lineContent, levelPrefix;

		call = this.stackTrace.get()[1];
		lineFile = call.getFileName();
		lineNumber = call.getFileNumber();
		lineContent = this.stackTrace.readFileLine(lineFile, lineNumber);
		lineContent = lineContent.replace(/\n|\r/, '');
		message = message.replace(/\n|\r/g, function(match){ return match + '{debug}: '; });

		wrap = '\
			{debug}: \n\
			{debug}: {lineContent} ({lineFile: {lineNumber}})\n\
			{debug}: {message}\n\
			{debug}: \
		';

		return this._render(wrap, {
			debug: 'debug',
			message: message,
			lineContent: lineContent,
			lineFile: lineFile,
			lineNumber: lineNumber
		});
		return message;
	}
*/

module.exports = Log;
