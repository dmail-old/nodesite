/*

*/

var ansi = require('ansi');
var StylizedTemplate = require('../StringTemplate/StylizedTemplate');

var Log = StylizedTemplate.create({
	stackTrace: require('stackTrace'),
	inspect: require('util').inspect,
	fileSystem: require('fs'),
	ansi: ansi,

	styles: {},
	formats: Object.create(ansi.formats),

	depth: 2,
	showHidden: false,
	autoReturn: true,

	_message: null,
	_stylizedMessage: null,
	_messageResult: null,
	_stylizedMessageResult: null,
	level: null,

	init: function(string, level){
		StylizedTemplate.init.call(this, string);
		this.level = level || 'log';
		this.formats = Object.create(this.formats);
	},

	addFormat: function(format, styles){
		if( typeof styles == 'string' ) styles = [styles];
		this.formats[format] = styles;
	},

	writeStyle: function(string, format){
		return this.ansi.writeFormat(string, format);
	},

	stringifyMessage: function(string, stylized){
		if( typeof string != 'string' ){
			string = this.inspect(string, {
				showHidden: this.showHidden,
				depth: this.depth,
				colors: stylized ? true : false,
				customInspect: true
			});
		}
		return string;		
	},

	get message(){
		var value = this._message;
		if( value == null ){
			value = typeof this.string == 'string' ? this.string : this.stringifyMessage(this.string);
			this._message = value;
		}
		return value;
	},

	get stylizedMessage(){
		var value = this._stylizedMessage;
		if( value == null ){
			value = typeof this.string == 'string' ? this.string : this.stringifyMessage(this.string, true);
			this._stylizedMessage = value;
		}
		return this._stylizedMessage;
	},

	get messageResult(){
		var value = this._messageResult;
		if( value == null ){
			value = this.compile(this.message);
			this._messageResult = value;
		}
		return value;
	},

	get stylizedMessageResult(){
		var value = this._stylizedMessageResult;
		if( value == null ){
			value = this.compile(this.stylizedMessage);
			this._stylizedMessageResult = value;
		}
		return value;
	},

	toString: function(){
		var output;

		this.result = this.messageResult;
		output = this.level + ':' + StylizedTemplate.toString.call(this);

		if( this.autoReturn ) output+= '\n';

		return output;
	},

	toStylizedString: function(){
		var output;

		this.result = this.stylizedMessageResult;
		output = this.stylizeValue(this.level, this.level) + ':' + StylizedTemplate.toStylizedString.call(this);

		if( this.autoReturn ) output+= '\n';

		return output;
	},

	stringifyValue: function(value){
		if( typeof value == 'string' ) return value;
		try{
			return JSON.stringify(value);
		}
		catch(e){
			return '[Circular]';
		}
	},

	/* create a short version of the data

	to resume calling
	logger.log('info', 'name: {name}', {name: 'damien', age:10});
	must ignore the age property to shorten the data passed to the streams
	logger.log('info', 'name: {name}', {name: 'damien', age:10});
	*/
	subsetValues: function(values){
		var i = 0, j = values.length, subset = {};

		for(;i<j;i++){
			subset[this.expressions[i]] = this.stringifyValue(values[i]);
		}

		return subset;
	},

	subsetObjectOwnKeys: function(object){
		var keys = Object.keys(object), i = 0, j = keys.length, key, result;
		
		if( j ){
			result = {};
			for(;i<j;i++){
				key= keys[i];
				result[key] = object[key];
			}
		}

		return result;
	},

	toJSON: function(){
		return {
			string: this.string,
			level: this.level,
			data: this.data ? this.subsetValues(this.values) : null,
			formats: this.subsetObjectOwnKeys(this.formats),
			styles: this.subsetObjectOwnKeys(this.styles)
		};	
	}
});

Log.registerFormats({
	//'log': {},
	'info': 'green',
	'help': 'cyan',
	'warn': ['yellow', 'bold'],
	'debug': ['grey', 'bold'],
	'error': ['red', 'bold']
});

/* rewrite this function
	createDebugMessage: function(message){
		var call, wrap, lineFile, lineNumber, lineContent, levelPrefix;

		call = this.stackTrace.get()[1];
		lineFile = call.getFileName();
		lineNumber = call.getFileNumber();
		lineContent = this.stackTrace.readFileLine(lineFile, lineNumber);
		lineContent = lineContent.replace(/\n|\r/, '');
		message = message.replace(/\n|\r/g, function(match){ return match + '{debug}: '; });

		wrap = '\
			{debug}: \n\
			{debug}: {lineContent} ({lineFile: {lineNumber}})\n\
			{debug}: {message}\n\
			{debug}: \
		';

		return this._render(wrap, {
			debug: 'debug',
			message: message,
			lineContent: lineContent,
			lineFile: lineFile,
			lineNumber: lineNumber
		});
		return message;
	}
*/

module.exports = Log;
