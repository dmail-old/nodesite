var proto = require('proto');
var TransformStream = require('stream').Transform;
var StringDecoder = require('string_decoder').StringDecoder;

var StringParsedStream = proto.extend.call(TransformStream, {
	constructor: function(options){
		StringParsedStream.super.constructor.call(this, options);
		this._writableState.objectMode = false;
		this._readableState.objectMode = true;
		this._buffer = '';
		this._decoder = new StringDecoder('utf8');
	},

	parse: function(){
		throw new Error('unimplemented parse method');
	},

	_transform: function(chunk, encoding, cb){
		this._buffer+= this._decoder.write(chunk);
		// split on newlines
		var lines = this._buffer.split(/\r?\n/), obj;
		// keep the last partial line buffered
		this._buffer = lines.pop();
		for(var l = 0; l < lines.length; l++){
			var line = lines[l];
			try{
				obj = this.parse(line);
			}
			catch(e){
				this.emit('error', e);
				return;
			}
			// push the parsed object out to the readable consumer
			this.push(obj);
		}
		cb();
	},

	_flush: function(cb){
		// Just handle any leftover
		var rem = this._buffer.trim(), obj;
		if( rem ){
			try{
				obj = this.parse(rem);
			}
			catch(e){
				this.emit('error', e);
				return;
			}
			// push the parsed object out to the readable consumer
			this.push(obj);
		}
		cb();
	}
});

module.exports = StringParsedStream;