var TransformStream = require('stream').Transform;

var LogFormatter = TransformStream.prototype.extend({
	init: function(){
		this.constructor.apply(this, arguments);
		this._writableState.objectMode = true;
		this._readableState.objectMode = false;
	},

	stringify: function(){
		throw new Error('unimplemented stringify');
	},

	_transform: function(chunk, encoding, done){
		// suppos√© recevoir que des objets
		var string;

		try{
			string = this.stringify(chunk);
		}
		catch(e){
			console.log(e.stack);
			this.emit('error', new Error('invalid log object'));
			return;
		}

		this.push(string);
		done();
	}
});

var JSONStream = LogFormatter.extend({
	stringify: function(log){		
		return JSON.stringify(log);
	}
});

var LogStringifier = require('./LogStringifier');
var RawStream = LogFormatter.extend({
	stringify: function(log){
		var stringifier = LogStringifier.new(log, {
			colorize: false
		});

		return stringifier.toString();
	}	
});

var ColoredStream =  LogFormatter.extend({
	styles: {},

	stringify: function(log){
		var stringifier = LogStringifier.new(log, {
			colorize: true
		});

		stringifier.styles = this.styles;

		return stringifier.toString();
	}
});

module.exports = {
	formatter: LogFormatter,
	json: JSONStream,
	raw: RawStream,
	colored: ColoredStream
};