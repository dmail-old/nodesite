var StringFormattedStream = require('./StringFormattedStream');
var proto = require('proto');

var JSONStream = proto.extend.call(StringFormattedStream, {
	stringify: function(log){
		return JSON.stringify(log);
	}
});

var RawStream = proto.extend.call(StringFormattedStream, {
	stringify: function(log){
		return log.toString();
	}
});

var ColoredStream = proto.extend.call(StringFormattedStream, {
	stringify: function(log){
		return log.toStylizedString();
	}
});

var JSONParsedStream = require('./JSONParsedStream');
var Log = require('../Log');
var ConsoleTemplate = Log.super;

var LogStream = proto.extend.call(JSONParsedStream, {
	reviveLogFromData: function(data){
		// prefix, suffix, globalStyle etc can be null so don't check, 'level' is optionnal as well
		// Log without level (often because they are repeated)
		// Il devrait y avoir une classe intermédiaire entre StylizedTemplate et Log
		// dont on se servirais pour les log qui sont stylisé comme des logs
		// mais ne sont pas des logs puisque pas de level
		if( typeof data == 'object' && 'string' in data && 'scope' in data ){
			if( 'level' in data ){
				var log = Log.create();
				log.populate(data);
				return log;
			}
			else{
				var consoleTemplate = ConsoleTemplate.create();
				consoleTemplate.populate(data);
				return consoleTemplate;
			}
		}
		return data;
	},

	reviver: function(key, value){
		if( key === '' ){
			value = this.reviveLogFromData(value);
		}
		else if( Array.isArray(value) ){
			value = value.map(this.reviveLogFromData, this);
		}
		return value;
	}
});

module.exports = {
	json: JSONStream,
	raw: RawStream,
	colored: ColoredStream
};