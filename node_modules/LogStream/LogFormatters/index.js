var proto = require('proto');
var TransformStream = require('stream').Transform;

var LogFormatter = proto.createFrom(TransformStream.prototype, {
	init: function(){
		this.constructor.apply(this, arguments);
		this._writableState.objectMode = true;
		this._readableState.objectMode = false;
	},

	stringify: function(){
		throw new Error('unimplemented stringify');
	},

	_transform: function(chunk, encoding, done){
		// suppos√© recevoir que des objets
		var string;

		if( typeof chunk == 'string' ){
			string = chunk;
		}
		else if( Buffer.isBuffer(chunk) ){
			string = chunk.toString();
		}
		else if( typeof chunk == 'object' ){
			try{
				string = this.stringify(chunk);
			}
			catch(e){
				this.emit('error', e);
				return;
			}
		}

		this.push(string);
		done();
	}
});

var JSONStream = LogFormatter.create({
	stringify: function(log){
		return JSON.stringify(log);
	}
});

var RawStream = LogFormatter.create({
	stringify: function(log){
		return log.toString();
	}	
});

var ColoredStream = LogFormatter.create({
	stringify: function(log){
		return log.toStylizedString();
	}
});

module.exports = {
	formatter: LogFormatter,
	json: JSONStream,
	raw: RawStream,
	colored: ColoredStream
};