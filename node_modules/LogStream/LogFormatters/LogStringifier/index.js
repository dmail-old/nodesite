var proto = require('proto');
var LogStringifier = proto.create({
	stackTrace: require('stackTrace'),
	StringTemplate: require('StringTemplate'),
	ansi: require('ansi'),
	inspect: require('util').inspect,
	fileSystem: require('fs'),

	autoReturn: true,
	styles: {},
	depth: 2,
	showHidden: false,

	options: null,
	optionNames: ['colorize'],
	colorize: true,
	level: null,
	message: null,
	data: null,

	init: function(log, options){
		this.level = log.level;
		this.message = log.message;
		this.data = log.data;

		if( options ){
			this.options = options;
			this.optionNames.forEach(this.initOption, this);
		}

		if( typeof this.message != 'string' ){
			this.message = this.inspect(this.message, {
				showHidden: this.showHidden,
				depth: this.depth,
				colors: this.colorize,
				customInspect: true
			});
		}
	},

	initOption: function(name){
		if( name in this.options ) this[name] = this.options[name];
	},

	// TODO: rewrite this function
	createDebugMessage: function(message){
		/*
		var call, wrap, lineFile, lineNumber, lineContent, levelPrefix;

		call = this.stackTrace.get()[1];
		lineFile = call.getFileName();
		lineNumber = call.getFileNumber();
		lineContent = this.stackTrace.readFileLine(lineFile, lineNumber);
		lineContent = lineContent.replace(/\n|\r/, '');
		message = message.replace(/\n|\r/g, function(match){ return match + '{debug}: '; });

		wrap = '\
			{debug}: \n\
			{debug}: {lineContent} ({lineFile: {lineNumber}})\n\
			{debug}: {message}\n\
			{debug}: \
		';

		return this._render(wrap, {
			debug: 'debug',
			message: message,
			lineContent: lineContent,
			lineFile: lineFile,
			lineNumber: lineNumber
		});
		*/
		return message;
	},

	createLevelMessage: function(level, message){
		if( level === 'debug' ){
			return this.createDebugMessage(message);
		}

		if( this.colorize ){
			level = this.stylize(level, level);
		}

		return level + ': ' + message;
	},

	stylize: function(str, styleName){
		if( styleName in this.styles ){
			str = this.ansi.stylizeAll(str, this.styles[styleName]);
		}
		return str;
	},

	colorizeValue: function(value, i){
		return this.stylize(value, this.stringTemplate.expressions[i]);
	},

	toString: function(){
		var message = this.message, level = this.level, data = this.data;

		message = this.createLevelMessage(level, message);
		if( data !== null ){
			this.stringTemplate = this.StringTemplate.new(message);			
			this.stringTemplate.exec(data);
			if( this.colorize ) this.stringTemplate.values = this.stringTemplate.values.map(this.colorizeValue, this);
			message = this.stringTemplate.toString();
		}
		if( this.autoReturn ) message+= '\n';

		return message;
	},

	format: function(value){
		if( typeof value == 'string' ) return value;
		try{
			return JSON.stringify(value);
		}
		catch(e){
			return '[Circular]';
		}
	},

	toJSON: function(){
		var message = this.message;
		var level = this.level;
		var data = this.data;
		var jsonData;

		/* create a short version of the data

		to resume calling
		logger.log('info', 'name: {name}', {name: 'damien', age:10});
		must ignore the age property to shorten the data passed to the streams
		logger.log('info', 'name: {name}', {name: 'damien', age:10});
		*/

		if( data == null ){
			jsonData = null;
		}
		else{
			jsonData = {};
			this.stringTemplate.exec(data);
			this.stringTemplate.values.forEach(function(value, i){
				jsonData[this.stringTemplate.expressions[i]] = this.format(value);
			}, this);
		}

		return {
			message: message,
			level: level,
			data: jsonData
		};
	}
});

module.exports = LogStringifier;