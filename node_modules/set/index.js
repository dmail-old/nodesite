/*

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set

*/

var indexOf = require('array/exactIndexOf');
var forOf = require('for-of');
var SetIterator = require('./SetIterator');
var proto = require('@dmail/proto');

var Set = proto.extend({
	index: -1,

	constructor: function(iterable){
		this.list = [];

		if( iterable ){
			forOf(iterable, function(parts){
				this.set(parts[0], parts[1]);
			}, this);
		}
	},

	get size(){
		return this.list.length;
	},

	forEach: function(fn, bind){
		var i = 0, list = this.list, j = list.length;

		for(;i<j;i++){
			fn.call(bind, list[i], list[i], this);
		}
	},

	keys: function(){
		return new SetIterator(this, 'key');
	},

	values: function(){
		return new SetIterator(this, 'value');
	},

	entries: function(){
		return new SetIterator(this, 'key+value');
	},

	has: function(key){
		var index = indexOf(this.list, key);

		this.index = index;

		return index !== -1;
	},

	add: function(key){
		if( this.has(key) === false ){
			this.list.push(key);
		}
	},

	get: function(key){
		return this.has(key) ? this.list[this.index] : undefined;
	},

	delete: function(key){
		if( this.has(key) ){
			this.list.splice(this.index, 1);
			return true;
		}
		return false;
	},

	clear: function(){
		this.list.length = 0;
	},

	toString: function(){
		return '[object Set]';
	}
});

Set[Symbol.toStringTag] = function(){
	return 'Set';
};
Set[Symbol.iterator] = function(){
	return this.entries();
};

Set = Set.constructor;
module.exports = Set;
require('@dmail/object/polyfill')('global', 'Set', Set);