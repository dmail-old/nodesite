/*

pourrait s'appeler testRunner plutot non?

*/

var TestSerie = require('./TestSerie');

var AppTest = TestSerie.create({
	type: 'appTest',
	ModuleFinder: require('./ModuleFinder'),
	ModuleTestFinder: require('./ModuleTestFinder'),
	ModuleTest: require('./ModuleTest'),
	fileSystem: require('fs'),
	isWatching: false,
	listener: null,

	init: function(path){
		this.path = path;
		this.badSignaturePaths = [];
	},

	setupModule: function(){},
	teardownModule: function(){},

	handleEvent: function(e){
		TestSerie.handleEvent.call(this, e);

		if( this.listener && this.listener[e.type] ){
			this.listener[e.type].call(this, e);
		}
	},

	createModuleTest: function(path, testPaths){
		return this.ModuleTest.new(path, testPaths);
	},

	moduleTestComparer: function(moduleA, moduleB){
		return moduleA.level - moduleB.level;
		//return moduleA.getDependencyLevel() - moduleB.getDependencyLevel();
	},

	loadTests: function(){
		var moduleFinder = this.ModuleFinder, testFinder = this.ModuleTestFinder, badSignaturePaths = this.badSignaturePaths, modulePaths;

		modulePaths = moduleFinder.find(this.path, badSignaturePaths);
		if( badSignaturePaths && badSignaturePaths.length ){
			this.badSignaturePaths = badSignaturePaths.filter(testFinder.filterFolder, testFinder);
			if( this.badSignaturePaths.length ) this.emit('badSignature');
		}

		var i = 0, j = modulePaths.length, modulePath, testPaths, moduleTest, tests = [];

		for(;i<j;i++){
			modulePath = modulePaths[i];
			testPaths = testFinder.find(modulePath);
			if( testPaths && testPaths.length ){
				moduleTest = this.createModuleTest(modulePath, testPaths);
				tests.push(moduleTest);
			}
		}

		return tests.sort(this.moduleTestComparer);
	},

	// moduleTest are created by loadTests to be able to sort them by dependency
	createTest: function(moduleTest){
		return moduleTest;
	}
});

module.exports = AppTest;