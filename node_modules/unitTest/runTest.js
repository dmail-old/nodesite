/*

*/

process.on('uncaughtException', function(e){
	console.log('\n', e.stack, '\n');
	require('fs').appendFileSync('./error.log', e.stack + '\n');
});

setTimeout(function(){}, 1000 * 60 * 10);

var path = require('path');
var appPath = path.resolve(process.cwd(), process.argv[2]/*path.normalize(process.argv[2])*/);
var ModuleTestSerie = require('./ModuleTestSerie');
var appTest = ModuleTestSerie.new(appPath);

var LogStream = require('LogStream');
var Log = LogStream.Log;
require('StringTemplate/TemplateRepeater');
var LineLog = Log.new(LineLogTemplate).registerStyles(LineLogStyles);

var logger = LogStream.new();
var LineLogTemplate = '{lineNumber} : {lineSource}';
var LineLogStyles = {
	lineNumber: 'grey',
	currentLineNumber: 'white',
	currentLineSource: 'white',
	currentLine: 'bg-yellow'
};
var LineLogSeparator = '\n';

logger.Log.registerStyles({
	path: 'magenta'
});

function handleFailure(error){
	if( error.name == 'AssertionError' ){
		var lines = require('fs').readFileSync(error.file, 'utf8').split(/\n|\r\n\r/);
		var contextDepth = 7;
		var line = error.line;
		var minLine = Math.max(line - contextDepth, 0);
		var maxLine = Math.min(line + contextDepth, lines.length - 1);
		
		lines = lines.slice(minLine, maxLine);

		var source = LineLog.repeat(lines, LineLogSeparator, function(log, index){
			log.exec({
				lineNumber: index,
				lineSource: log.scope
			});

			if( index == error.line ){
				log.globalStyle = 'currentLine';
				log.registerStyle('lineNumber', 'currentLineNumber');
			}

			return log;
		});

		if( error.type == 'equal' ){
			error.message = error.args[0] + ' not equal to ' + error.args[1];
		}

		logger.error('{message} in {path}\n{source}', {
			message: error.message,
			path: error.file,
			source: source
		});
	}
	else{
		logger.error('{stack}', error.stack);	
	}
}

function handleResult(e){
	if( e ){
		handleFailure(e);
	}
	else{
		logger.info('All tests passed in {duration} ms', this);
	}
}

// lorsque les fichiers sont modifiés, les tests sont relancés
if( !true ){
	appTest.observe(function(test){
		if( test.type == 'file' ){
			logger.info('{path} test modified', test.path);
		}
		else{
			logger.info('{path} module modified', test.path);
		}

		test.reload();
		test.restart(handleResult, test);
	});
}

appTest.start(handleResult, appTest);