/*

*/

process.on('uncaughtException', function(e){
	console.log('\n', e.stack, '\n');
	require('fs').appendFileSync('./error.log', e.stack + '\n');
});

setTimeout(function(){}, 1000 * 60 * 10);

var LogStream = require('LogStream');
var logger = LogStream.new();
var AppTest = require('./AppTest');
var path = require('path');
var appPath = path.normalize(process.argv[2]);
appPath = path.resolve(process.cwd(), appPath);

var appTest = AppTest.new(appPath);

appTest.listener = {
	'appTest-start': function(e){
		// starting to tests all module found
		logger.info('Testing {count} module ...', this.tests.length);

		if( this.badSignaturePaths ){
			logger.warn('Folders have a module signature but are not modules : \n {badSignaturePaths} \n',
				this.badSignaturePaths.join('\n'));
		}
	},

	'testSerie-change': function(e){
		// a test file has been modified
		logger.info('{path} modified, tests will restart', e.target.path);
	},

	'moduleTest-change': function(e){
		// a module file has been modified
		logger.info('{path} modified, tests will restart', e.target.path);
	},

	'moduleTest-start': function(e){
		// selon l'option ceci est mis dans un stream ou un buffer
		// si on fail on affiche tout, sinon on affiche rien
		//console.log('-----------', e.target);
		//logger.info(e.target.name);
	},

	'test-pass': function(e){
		// dans un buffer aussi
		logger.info('    ✔ {name}', e.target.name);
	},

	'test-fail': function(e){
		var test = e.target, serie = test.testSerie, module = serie.moduleTest;
		
		/*
	en s'inspirant de https://github.com/medikoo/path2/blob/master/windows/common.js
	on peut savoir si la source de l'erreur est dans mes fichier ou externe
	il faut savoir que la plupart du temps des erreurs sont provoquées ailleurs que là 
	ou elles sont cré donc pas forcément une bonne idée d'affiche que le contexte
	cependant en conjonction avec la trace c'est au top
		*/

		var stackTrace = require('stackTrace');
		var error = test.lastError;

		var calls = stackTrace.parse(error);
		var call = calls[0];

		logger.styles.source = {background: 'grey', color: 'white', font: 'bold'};

		logger.error('{name} \n {message} \n in {fileName}:{lineNumber} \n {source}',
			test.name,
			error.toString(),
			call.getFileName(),
			call.getLineNumber(),
			stackTrace.readCallSource(call)
		);	

		if( serie.isWatching ){
			logger.info('waiting for test or module changes to restart the tests');
		}		
	},

	'appTest-end': function(e){
		if( this.failedCount === 0 ){
			var appTest = e.target;
			logger.info('All tests passed ({duration} ms)', appTest);
		}
	}
};

appTest.start();