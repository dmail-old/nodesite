/*

ModuleLoader.load(path) -> returns an array of module found at path

a file is considered a module when he is contained into a node_modules folder

*/

var ModuleCollector = {
	fileSystem: require('fs'),
	path: require('path'),
	moduleFolderName: 'node_modules',
	badSignature: null,

	hasModuleSignature: function(path){
		// one of his parent is node_modules but the fileName != 'node_modules'
		var directories = path.split(this.path.sep);
		var index = directories.indexOf(this.moduleFolderName);

		return index > -1 && index < directories.length - 1;
	},

	filterFile: function(fileName){
		return fileName == '.git' || fileName == '.gitignore' || fileName == '.gitattributes';
	},

	collect: function(path, ignoreFile){
		var fileNames, i, j, fileName, filePath, modulePaths, hasModuleSignature, modulePath;

		this.badSignature = [];

		modulePaths = [];
		modulePath = null;
		fileNames = this.fileSystem.readdirSync(path);
		i = 0;
		j = fileNames.length;
		for(;i<j;i++){
			fileName = fileNames[i];
			if( this.filterFile(fileName) ) continue;

			filePath = path + this.path.sep + fileName;			

			if( this.fileSystem.statSync(filePath).isDirectory() ){
				hasModuleSignature = this.hasModuleSignature(filePath);

				if( hasModuleSignature ){
					try{
						// locate module path for this folder
						modulePath = require.resolve(filePath);
					}
					catch(e){						
						this.badSignature.push(filePath);
					}

					if( modulePath ) modulePaths.push(modulePath);
				}

				modulePaths = modulePaths.concat(this.collect(filePath, modulePath != null));
				modulePath = null;
			}
			/*
			else if( !ignoreFile && this.hasModuleSignature(filePath) ){
				modulePaths.push(filePath);
			}
			*/
		}

		return modulePaths;
	}
};

module.exports = ModuleCollector;