function delayedPromise(ms, value){
	return new Promise(function(res){
		setTimeout(res.bind(null, value), 100);
	});
}

exports['basic task dependency'] = function(test, Task){
	return test.equal(Task.complete(10).then(function(a){
		return a + 20;
	}), 30);
};

exports['complete to a task'] = function(test, Task){
	test.equal(Task.complete(Task.complete('foo')), 'foo');
};

exports['complete to a thenable'] = function(test, Task){
	test.equal(Task.complete(Promise.resolve('foo')), 'foo');
};

exports['recover failed task'] = function(test, Task){
	return test.equal(Task.fail('foo').catch(function(error){
		return error;
	}), 'foo');
};

exports['fail by consumer'] = function(test, Task){
	var task = Task.complete('foo');
	var subtask = task.then(function(){
		throw 'bar';
	});

	return test.equal(task.catch(function(error){
		return error;
	}), 'bar');
};

exports['cancel prevent completion'] = function(test, Task){
	return test.equal(Promise.race([
		new Task().cancel().complete('foo'),
		delayedPromise(10, 'bar')
	]), 'bar');
};

exports['pause prevent completion & resume restore state'] = function(test, Task){
	var task = new Task('pause');

	task.pause();
	task.complete('foo');

	setTimeout(function(){
		task.resume();
	}, 100);

	return test.resolveIn(task.then(function(){ return new Date(); }), 100);
};

exports['consumer cancellation'] = function(test, Task){
	var task = Task.complete('foo');
	var subTask = task.then();
	subTask.cancel();

	return test.equal(Promise.race([
		task,
		delayedPromise(10, 'bar')
	]), 'bar');
};

exports['cancel propagate cancellation to consumer'] = function(test, Task){
	var task = Task.complete(10);
	var subTask = task.then();

	task.cancel();
	subTask.complete('foo');

	return test.equal(Promise.race([
		subTask,
		delayedPromise(10, 'bar')
	]), 'bar');
};

exports['pause propagate pausing to consumer & resume restore state'] = function(test, Task){
	var task = Task.complete(10);
	var subTask = task.then();

	task.pause();
	setTimeout(function(){
		task.resume();
	}, 100);

	return test.resolveIn(subTask.then(function(){ return new Date(); }), 100);
};

exports['delay'] = function(test, Task){
	return test.resolveIn(Task.complete(10).delay(100).then(function(){ return new Date(); }), 100);
};

exports['delay return value'] = function(test, Task){
	return test.equal(Task.complete(10).delay(100), 10);
};

exports['delay cancellation'] = function(test, Task){
	return test.equal(Promise.race([
		Task.complete('foo').delay(10).cancel(),
		delayedPromise(100, 'bar')
	]), 'bar');
};

exports['timeout'] = function(test, Task){
	return test.equal(Task.complete(10).delay(100).timeout(10).catch(function(error){
		return error.code;
	}), 'TASK_TIMEOUT');
};

exports['all'] = function(test, Task){
	var task = Task.all([new Task(), 1, 2]);

	task.tasks[0].complete(0);

	return test.equal(task.then(String), '0,1,2');
};

exports['all cancellation'] = function(test, Task){
	return test.equal(Promise.race([
		Task.all([1, 2, 3]).cancel(),
		delayedPromise(100, 'bar')
	]), 'bar');
};

exports['all pausing / resuming'] = function(test, Task){
	var task = Task.all([new Task(), 1, 2]);

	task.pause();
	setTimeout(function(){
		task.resume();
	}, 100);
	task.tasks[0].complete('ok');

	return test.resolveIn(task.then(function(){ return new Date(); }), 100, 40);
};

exports['all fail by consumer'] = function(test, Task){
	var all = Task.all([new Task(), 2, 3]);
	var tasks = all.tasks;

	tasks[0].fail('foo');

	return test.equal(all.catch(function(value){ return value; }), 'foo');
};

exports['all cancel by consumer'] = function(test, Task){
	var all = Task.all([new Task(), 2, 3]);
	var tasks = all.tasks;

	tasks[0].cancel();
	all.complete('foo');

	return test.equal(Promise.race([
		all,
		delayedPromise(10, 'bar')
	]), 'bar');
};