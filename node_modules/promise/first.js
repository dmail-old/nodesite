require('promise');
require('symbol');
require('iterator/ArrayIterator');

// return a promise fullfilled on first fullfilled promise or rejected on last rejected promise
function first(iterable, bind, initialValue){
	var initialPromise = Promise.resolve(initialValue);

	return new Promise(function(resolve, reject){
		var iterator = iterable[Symbol.iterator](), next, fn, reason;

		function rej(value){
			reason = value;
			next = iterator.next();

			if( next.done ){
				reject(reason);
			}
			else{
				fn = next.value;
				if( typeof bind !== 'undefined' ) fn = fn.bind(bind);

				initialPromise.then(fn).then(
					resolve,
					rej
				);
			}
		}

		rej();

	});
}

module.exports = first;
Promise.first = first;