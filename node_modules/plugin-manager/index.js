var proto = require('proto');

var PluginManager = proto.extend({
	plugins: [],
	index: -1,
	effects: {},

	constructor: function(plugins){
		this.plugins = [];

		if( plugins ){
			var i = 0, j = plugins.length;
			for(;i<j;i++){
				this.add(plugins[i]);
			}
		}
	},

	add: function(plugin){
		if( Object(plugin) != plugin ){
			throw new TypeError('plugin must be an object');
		}

		if( !this.has(plugin) ){
			this.plugins.push(plugin);
		}
	},

	has: function(plugin){
		this.index = this.plugins.indexOf(plugin);
		return this.index !== -1;
	},

	remove: function(plugin){
		if( this.has(plugin) ){
			this.plugins.splice(this.index, 1);
		}
	},

	createObject: function(object){
		var constructors = this.plugins.filter(function(plugin){
			return plugin.hasOwnProperty('constructor');
		}).map(function(plugin){
			return plugin.constructor;
		});

		var extendedObject = proto.extend.call(object, {
			constructor: function(){
				var args = arguments;
				constructors.forEach(function(constructor){
					constructor.apply(this, args);
				});
				return object.constructor.apply(this, arguments);
			}
		});

		return extendedObject;
	},

	extendObject: function(object){
		this.plugins.forEach(function(plugin){
			for(var key in this.effects){
				if( plugin.hasOwnProperty(key) ){
					this.effects[key].call(this, object, plugin[key]);
				}
			}
		}, this);

		return object;
	}
});

module.exports = PluginManager;