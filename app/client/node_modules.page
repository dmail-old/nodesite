/*

if .js not specified it looks for pathname + '/index.js' then pathname + '.js'
it will try to locate those files in app/client/node_modules then app/node_modules

*/

var ModuleDemand = {
	Path: require('path'),
	fileSystem: require('fs'),
	// ceci doit être synchroniser avec un fichier
	// chaque fichier déclaré est vérifié lorsque le fichier est lu si un fichier est supprimé on met à jour le fichier
	dependencies: [],

	demand: null,
	name: null,

	dirname: 'node_modules',
	prefix: 'var mod = new Module("{filename}");\n\n(function(exports, require, module, __filename, __dirname){\n\n',
	suffix: '\n\n}).call(mod.exports, mod.exports, mod.require.bind(mod), mod, mod.filename, mod.dirname);\n',

	create: function(request, response){
		this.request = request;
		this.response = response;
		this.name = request.url.pathname.slice(('/' + this.dirname + '/').length);
	},

	sendFile: function(path){
		var pathname = path.replace(/\\/g, '/');
		var search = '/'+ this.dirname +'/';
		var filepath = pathname.slice(pathname.indexOf(search) + search.length);
		var prefix = this.prefix.replace('{filename}', filepath);
		var suffix = this.suffix.replace('{filename}', filepath);

		this.response.bodyWriter.wrap(prefix, suffix);
		this.response.sendFile();
	},

	// TODO put the result in cache
	resolve: function(filename, callback, bind){
		bind = bind || this;
		var fileSystem = this.fileSystem;
		var Path = this.Path;
		var self = this;
		var sharedNodeModulesDirectory = global.APP_PATH;
		var clientNodeModulesDirectory = global.CLIENT_PATH;
		var extension = Path.extname(filename);
		var checkDirectory = extension === '';
		var checkNodeModules = startsWith(filename, '/', './', '../', sharedNodeModulesDirectory) === false;
		if( !checkDirectory ) filename = Path.dirname(filename) + Path.sep + Path.basename(filename, extension);

		var clientModule = clientNodeModulesDirectory + Path.sep + this.dirname + Path.sep + filename;
		var sharedModule = sharedNodeModulesDirectory + Path.sep + this.dirname + Path.sep + filename;		
		
		function searchFile(filePath, fn){
			fileSystem.stat(filePath, function(error){
				if( error ){
					fn();
				}
				else{
					fn(filePath);
				}
			});
		}

		function startsWith(str){
			var i = 1, j = arguments.length;
			for(;i<j;i++){
				if( str.startsWith(arguments[i]) ) return true;
			}
			return false;
		}

		function searchModule(modulePath, fail){
			searchFile(modulePath + '.js', function(validPath){
				if( validPath ){
					return callback.call(bind, validPath);
				}

				if( checkDirectory ){
					return searchFile(modulePath + Path.sep + 'index.js', function(validPath){
						if( validPath ){
							return callback.call(bind, validPath);
						}
						else{
							fail();
						}				
					});
				}

				fail();
			});
		}

		searchModule(clientModule, function(){
			if( checkNodeModules ){
				searchModule(sharedModule, function(){
					callback.call(bind);
				});
			}
			else{
				callback.call(bind);
			}			
		});
	},

	addDependency: function(child, parent){
		var index = this.dependencies.indexOf(child);

		if( index == -1 ){
			this.dependencies.push(parent, child);
		}
		else{
			this.dependencies.splice(index-1, 0, parent);
		}
	},

	removeDependency: function(child){
		this.dependencies.remove(child);
	},

	send: function(){
		this.resolve(this.name, function(modulePath){
			if( modulePath ){
				this.addDependency(this.response.getHeader('x-required-by'), this.name);
				this.sendFile(modulePath);
			}
			else{
				this.removeDepency(this.name);
				this.response.send(404);
			}
		});
	}	
};

module.exports = function(){
	ModuleDemand.new(this.request, this.response).send();
};