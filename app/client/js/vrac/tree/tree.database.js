/*idéalement cet arbre doit aussi pouvoir servir à lister la table d'une BDDdans ce cas il serait intéréssant de récupérer les schémas de la BDD genre:id:{	// dans prevent	type: 'number',	// DONE	unique: true,	// RAF	index: true,	// default suppose que insert et clone mette la propriété si elle n'existe pas	default: function(){		this.UID = this.getFree('id', this.UID || 1);		return this.UID;	},	// dans... wrapper	trim: true,	singleSpace: true,	// dans prevent	pattern: /^[\w ]+$/}les champs 'tool', 'disabled', 'noinsert', 'nodisable' ont une signification particulière il sont liée à l'apparence et aux fonctionnalité du noeudsi un champ prend un des noms utilisés par tree.properties ont doit avoir à l'esprit ce que ca implique*/Tree.definePlugin('database', {	require: 'ajax',		tree: {		sendServer: function(action, args, callback){			server.applyAction('database/' + action, args, callback);		}	},		init: function(){		['update', 'remove', 'insert', 'move', 'copy', 'list'].forEach(function(name){ this.define(name, 'online', Function.TRUE); }, this);		this.define('move', 'serverAction', function(into, index){ return ['move', this.getPath(), into.getPath() + '/' + this.name, index]; });		this.define('copy', 'serverAction', function(into, index, copy){ return ['copy', this.getPath(), into.getPath() + '/' + copy.name, index]; });	}});