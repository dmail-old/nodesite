/*

Ce que fait youtube est plutot cool il envoit une requête AJAX
et recoit css, html, title, js ensuite il a pu qu'à mettre le CSS et le HTML ou il faut le script aussi

*/

module.exports = {
	title: 'coucou',

	GET: function(page){
		var metas = {
			'charset': config.charset,
			'content-type': 'text/html',
			'content-language': config.lang,
			'description': lang.metas.description,
			'keywords': lang.metas.keywords,
			'robots': config.robot || 'all'
			// viewport: 'width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=1;' // pour les portables
		};

		// si on est en local ceci évite la mise en cache qui est pénible
		if( config.local ){
			metas['cache-control'] = metas['pragma'] = 'no-cache';
			// metas['cache'] = 'no store';
			metas['expires'] = 0;
		}

		var jsFiles = config.js;

		if( config.debug_modules ){
			var testFiles = require('fs.extra').readdirSyncRecursive(global.CLIENT_PATH + '/tests');
			testFiles = testFiles.map(function(fileName){ return fileName.slice(global.CLIENT_PATH.length); });
			testFiles.unshift('node_modules/tester.js');
			jsFiles = jsFiles.concat(testFiles);
		}

		// les fichiers js proviendront à la fois des dossier test/
		// mais seront aussi automatiquement injecté, voir dans node_modules.dependencies

		var modules = []; // ça c'est à faire

		var cssFiles = config.css.map(function(name){
			return 'css/' + name + '.css';
		});

		jsFiles = jsFiles.map(function(name){
			if( !name.endsWith('.js') ) return name + '.js';
			return name;
		});

		var template = page.createTemplate();
		var origin = require('url').format({
			protocol: config.protocol,
			host: config.host + (config.port ? ':' + config.port : ''),
			pathname: page.request.url.pathname
		});

		page.send({
			'origin': origin,
			'metas': template.renderMetaTags(metas),
			'title': lang.metas.title,
			'favicon': 'favicon.png',
			'styles': template.renderTags('style', cssFiles),
			'scripts': template.renderTags('script', jsFiles),
			// module requested are cached, we can use that cache to preload module on page init
			// we got the requested module and their resolvedPaths
			'moduleTree': null,// this.requestHandler.router.middlewares.module.RequireContext.cache,
			'lang': lang,
			'config': {
				'protocol': config.protocol,
				'host': config.host,
				'port': config.port
			}
		});		
	}
};