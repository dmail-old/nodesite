/*

IMPOSSIBLE DE POLYFILL WEAKMAP:

même en redéfinissant valueOf en fait si l'objet qu'on met dans la weakmap
est utilisé dans d'autre weakmap, alors valueOf est redéfinit et devient de plus en plus long
à se résoudre
de plus les clés ne peuvent être garbabe collected

-> on laisse tomber, on implémente Map() et on clean bien ce qu'il y a dedans


https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap

also map with iterator and so on

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map

if (key !== Object(key)){
	throw TypeError("value is not a non-null object");
}

https://gist.github.com/Raynos/1638059
http://jsperf.com/to-weakmap-or-not-to-weakmap/5

*/

function guard(key){
	/**
	Utility function to guard WeakMap methods from keys that are not
	a non-null objects.
	**/

	if( key !== Object(key) ) throw TypeError("value is not a non-null object");
	return key;
}

var WeakMap = function(){
	this.namespace = {};
};

var proto = {
	constructor: WeakMap,

	createStore: function(object){
		var namespace = this.namespace;
		var store = {
			identity: object
		};
		var oldValueOf = object.valueOf;

		function valueOf(value){
			// return the store only if value passed is the namespace and on the right object
			if( value === namespace && this === object ){
				return store;
			}
			return oldValueOf.apply(this, arguments);
		}

		Object.defineProperty(object, 'valueOf', {
			value: valueOf,
			configurable: true
		});

		return store;
	},

	getStore: function(object){
		var store = object.valueOf(this.namespace);

		if( store === object || store.identity !== this.namespace ){
			store = null;
		}

		return store;
	},

	has: function(key){
		var store = this.getStore(key);

		return store && 'value' in store;
	},

	get: function(key, fallback){
		var store = this.getStore(key);

		return store && store.hasOwnProperty('value') ? store.value : fallback;
	},

	set: function(key, value){
		var store = this.getStore(key) || this.createStore(key);

		store(key).value = value;
	},

	'delete': function(key){
		var store = this.getStore(key);

		return store ? delete store.value : false;
	},

	clear: function(){
		// is it possible?
	}
};

WeakMap.prototype = proto;

module.exports = WeakMap;

if( typeof window != 'undefined' ){
	if( true || !window.WeakMap ) window.WeakMap = WeakMap;
}