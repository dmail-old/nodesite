var PathObserver = require('objectObserver/pathObserver');
var ComputedBinding = {
	observers: null,
	values: null,
	value: undefined,
	size: 0,
	combinator: null,
	bind: null,
	closed: false,

	create: function(combinator, bind){
		this.observers = {};
		this.values = {};
		this.combinator = combinator;
		this.bind = bind || this;
	},

	resolve: function() {
		if( this.closed === false ){
			if ( !this.combinator ){
				throw Error('ComputedBinding attempt to resolve without combinator');
			}
			this.value = this.combinator.call(this.bind, this.values);
		}
	},

	onchange: function(change, token){
		this.values[token] = change.value;
		this.resolve();
	},
 
	observe: function(name, model, path, supressResolve){
		this.unobserve(name, supressResolve);
		this.size++;
		
		if( supressResolve ){
			if( this.closed === false ) this.closed = true;
			else supressResolve = false;
		}		
		this.observers[name] = PathObserver.new(path, model, this.onchange, this, name);
		if( supressResolve ){
			this.closed = false;
		}
	},

	unobserve: function(name, suppressResolve) {
		if( this.observers[name] ){
			this.size--;
			this.observers[name].close();
			delete this.observers[name];
			delete this.values[name];
			if( !suppressResolve ){
				this.resolve();
			}
		}
	},

	unobserveAll: function(supressResolve){
		for(var key in this.observers){
			this.unobserve(key, true);
		}
		if( !supressResolve ){
			this.resolve();
		}
	},

	close: function(){
		if( this.closed === false ){
			this.unobserveAll(true);			
			this.closed = true;
			this.value = undefined;
		}
	}
};

module.exports = ComputedBinding;