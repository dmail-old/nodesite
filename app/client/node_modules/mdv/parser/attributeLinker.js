var DirectLinker = require('./directLinker');
var TokenLinker = require('./tokenLinker');
var TokenListLinker = require('./tokenListLinker');
var AttributeLinker = {
	// https://github.com/Polymer/mdv/blob/master/src/template_element.js#L871
	parseMustacheTokens: function(string){
		if( !string || !string.length ) return;

		var open = '{', close = '}', tokens, length = string.length;
		var startIndex = 0, lastIndex = 0, endIndex = 0;

		while( lastIndex < length ){
			startIndex = string.indexOf(open, lastIndex);
			endIndex = startIndex < 0 ? -1 : string.indexOf(close, startIndex + close.length);
			if( endIndex < 0 ){
				if ( !tokens ) return;
				tokens.push(string.slice(lastIndex)); // TEXT
				break;
			}

			tokens = tokens || [];
			tokens.push(string.slice(lastIndex, startIndex)); // TEXT
			tokens.push(string.slice(startIndex + open.length, endIndex).trim()); // PATH
			lastIndex = endIndex + close.length;
		}

		if( lastIndex === length ){
			tokens.push(''); // TEXT
		}

		return tokens;
	},

	new: function(attributeName, attributeValue){
		var tokens = this.parseMustacheTokens(attributeValue);

		if( !tokens ) return false;

		// {name} -> tokens contains only one mustache, no prefix/suffix
		if( tokens.length == 3 && tokens[0].length === 0 && tokens[2].length === 0 ){
			return DirectLinker.new(attributeName, tokens[1]);
		}
		// Hello: {name}! -> tokens contains one mustache and/or a prefix/suffix
		else if( tokens.length === 3 ){
			return TokenLinker.new(attributeName, tokens[1], tokens[0], tokens[2]);
		}
		// Hello {name}, you are {age} years old! -> list of tokens
		else{
			return TokenListLinker.new(attributeName, tokens);
		}
	}
};

module.exports = AttributeLinker;