/*

name: TokenListLinker
description: link a node attribute to a model multiple values (with prefix and suffix)
example: <span>Hello {name}, you are {age} years old!</span>

*/
var Linker = require('./linker');
var ComputedBinding = require('../binding/computedBinding');
var TokenListLinker = Linker.extend({
	name: 'TokenListLinker',
	nodeAttribute: null,
	tokens: null,

	create: function(nodeAttribute, tokens){
		this.nodeAttribute = nodeAttribute;
		this.tokens = tokens;
	},

	combine: function(values){
		var tokens = this.tokens, result = tokens[0], i = 1, j = tokens.length, value;

		for(;i<j;i+=2){
			value = values[i];
			if( value !== undefined ){
				result+= value;
			}
			result+= tokens[i + 1];
		}

		return result;
	},

	link: function(node, model){
		var computedBinding = ComputedBinding.new(this.combine, this);
		var tokens = this.tokens, i = 1, j = this.tokens.length;

		for(;i<j;i+=2){
			// observe part, and pass true to avoid resolve call for each observer call
			computedBinding.observe(i, model, tokens[i], true);
		}
		// call resolve now
		computedBinding.resolve();

		node.bind(this.nodeAttribute, computedBinding, 'value');
	},

	unlink: function(node, model){
		node.unbind(this.nodeAttribute);
	},

	namedScope: function(path, replace){
		var i = 1, j = this.tokens.length;
		for(;i<j;i+=2){
			this.tokens[i] = this.getNamedScopePath(this.tokens[i], path, replace);
		}
	}
});

module.exports = TokenListLinker;