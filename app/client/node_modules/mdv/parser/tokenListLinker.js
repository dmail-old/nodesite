/*

name: TokenListLinker
description: link a node attribute to a model multiple values (with prefix and suffix)
example: <span>Hello {name}, you are {age} years old!</span>

*/
var Linker = require('./linker');
var ComputedBinding = require('../binding/computedBinding');

var TokenListLinker = Linker.extend({
	name: 'TokenListLinker',
	nodeAttribute: null,
	stringTemplate: null,

	init: function(nodeAttribute, stringTemplate){
		this.nodeAttribute = nodeAttribute;
		this.stringTemplate = stringTemplate;
	},

	link: function(node, model){
		var tokens = this.stringTemplate.tokens, i = 1, j = tokens.length;
		var computedBinding = ComputedBinding.new(this.stringTemplate.render, this.stringTemplate);

		for(;i<j;i+=2){
			// observe part, and pass true to avoid resolve call for each observer call
			computedBinding.observe(i, model, tokens[i], true);
		}
		// call resolve now
		computedBinding.resolve();

		node.bind(this.nodeAttribute, computedBinding, 'value');
	},

	unlink: function(node, model){
		node.unbind(this.nodeAttribute);
	},

	namedScope: function(path, replace){
		var i = 1, tokens = this.stringTemplate.tokens, j = tokens.length;
		for(;i<j;i+=2){
			tokens[i] = this.getNamedScopePath(tokens[i], path, replace);
		}
	}
});

module.exports = TokenListLinker;