var Linker = require('./linker');

var TemplateCompiler = {
	parsers: [],

	collect: function(node, path){
		var found = [], parsers = this.parsers, i = 0, j = parsers.length;
		var nodeType = node.nodeType, linker, terminal = false;

		if( typeof path != 'string' ) path = '';

		for(;i<j;i++){
			linker = parsers[i].call(this, node);
			if( Linker.isLinker(linker) ){
				linker.path = path;
				found.push(linker);
				if( linker.terminal ) terminal = true;
			}
		}

		// keep searching linkers
		if( terminal === false && (nodeType == 1 || nodeType == 11) ){
			found = found.concat(this.collectChildNodes(node, path));
		}

		return found;
	},

	collectNodeList: function(nodeList, path){
		var found = [], i = 0, j = nodeList.length;

		if( typeof path != 'string' ){
			path = '';
		}
		else if( path !== '' ){
			path+= '.';
		}

		for(;i<j;i++){
			found = found.concat(this.collect(nodeList[i], path + i));
		}

		return found;
	},

	collectChildNodes: function(node, path){
		return this.collectNodeList(node.childNodes, path);
	},

	parse: function(element, descendantOnly){
		var found;

		if( descendantOnly ){
			found = this.collectChildNodes(element);
		}
		else{
			found = this.collect(element);
		}

		return found;
	},

	register: function(directive){
		this.parsers.push(directive);
	}
};

var Directives = {};

var DirectLinker = require('./DirectLinker');
var TokenLinker = require('./TokenLinker');
var TokenListLinker = require('./TokenListLinker');
var Parser = require('MustacheTemplate').Parser;

Directives.parseAttribute = function(attrName, attrValue){
	var parser = Parser.new(attrValue);
	var tokens = parser.parse();
	var length = tokens.length;

	// no mustache at all
	if( length < 3 ){
		return false;
	}
	
	// "Hello {{name}}, you are {{age}} years old": more than one mustache
	if( length > 3 ){
		return TokenListLinker.new(attrName, tokens);
	}

	// "{name}": contains one mustache with no prefix and no suffix
	if( tokens[0].length === 0 && tokens[2].length === 0 ){
		return DirectLinker.new(attrName, tokens[1]);
	}

	// "Hello: {name}": contains one mustache with a prefix and a suffix
	return TokenLinker.new(attrName, tokens[1], tokens[0], tokens[2]);
};
Directives.parseTextContent = function(node){
	if( node.nodeType != 3 ) return false;

	return Directives.parseAttribute('textContent', node.textContent);
};
TemplateCompiler.register(Directives.parseTextContent);

var LinkerListLinker = require('./linkerListLinker');
Directives.parseAttributes = function(node){
	if( node.nodeType != 1 ) return false;

	var attributes = node.attributes, i = 0, j = attributes.length, attr, linker, linkerlist = [];

	for(;i<j;i++){
		attr = attributes[i];
		linker = Directives.parseAttribute(attr.name, attr.value);
		if( linker ){
			linkerlist.push(linker);
		}
	}

	if( linkerlist.length === 0 ) return false;
	if( linkerlist.length === 1 ) return linkerlist[0];
	return LinkerListLinker.new(linkerlist);
};
TemplateCompiler.register(Directives.parseAttributes);

var SubTemplateLinker = require('./subTemplateLinker');
var mdv = require('mdv');
Directives.parseSubTemplate = function(node){
	if( mdv.isTemplate(node) ){
		return SubTemplateLinker.new(node);
	}
};
TemplateCompiler.register(Directives.parseSubTemplate);


module.exports = TemplateCompiler;