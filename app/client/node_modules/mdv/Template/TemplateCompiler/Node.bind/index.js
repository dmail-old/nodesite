var BindProperties = {
	bind: function(name, model, path){
		console.error('Unhandled binding to Node: ', this, name, model, path);
	},

	unbind: function(name){
		this.bindings = this.bindings || {};
		var binding = this.bindings[name];
		if( binding && typeof binding.close === 'function' ) binding.close();
		delete this.bindings[name];
	},

	unbindAll: function(){
		if( !this.bindings ) return;

		var names = Object.keys(this.bindings), i = 0, j = names.length, binding;
		for(;i<j;i++) {
			binding = this.bindings[names[i]];
			if( binding ) binding.close();
		}

		this.bindings = {};
	}
};

require('@dmail/object/implement');

if( typeof window != 'undefined' ){
	Object.implement(window.Node, BindProperties);

	var NodeBinding = require('./NodeBinding');
	window.Text.prototype.bind = function(name, model, path){
		if( name !== 'textContent' ){
			return Node.prototype.bind.call(this, name, model, path);
		}
		this.unbind(name);
		return this.bindings[name] = new NodeBinding(this, 'textContent', model, path);
	};

	var AttributeBinding = require('./AttributeBinding');
	Element.prototype.bind = function(name, model, path) {
		this.unbind(name);
		return this.bindings[name] = new AttributeBinding(this, name, model, path);
	};
}

module.exports = BindProperties;