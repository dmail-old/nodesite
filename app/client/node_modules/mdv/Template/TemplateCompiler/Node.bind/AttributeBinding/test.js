var element = {
	nodeType: 1,

	new: function(){
		var element = Object.create(this);
		element.attributes = {};
		return element;
	},

	hasAttribute: function(name){
		return name in this.attributes;
	},

	setAttribute: function(name, value){
		this.attributes[name] = value;
	},

	getAttribute: function(name, value){
		return this.attributes[name];
	},

	removeAttribute: function(name){
		delete this.attributes[name];
	}
};

exports['bind Element attribute to a model property'] = function(test){
	var node = element.new();
	var model = {
		foo: 'bar'
	};

	test.imports.new(node, 'name', model, 'foo');
	test.equal(node.getAttribute('name'), 'bar');
	test.done();
};

exports['support conditional attribute'] = function(test){
	var node = element.new();
	var model = {
		foo: 'bar'
	};
	test.imports.new(node, 'disabled?', model, 'foo');

	test.equal(node.hasAttribute('disabled'), true);
	model.foo = null;
	test.equal(node.hasAttribute('disabled'), false);
	test.done();
};