/*

name: TokenListLinker
description: link a node attribute to a model multiple values (with prefix and suffix)
example: <span>Hello {name}, you are {age} years old!</span>

*/
require('Node.bind');
var Linker = require('./linker');

var TokenListLinker = Linker.create({
	ComputedObserver: require('ComputedObserver'),
	name: 'TokenListLinker',
	nodeAttribute: null,
	tokens: null,

	init: function(nodeAttribute, tokens){
		this.nodeAttribute = nodeAttribute;
		this.tokens = tokens;
	},

	replacer: function(token, values, i){
		return i in values ? values[i] : this.StringTemplate.empty(token);
	},

	replace: function(values){
		return this.StringTemplate.replace(this.tokens, values, this.replacer, this);
	},

	replaceOne: function(values, observer){
		return this.StringTemplate.replaceOne(this.tokens, observer.id, observer.lastChange.value);
	},

	link: function(node, model){
		var tokens = this.tokens, i = 1, j = tokens.length, observer;

		observer = this.ComputedObserver.new();
		for(;i<j;i+=2){
			// observe part, and pass true to avoid resolve call for each observer call
			observer.observe(i, model, tokens[i], true);
		}
		observer.value = this.replaceAll(observer.values);
		observer.combinator = this.replaceOne;
		observer.combinatorBind = this;

		node.bind(this.nodeAttribute, observer, 'value');
	},

	unlink: function(node, model){
		node.unbind(this.nodeAttribute);
	},

	namedScope: function(path, replace){
		var i = 1, tokens = this.tokens, j = tokens.length;
		for(;i<j;i+=2){
			tokens[i] = this.getNamedScopePath(tokens[i], path, replace);
		}
	}
});

module.exports = TokenListLinker;
