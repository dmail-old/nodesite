/*

https://github.com/Polymer/ObserveJS/tree/master

name: template

description: mainly inspired from polymer:

https://github.com/Polymer/Template-instantiation/blob/master/src/template-instantiation.js

TODO:

- support for named scope: repeat 'comment in user.comments' and bind 'foo as bar'
http://www.polymer-project.org/platform/mdv/expression_syntax.html#named-scopes
- support events binding
je sais pas ce qui est le mieux entre
on-click à la polymer
addEvent('span>div', 'click') à la x-tag de mozilla
- support custom element instantiation
donc faut checker tout les tagName de tous les éléments
et instantier des objets javascript correspondant

MORE:

- support having method on model that can depend on property
in case it's a method it listen for method affectation
and also for property named in the arguments of the method then we could write

model.fullName = function(firstName, lastName){ return firstName + ' ' + lastName; };
<template>{fullName()}</template>
- support checked and value attribute on input
https://github.com/Polymer/NodeBind/blob/master/src/NodeBind.js#L170

FIX:

les templates ne marche pas avec la notation {} sans rien entre crochet

*/

var Template = {
	TemplateIterator: require('./TemplateIterator'),
	TemplateCompiler: require('./TemplateParser'),
	element: null,
	content: null,
	templateIterator: null,
	templateCompiled: null,
	linkers: null,
	toString: function(){ return 'Template'; },

	init: function(element){
		this.element = element;
		element.template = this;
		this.content = element.getReference().content;
	},

	cloneContent: function(){
		return this.content.cloneNode(true);
	},
	
	setModel: function(model){
		this.unsetModel();
		this.model = model;
		this.templateIterator = this.TemplateIterator.new(this);
		this.templateIterator.checkAttributes();
	},

	unsetModel: function(){
		if( this.model != null ){
			if( this.templateIterator ){
				this.templateIterator.close();
				this.templateIterator = null;
			}
			this.model = null;
		}
	},

	parse: function(){
		return this.TemplateCompiler.parse(this.content, true);
	},

	getLinkers: function(){
		if( this.linkers === null ){
			this.linkers = this.parse();
		}
		return this.linkers;
	}
};

module.exports = Template;