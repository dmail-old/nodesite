var MDV = {
	Template: require('./Template'),
	TemplateIterator: require('./TemplateIterator'),
	nativeAttribute: 'native',
	templateAttribute: 'template',
	contentDescriptor: {
		get: function(){
			var fragment = this.ownerDocument.createDocumentFragment();
			while( this.firstChild ){
				fragment.appendChild(this.firstChild);
			}
			return fragment;
		}
	},

	isNativeTemplateElement: function(node){
		return this.supported && node.tagName == 'TEMPLATE';
	},

	mixin: function(to, from){
		Object.getOwnPropertyNames(from).forEach(function(name) {
			Object.defineProperty(to, name, Object.getOwnPropertyDescriptor(from, name));
		});
	},

	isDecorated: function(node){
		return node.constructor == this;
	},

	decorate: function(node){
		if( !this.isNativeTemplateElement(node) || !this.isDecorated(node) ){
			this.mixin(node, this.prototype);
			// redefine 'content' to get the custom content descriptor, not the native one
			if( this.supported ){
				Object.defineProperty(node, 'content', this.contentDescriptor);
			}
		}
	},

	isTemplate: function(node){
		if( node.nodeType != 1 ) return false;
		if( node.hasAttribute(this.nativeAttribute) ) return false;
		return node.tagName == 'TEMPLATE' || node.hasAttribute(this.templateAttribute);
	},

	checkNode: function(node, found){
		if( this.isTemplate(node) ){
			found.push(node);
		}
		else{
			return this.checkChildNodes(node, found);
		}
	},

	checkNodeList: function(nodeList, found){
		var i = 0, j = nodeList.length;
		for(;i<j;i++){
			this.checkNode(nodeList[i], found);
		}
		return found;
	},

	checkChildNodes: function(node, found){
		return this.checkNodeList(node.childNodes, found);
	},

	collect: function(element){
		return this.checkChildNodes(element, []);
	},

	createTemplate: function(node){
		this.decorate(node);
		return this.Template.new(node);
	},

	createAll: function(list){
		var i = 0, j = list.length, node;
		for(;i<j;i++){
			this.createTemplate(list[i]);
		}
	},

	bootstrap: function(element){
		this.createAll(this.collect(element));
	},

	render: function(element, model){		
		if( !element.template ){
			// why we throw an error and we don't do create a template?
			// because template must be handled before being rendered (their content must be removed from the dom)
			// if this isn't the case we throw an error because it can be a problem
			if( this.isTemplate(element) ){
				throw new Error('element has no template. It happens when you use mdv.render() before mdv.boostrap()');
			}
			else{
				throw new TypeError('this element cannot be used as template');
			}
		}

		var iterator = this.TemplateIterator.new(element.template);

		iterator.setModel(model);

		return iterator;
	}
};

var topLevelScope = typeof window === 'undefined' ? global : window;

if( typeof topLevelScope.HTMLTemplateElement === 'undefined' ){
	if( typeof topLevelScope.HTMLUnknownElement === 'undefined' ){
		if( typeof topLevelScope.HTMLElement === 'undefined' ){
			topLevelScope.HTMLElement = function(){};
		}
		topLevelScope.HTMLUnknownElement = topLevelScope.HTMLElement;
	}

	MDV.supported = false;
	MDV.templateElementPrototype = Object.create(topLevelScope.HTMLUnknownElement.prototype);
	Object.defineProperty(MDV.templateElementPrototype, 'content', MDV.contentDescriptor);

}
else{
	MDV.supported = true;
	MDV.templateElementPrototype = topLevelScope.HTMLTemplateElement.templateElementPrototype;
}

MDV.templateElementPrototype.getReference = function(){
	var node = this, ref = this, id = this.getAttribute('ref'), nextRef;

	if( id ){
		node = document.getElementById(id);
		if( node ){
			ref = node;
		}
	}

	if( ref != this ){
		nextRef = ref.getReference();
		if( nextRef ) ref = nextRef;
	}

	return ref;
};

module.exports = MDV;