var proto = require('proto');
require('object/assign');

var RequestCache = proto.extend({
	condition: null,
	entries: null,

	constructor: function(options){
		this.entries = [];
		Object.assign(this, options);
	},

	createCachedRequest: function(request){
		return {
			url: request.url,
			body: request.body
		};
	},

	createCachedResponse: function(response){
		return {
			status: response.status,
			headers: response.headers,
			body: response.body
		};
	},

	is: function(request, cachedRequest){
		if( cachedRequest.url === request.url ) return true;
		if( cachedRequest.body == request.body ) return true;
		return false;
	},

	get: function(request){
		var i = 0, j = this.entries.length, entry;
		for(;i<j;i++){
			entry = this.entries[i];
			if( this.is(request, entry.cachedRequest) ){
				return entry;
			}
		}
		return null;
	},

	createEntry: function(request, response){
		return {
			request: this.createCachedRequest(request),
			response: this.createCachedResponse(response)
		};
	},

	set: function(request, response){
		if( !this.condition || this.condition(request, response) ){
			this.entries.push(this.createEntry(request, response));
		}
	}
});

module.exports = RequestCache;