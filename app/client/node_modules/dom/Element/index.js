function Element(tag, props){
	var element;

	if( tag in Element.constructors ){
		element = Element.constructors[tag](props);
	}
	else{
		element = document.createElement(tag, props);
	}

	return element;
}

var property = require('property');

property.append(Element, {
	// keep a reference to original Element with Element.Element
	Element: window.Element,
	prototype: window.Element.prototype,
	implement: property.implement.bind(property, Element),
	complement: property.complement.bind(property, Element),
	constructors: {}
});

Element.implement({
	adopt: function(){
		var parent = this, fragment, i = 0, j = arguments.length, element;

		if( j > 1 ){
			parent = fragment = document.createDocumentFragment();
		}
		for(;i<j;i++){
			element = arguments[i];
			if( element ) parent.appendChild(element);
		}
		if( fragment ){
			this.appendChild(fragment);
		}

		return this;
	},

	appendText: function(text){
		return this.appendChild(this.getDocument().newTextNode(text));
	},

	replaces: function(el){
		el.parentNode.replaceChild(this, el);
		return this;
	},

	wraps: function(el){
		return this.replaces(el).appendChild(el);
	},

	dispose: function(){
		return this.parentNode ? this.parentNode.removeChild(this) : this;
	},

	empty: function(){
		Array.prototype.call.call(this.childNodes, 'dispose');
		return this;
	},

	clean: function(){
		if( this.removeListeners ) this.removeListeners();
		if( this.clearAttributes ) this.clearAttributes();
		return this;
	},

	destroy: function(){
		this.clean().getElements('*').call('clean');
		this.dispose();
		return null;
	}
});

module.exports = Element;

// make Element global
window.Element = Element;