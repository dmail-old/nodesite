var proto = require('proto');
var property = require('property');
var topLevelScope = typeof window == 'undefined' ? global : window;

topLevelScope.Element = topLevelScope.Element || function(){};

var Element = proto.extend(topLevelScope.Element, {
	Element: topLevelScope.Element,
	constructors: {},
	constructor: function(tag, props){
		var element;

		if( tag in this.constructors ){
			element = this.constructors[tag](props);
		}
		else{
			element = document.createElement(tag, props);
		}

		return element;
	}
});

Object.assign(Element, {
	implement: property.implement.bind(property, Element),
	complement: property.complement.bind(property, Element)
});

Element.implement({
	adopt: function(){
		var parent = this, fragment, i = 0, j = arguments.length, element;

		if( j > 1 ){
			parent = fragment = document.createDocumentFragment();
		}
		for(;i<j;i++){
			element = arguments[i];
			if( element ) parent.appendChild(element);
		}
		if( fragment ){
			this.appendChild(fragment);
		}

		return this;
	},

	appendText: function(text){
		return this.appendChild(this.getDocument().newTextNode(text));
	},

	replaces: function(el){
		el.parentNode.replaceChild(this, el);
		return this;
	},

	wraps: function(el){
		return this.replaces(el).appendChild(el);
	},

	dispose: function(){
		return this.parentNode ? this.parentNode.removeChild(this) : this;
	},

	empty: function(){
		Array.prototype.call.call(this.childNodes, 'dispose');
		return this;
	},

	clean: function(){
		if( this.removeListeners ) this.removeListeners();
		if( this.clearAttributes ) this.clearAttributes();
		return this;
	},

	destroy: function(){
		this.clean().getElements('*').call('clean');
		this.dispose();
		return null;
	}
});

if( false === 'classList' in Element.prototype ){	
	var ClassList = require('./ClassList');

	Object.defineProperty(Element.prototype, 'classList', {
		get: function(){
			return ClassList.new(this);
		}
	});
}

Element.implement({
	hasClass: function(name){
		return this.classList.contains(name);
	},

	addClass: function(name){
		this.classList.add(name);
		return this;
	},

	removeClass: function(name){
		this.classList.remove(name);
		return this;
	},

	toggleClass: function(name, force){
		if( force === undefined ) force = !this.hasClass(name);
		return force ? this.addClass(name) : this.removeClass(name);
	}
});

module.exports = Element;

// make Element global
topLevelScope.Element = Element;	