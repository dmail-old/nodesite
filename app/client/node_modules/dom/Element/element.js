function Element(tag, props){
	return tag in Element.constructors ? Element.constructors[tag](props) : document.newElement(tag, props);
}

Element.constructors = {};
Element.prototype = window.Element.prototype;

require('Object.util');
Element.implement = Object.implement.bind(Element);
Element.complement = Object.complement.bind(Element);

Element.implement({
	adopt: function(){
		var parent = this, fragment, i = 0, j = arguments.length, element;

		if( j > 1 ){
			parent = fragment = document.createDocumentFragment();
		}
		for(;i<j;i++){
			element = arguments[i];
			if( element ) parent.appendChild(element);
		}
		if( fragment ){
			this.appendChild(fragment);
		}

		return this;
	},

	appendText: function(text){
		return this.appendChild(this.getDocument().newTextNode(text));
	},

	replaces: function(el){
		el.parentNode.replaceChild(this, el);
		return this;
	},

	wraps: function(el){
		return this.replaces(el).appendChild(el);
	},

	dispose: function(){
		return this.parentNode ? this.parentNode.removeChild(this) : this;
	},

	empty: function(){
		Array.prototype.call.call(this.childNodes, 'dispose');
		return this;
	},

	clean: function(){
		if( this.removeListeners ) this.removeListeners();
		if( this.clearAttributes ) this.clearAttributes();
		return this;
	},

	destroy: function(){
		this.clean().getElements('*').call('clean');
		this.dispose();
		return null;
	}
});

module.exports = Element;

// keep a reference to original Element with Element.Element
Element.Element = window.Element;
// make Element global
window.Element = Element;