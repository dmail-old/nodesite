var Stream = require('stream');

module.exports = {
	isStream: function(a){
		return a instanceof Stream.Readable || a instanceof Stream.Writable || a instanceof Stream.Duplex;
	},

	isReadableStream: function(a){
		return a instanceof Stream.Readable;
	},

	getStreamLength: function(stream, fn, bind){
		var length = 0;

		stream.on('data', function(chunk, encoding){
			length+= Buffer.isBuffer(chunk) ? chunk.length : Buffer.byteLength(chunk, encoding);
		});
		stream.on('end', function(){
			fn.call(bind, length);
		});
	},

	toBuffer: function(stream, fn, bind){
		var buffers = [], length = 0;

		stream.on('data', function(buffer){
			buffers.push(buffer);
			length+= buffer.length;
		});
		stream.on('end', function(){
			fn.call(bind, null, Buffer.concat(buffers, length));
		});
		stream.on('error', function(error){
			fn.call(bind, error);
		});
	}
};