/*

helper to manipulate the serverResponse

inspired from
https://github.com/mcavage/node-restify/blob/master/lib/response.js

node response source :
https://github.com/joyent/node/blob/master/lib/_http_server.js

*/

require('object/assign');
var debug = require('debug');
var stream = require('stream');
var proto = require('proto');
var debug = require('debug');
var PassThrough = stream.PassThrough;
var Cookie = require('cookie');
require('promise/fromStream');

var Response = proto.create({
	status: 200,
	statusMessage: '',
	headers: {},
	trailers: {},
	stream: null,
	sendDate: true,
	_hasBody: false,

	constructor: function(properties){
		this.bind = this;

		this.stream = new PassThrough();

		if( typeof properties === 'number' ){
			properties = {
				status: properties
			};
		}
		else if( typeof properties === 'string' ){
			properties = {
				body: properties
			};
			if( !this.hasHeader('content-type') ){
				properties.headers = {'content-type': 'text/plain'};
			}
		}

		if( properties ){
			if( 'status' in properties ){
				this.status = properties.status;
			}
			if( 'headers' in properties && properties.headers != null ){
				this.headers = properties.headers;
			}
			if( 'cookie' in properties ){
				this.cookies = properties.cookie;
			}
			if( 'body' in properties ){
				this.stream.write(properties.body);
				this.stream.end();
				this._hasBody = true;
			}
			else if( 'stream' in properties ){
				properties.stream.pipe(this.stream);
				this._hasBody = true;
			}
		}

		if( this.cookies ){
			var cookies = [], cookie;
			for(var name in this.cookies ){
				cookie = Cookie.create(this.cookies[name]);
				cookie.name = name;
				cookies.push(cookie.toString());
			}
			if( cookies.length ){
				this.setHeader('set-cookie', cookies);
			}
		}

		if( this.sendDate && !this.hasHeader('date') ){
			this.setHeader('date', new Date().toUTCString());
		}

		// IRRELEVANT?? AJAX request need a 200 statusCode to read the response
		/*
		if( this.status < 200 && this.status >= 400 && this.request.isAjax() ){
			this.setHeader('x-status-code', this.status); // error status are put in a header
			this.status = 200;
		}
		*/

		/*
		node.js does this automatically, yes but I may need this to know it in logger
		this.on('beforeSendingHeaders', function(){
			if( this.hasHeader('content-length') === false ){
				// there is a body without content-length header, tell that to the browser
				this.setHeader('transfer-encoding', 'chunked');
				this.setHeader('accept-ranges', 'bytes');
			}
		});
		*/
	},

	hasHeader: function(name){
		name = name.toLowerCase();
		return name in this.headers;
	},

	getHeader: function(name, defaultValue){
		name = name.toLowerCase();
		if( this.hasHeader(name) ){
			return this.headers[name];
		}
		return defaultValue || null;
	},

	setHeader: function(name, value){
		name = name.toLowerCase();
		this.headers[name] = value;
	},

	removeHeader: function(name){
		name = name.toLowerCase();
		delete this.headers[name];
	},

	hasBody: function(){
		// https://github.com/mcavage/node-restify/blob/master/lib/response.js#L268
		// https://github.com/joyent/node/blob/master/lib/_http_server.js#L205
		var status = this.status;
		if( status === 204 || status === 304 ){
			return false;
		}
		if( 100 <= status && status <= 199 ){
			return false;
		}
		return this._hasBody;
	},

	createBodyPromise: function(){
		debug('creating body promise', this.hasBody());

		if( !this.hasBody() ) return Promise.resolve(new Buffer(0));

		var stream = new PassThrough(), current = this.stream;

		//if( this.stream.isPaused() ) this.stream.resume();

		this.transform(stream);
		return Promise.fromStream(current);
	},

	// transform body using stream
	transform: function(stream){
		// response data are written in the transform stream
		this.stream.pipe(stream);
		// if data are paused, pause the transform steam too
		if( this.stream.isPaused() ) stream.pause();
		// repsonse data are now the transformed data
		this.stream = stream;
	}
});

module.exports = Response;