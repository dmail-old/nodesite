/*

helper to manipulate the serverResponse

inspired from
https://github.com/mcavage/node-restify/blob/master/lib/response.js

node response source :
https://github.com/joyent/node/blob/master/lib/_http_server.js

*/

require('@dmail/object/assign');
var debug = require('debug');
var stream = require('stream');
var proto = require('proto');
var debug = require('debug');
var PassThrough = stream.PassThrough;
var Cookie = require('cookie');
require('promise/fromStream');
require('@dmail/object/define');

var Response = proto.extend({
	status: 200,
	statusMessage: '',
	headers: {},
	trailers: {},
	cookies: {},
	stream: null,
	sendDate: true,
	_hasBody: false,
	tasks: [],
	plugins: [],

	constructor: function(){
		this.plugins.forEach(function(plugin){
			if( plugin.hasOwnProperty('constructor') ){
				plugin.constructor.call(this);
			}
		}, this);
	},

	populate: function(properties){
		if( properties && Response.isPrototypeOf(properties) ) return;

		if( typeof properties === 'number' ){
			properties = {
				status: properties
			};
		}
		else if( typeof properties === 'string' ){
			properties = {
				body: properties
			};
			if( !this.hasHeader('content-type') ){
				properties.headers = {
					'content-type': 'text/plain'
				};
			}
		}

		Object.define(this, properties);

		if( this.headers === null ){
			this.headers = this.constructor.prototype.headers;
		}

		if( this.cookies ){
			if( this.hasHeader('set-cookie') ){
				throw new Error('dont set cookie using headers, use response.cookies instead');
			}

			var cookies = [], cookie;
			for(var name in this.cookies ){
				cookie = Cookie.create(this.cookies[name]);
				cookie.name = name;
				cookies.push(cookie.toString());
			}
			if( cookies.length ){
				this.setHeader('set-cookie', cookies);
			}
		}

		var stream = new PassThrough();
		if( this.stream ){
			this.stream.pipe(stream);
			this._hasBody = true;
		}
		else if( this.body ){
			stream.write(this.body);
			stream.end();
			this._hasBody = true;
		}
		this.stream = stream;

		this.promise = Promise.reduce(this.tasks, this).then(function(){
			return this;
		}.bind(this));

		return this.promise;
	},

	hasHeader: function(name){
		name = name.toLowerCase();
		return name in this.headers;
	},

	getHeader: function(name, defaultValue){
		name = name.toLowerCase();
		if( this.hasHeader(name) ){
			return this.headers[name];
		}
		return defaultValue || null;
	},

	setHeader: function(name, value){
		name = name.toLowerCase();
		this.headers[name] = value;
	},

	removeHeader: function(name){
		name = name.toLowerCase();
		delete this.headers[name];
	},

	hasCookie: function(name){
		return name in this.cookies;
	},

	getCookie: function(name){
		return this.cookies[name];
	},

	hasBody: function(){
		// https://github.com/mcavage/node-restify/blob/master/lib/response.js#L268
		// https://github.com/joyent/node/blob/master/lib/_http_server.js#L205
		var status = this.status;
		if( status === 204 || status === 304 ){
			return false;
		}
		if( 100 <= status && status <= 199 ){
			return false;
		}
		return this._hasBody;
	},

	createBodyPromise: function(){
		debug('creating body promise', this.hasBody());

		if( !this.hasBody() ) return Promise.resolve(new Buffer(0));

		var stream = new PassThrough(), current = this.stream;

		//if( this.stream.isPaused() ) this.stream.resume();

		this.transform(stream);
		return Promise.fromStream(current);
	},

	// transform body using stream
	transform: function(stream){
		// response data are written in the transform stream
		this.stream.pipe(stream);
		// if data are paused, pause the transform steam too
		if( this.stream.isPaused() ) stream.pause();
		// repsonse data are now the transformed data
		this.stream = stream;
	},

	hasPlugin: function(name){
		return this.plugins.findIndex(function(plugin){ return plugin.name == name; }) !== -1;
	}
});

[
	'response-wrap',
	'response-negotiation',
	'response-length',
	'response-final'
].forEach(function(name){
	var plugin = require('./' + name);

	if( plugin.dependencies && !plugin.dependencies.every(Response.hasPlugin, Response) ){
		throw new Error('missing request plugin');
	}

	Response.plugins.push(plugin);
	if( plugin.properties ) Object.define(Response, plugin.properties);
	if( plugin.task ) Response.tasks.push(plugin.task);
});

module.exports = Response;