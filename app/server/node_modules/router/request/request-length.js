var debug = require('debug');

function createTooLargeError(received, limit){
	// this.request.connection.destroy();
	var error = new Error();

	error.message = 'Data too large: {received} > {limit}';
	error.data = {
		received: received,
		limit: limit
	};
	error.statusCode = 413; // too large
	error.code = 'TOO_LARGE';

	return error;
}

function createBadSizeError(received, expected){
	var error = new Error();

	error.message = 'Received bytes must be equal to expected bytes: ' + received + ' != '+ expected;
	error.statusCode = 400; // bad request
	error.code = 'BAD_SIZE';

	return error;
}

function isTooLarge(byteCount, byteLimit){
	return typeof byteCount === 'number' && typeof byteLimit === 'number' && byteLimit != -1 && byteCount > byteLimit;
}

function checkLength(request){
	var bytesExpected, bytesLimit = request.bytesLimit, bytesReceived = 0;

	if( typeof request.bytesExpected === 'number' ){
		bytesExpected = request.bytesExpected;
	}
	else if( request.hasHeader('content-length') ){
		bytesExpected = request.length;
		request.bytesExpected = bytesExpected;
	}

	if( typeof bytesExpected === 'number' && isTooLarge(bytesExpected, bytesLimit) ){
		throw createTooLargeError(bytesExpected, bytesLimit);
	}

	request.stream.on('data', function(chunk, encoding){
		bytesReceived+= Buffer.isBuffer(chunk) ? chunk.length : Buffer.byteLength(chunk, encoding);
		request.bytesReceived = bytesReceived;

		if( isTooLarge(bytesReceived, bytesLimit) ){
			this.emit('error', createTooLargeError(bytesReceived, bytesLimit));
		}
	});
	request.stream.on('end', function(){
		if( typeof bytesExpected == 'number' && bytesReceived != bytesExpected ){
			this.emit('error', createBadSizeError(bytesReceived, bytesExpected));
		}
	});

	debug('added length check on request body');
}

var RequestLength = {
	properties: {
		autoLength: true,
		bytesLimit: -1, // 1e6
		bytesExpected: 'auto', // computed from content-length
		bytesReceived: 0,

		get length(){
			return this.hasHeader('content-length') ? parseInt(this.getHeader('content-length'), 10) : 0;
		},

		set length(length){
			this.setHeader('content-length', length);
		}
	},

	task: function(){
		if( this.autoLength && this.hasBody() ){
			checkLength(this);
		}
	}
};

module.exports = RequestLength;