/*

name: Request

description: Helper for node request

making response & request streamable
https://github.com/mjijackson/mach/blob/master/modules/request.js

inspiration:
restify: https://github.com/mcavage/node-restify

*/

var proto = require('proto');
var stream = require('stream');
var PassThrough = stream.PassThrough;
var debug = require('debug');
require('promise/fromStream');
require('promise/reduce');
require('object/define');
require('array/prototype/findIndex');
require('array/prototype/every');

var Request = proto.create({
	URL: require('url'),
	QueryString: require('querystring'),

	httpVersion: '1.1',
	method: 'get',
	url: null,
	trailers: {},
	headers: {},
	stream: null,

	urlParams: {},
	cookies: {},
	plugins: [],
	tasks: [],

	constructor: function(){
		this.plugins.forEach(function(plugin){
			if( plugin.hasOwnProperty('constructor') ){
				plugin.constructor.call(this);
			}
		}, this);
	},

	populate: function(properties){
		Object.define(this, properties);

		/*
		Object.defineProperty(this, 'stream', {
			enumerable: false,
			configurable: true,
			value: this.stream
		});
		*/

		if( this.url ){
			this.url = this.URL.parse(this.url);
			this.url.toString = function(){ return this.href; };
			this.url.pathname = this.QueryString.unescape(this.url.pathname);
			this.urlParams = this.QueryString.parse(this.url.query);
		}
		if( this.method ){
			this.method = properties.method.toLowerCase();
		}
		if( this.headers === null ){
			this.headers = this.constructor.prototype.headers;
		}
		if( this.cookies === null ){
			this.cookies = this.constructor.prototype.cookies;
		}

		var stream = new PassThrough();
		if( this.stream ){
			this.stream.pipe(stream);
		}
		else if( this.body ){
			stream.write(this.body);
		}
		this.stream = stream;

		this.promise = Promise.reduce(this.tasks, this);
		return this.promise;
	},

	transform: function(stream){
		debug('transforming request stream');

		// data are written to the transformed stream
		this.stream.pipe(stream);
		// if data are paused, pause the transform steam too
		if( this.stream.isPaused() ) stream.pause();
		this.stream = stream;
	},

	createBodyPromise: function(){
		debug('creating body promise', this.hasBody());

		if( !this.hasBody() ) return Promise.resolve(new Buffer(0));

		var stream = new PassThrough();
		this.stream.pipe(stream);
		return Promise.fromStream(stream);

		/*
		response.stream.on('data', function(chunk, encoding){
			if( exceeded ) return;

			if( typeof chunk == 'string' ){
				chunk = new Buffer(chunk, encoding);
			}

			var chunkLength = chunk.length;

			if( typeof handler.logResponseBodyMaxLength === 'number' ){
				var diff = (length + chunkLength) - handler.logResponseBodyMaxLength;
				if( diff > 0 ){
					chunk = chunk.slice(0, chunkLength - diff);
					exceeded = true;
				}
			}

			buffers.push(chunk);
			length+= chunkLength;
		});
		*/
	},

	hasHeader: function(name){
		name = name.toLowerCase();
		return name in this.headers;
	},

	getHeader: function(name, defaultValue){
		name = name.toLowerCase();
		if( this.hasHeader(name) ){
			return this.headers[name];
		}
		return defaultValue || null;
	},

	hasCookie: function(name){
		return name in this.cookies;
	},

	getCookie: function(name){
		return this.cookies[name];
	},

	is: function(){
		var i = 0, j = arguments.length, arg, method = this.method;
		for(;i<j;i++){
			arg = arguments[i];
			if( arg == 'all' || arg == '*' || arg === method ) return true;
		}
		return false;
	},

	hasBody: function(){
		if( this.is('post', 'put') ){
			return false;
		}
		if( this.hasHeader('transfer-encoding') ){
			return true;
		}
		if( this.getHeader('transfer-encoding') === 'chunked' ){
			return false; // why??
		}
		if( this.getHeader('content-length') == '0' ){
			return false;
		}
		return true;
	},

	isAjax: function(){
		var value = this.getHeader('x-requested-with');
		return value ? value.toLowerCase() === 'xmlhttprequest' : false;
	},

	hasPlugin: function(name){
		return this.plugins.findIndex(function(plugin){ return plugin.name == name; }) !== -1;
	}
});

[
	'request-length',
	'request-md5',
	'request-negotiation',
	'request-body',
	'request-params',
	'request-json',
	'request-method-override'
].forEach(function(name){
	var plugin = require('./' + name);

	if( plugin.dependencies && !plugin.dependencies.every(Request.prototype.hasPlugin, Request.prototype) ){
		throw new Error('missing request plugin');
	}

	Request.prototype.plugins.push(plugin);
	if( plugin.properties ) Object.define(Request.prototype, plugin.properties);
	if( plugin.task ) Request.prototype.tasks.push(plugin.task);
});

module.exports = Request;