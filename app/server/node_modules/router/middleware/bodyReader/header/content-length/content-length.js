var RequestHeader = require('./requestHeader');
var ContentLengthHeader = RequestHeader.extend({
	name: 'content-length',
	BytesLimitedStream: require('./bytesLimitedStream'),

	parse: function(value){
		return parseInt(value, 10);
	},

	createTooLargeError: function(){
		// destroy request connection on error to release memory
		this.request.connection.destroy();

		this.errorStatusCode = 413; // too large
		return this.createError('Request {headerName} is too large: {headerValue} > {bytesLimit}', {
			bytesLimit: this.request.maxLength
		});
	},

	createBadSizeError: function(){
		this.errorStatusCode = 400; // bad request
		return this.createError('Request {headerName} did not match receivedBytes. {headerValue} != {bytesReceived}', {
			bytesReceived: this.request.socket.bytesRead
		});
	},

	isValid: function(){
		return typeof this.request.maxLength === 'number' && this.value <= this.request.maxLength;
	},

	effect: function(){
		if( typeof this.request.maxLength == 'number' ){
			var byteLimitedStream = new this.BytesLimitedStream();
		
			byteLimitedStream.createTooLargeError = this.createTooLargeError.bind(this);
			byteLimitedStream.createInvalidSizeError = this.createBadSizeError.bind(this);
			byteLimitedStream.bytesExpected = this.value;
			byteLimitedStream.byteLimit = this.request.maxLength;
			this.bodyReader.computedStream.chain(byteLimitedStream);
		}
	}
});

module.exports = ContentLengthHeader;