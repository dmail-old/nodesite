var RequestHeader = require('./requestHeader');
var ContentTypeHeader = RequestHeader.extend({
	name: 'content-type',
	converters: require('./converters'),
	parsers: require('./parsers'),

	errorStatusCode: 415, // unsupported request header
	charsetErrorMessage: 'Unsupported charset {charset} in {headerName} request header. Supported values: {supporteds}',
	mediaTypeErrorMessage: 'Unsupported mediaType {mediaType} in {headerName} request header. Supported values: {supporteds}',

	getValue: function(){
		var mediaType = this.request.type, charset = this.request.charset, value = mediaType;

		if( this.isTextual(mediaType) ){
			value+= ';charset=' + charset;
		}

		return value;
	},

	isTextual: function(value){
		return require('./contentType').isTextual(value);
	},

	split: function(value){
		return require('./contentType').parse(value);
	},

	isValidCharset: function(value){
		return value in this.converters;
	},

	isValidMediaType: function(value){
		return value in this.parsers;
	},

	getValidCharsets: function(){
		return Object.keys(this.converters);
	},

	getValidMediaTypes: function(){
		return Object.keys(this.parsers);
	},

	createCharsetError: function(charset){
		return this.createError(this.errorStatusCode, this.charsetErrorMessage, {
			charset: charset,
			valids: this.getValidCharsets()
		});
	},

	createMediaTypeError: function(mediaType){
		return this.createError(this.errorStatusCode, this.mediaTypeErrorMessage, {
			mediaType: mediaType,
			valids: this.getValidMediaTypes()
		});
	},

	valid: function(){
		var parts = this.split(this.value), mediaType = parts[0], charset = parts[1];

		if( charset && this.isTextual(mediaType) && !this.isValidCharset(charset) ){
			this.error = this.createCharsetError(charset);
			return false;
		}
		if( !this.isValidMediaType(mediaType) ){
			this.error = this.createMediaTypeError(mediaType);
			return false;
		}

		this.error = null;
		return true;
	},

	effect: function(){
		var parts = this.split(this.value), mediaType = parts[0], charset = parts[1];

		if( charset ){
			this.converters[charset].call(this);
		}
		this.parsers[mediaType].call(this);
	}	
});

module.exports = ContentTypeHeader;
