var ResponseHeader = {
	bodyWriter: null,
	response: null,
	name: null,
	value: null,
	error: null,
	errorMessage: 'Invalid value for response header {headerName}:{headerValue}',
	errorStatusCode: 500, // internal error, some server side code set the response header to an invalid value
	Error: require('headerValueError'),

	new: function(bodyWriter){
		if( this.value !== null || this.name in bodyWriter.response.headers || 'getValue' in this ){
			return Object.prototype.new.call(this, bodyWriter);
		}
		else{
			return false;
		}
	},

	init: function(bodyWriter){
		this.bodyWriter = bodyWriter;
		this.response = bodyWriter.response;

		var value;
		if( this.name in this.response.headers ){
			value = this.response.headers;
		}
		else if( this.value === null ){
			value = this.getValue();
		}
		else{
			value = this.value;
		}

		if( this.parse ) value = this.parse(value);
		this.value = value;
	},

	createError: function(statusCode, message, data){
		statusCode = statusCode || this.errorStatusCode;
		message = message || this.errorMessage;
		data = data || {};

		if( !('headerName' in data) ) data.headerName = this.name;
		if( !('headerValue' in data) ) data.headerValue = this.value;

		var error = new this.Error(statusCode, message, data);
		return error;
	},

	isValid: function(){
		return true;
	},

	valid: function(){
		if( this.isValid() ){
			return true;
		}
		this.error = this.createError();
		return false;
	},

	effect: function(){
		// noop
	}
};

module.exports = ResponseHeader;