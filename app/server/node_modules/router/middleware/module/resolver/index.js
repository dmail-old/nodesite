/*
https://github.com/substack/node-resolve/tree/master/lib
http://nodejs.org/api/modules.html#modules_all_together
*/

var ModulePathResolver = {
	Path: require('path'),
	fileSystem: require('fs'),

	dirname: 'node_modules',
	index: 'index',
	package: 'package.json',
	extension: '.js',
	
	requiredPath: null, // path required by a module
	modulePath: null, // module path

	init: function(requiredPath, modulePath){
		this.requiredPath = requiredPath;
		this.modulePath = modulePath;
	},

	isFile: function(path, fn){
		this.fileSystem.stat(path, function(error, stat){
			if( error ){
				if( error.code === 'ENOENT' ){
					fn(null, false);
				}
				else{
					fn(error);
				}
			}
            else if( stat.isFile() || stat.isFIFO() ){
				fn(null, true);
            }
            else{
				fn(null, false);
            }
		});
	},

	loadAsFile: function(path, fn){
		this.isFile(path, function(error, is){
			if( error ){
				fn(error);
			}
			// on a trouvé le fichier
			else if( is ){
				fn(null, path);
			}
			// on a pas trouvé
			else if( this.Path.extname(path) == this.extension ){
				fn();
			}
			// cherche le fichier avec l'extension
			else{
				this.loadAsFile(path + this.extension, fn);
			}
		});
	},

	loadAsDirectory: function(path, fn){
		var packagePath = path + this.Path.sep + this.package;
		var indexPath = path + this.Path.sep + this.index;

		this.isFile(packagePath, function(error, is){
			// erreur, pas normal
			if( error ) return fn(error);
			// pas de package.json essaye de charge le fichier index
			if( !is ) this.loadAsFile(indexPath, fn);

			// utilise package.json			
			this.fileSystem.readFile(packagePath, function(error, body){
				if( error ){
					return fn(error);
				}

				try{					
					body = JSON.parse(body);
				}
				catch(e){}

				if( body.main ){
					this.load(this.Path.resolve(path, body.main), fn);
				}
				else{
					this.loadAsFile(indexPath, fn);
				}

			}.bind(this));
		});
	},

	load: function(path, fn){
		this.loadAsFile(path, function(error, resolved){
			if( error ){
				fn(error);
			}
			else if( resolved ){
				fn(null, resolved);
			}
			else{
				this.loadAsDirectory(path, fn);
			}
		}.bind(this));
	},

	// http://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders
	nodeModulePaths: function(start){
		/*
		1. let PARTS = path split(START)
		2. let ROOT = index of first instance of "node_modules" in PARTS, or 0
		3. let I = count of PARTS - 1
		4. let DIRS = []
		5. while I > ROOT,
			a. if PARTS[I] = "node_modules" CONTINUE
			c. DIR = path join(PARTS[0 .. I] + "node_modules")
			b. DIRS = DIRS + DIR
			c. let I = I - 1
		6. return DIRS
		*/

		var Path = this.Path;
		var parts = start.split('/'), dirs, dir, i, root, part;

		root = parts.indexOf(this.dirname);
		if( root == -1 ) root = 0;

		i = parts.length - 1;
		dirs = [];
		while( i > root ){
			part = parts.pop();
			if( part == this.dirname ) continue;
			dir = Path.join(Path.join.apply(Path, parts), this.dirname);
			dirs.push(dir);

			// ne dois pas monter plus haut que app/node_modules
			if( dir == global.APP_PATH + this.Path.sep + this.dirname ) break;

			i--;
		}

		return dirs;
	},

	loadNodeModules: function(path, start, fn){
		/*
		LOAD_NODE_MODULES(X, START)
		1. let DIRS=NODE_MODULES_PATHS(START)
		2. for each DIR in DIRS:
			a. LOAD_AS_FILE(DIR/X)
			b. LOAD_AS_DIRECTORY(DIR/X)
		*/

		var dirs = this.nodeModulePaths(start), i = 0, j = dirs.length, dir;

		function nextdirectory(){			
			
			if( i < j ){
				dir = dirs[i];
				this.load(dir + this.Path.sep + path, function(error, resolved){
					if( error ){
						fn(error);
					}
					else if( resolved ){
						fn(null, resolved);
					}
					else{						
						nextdirectory();
					}
				});
			}
			else{
				fn();
			}

			i++;
		}

		nextdirectory();
	},

	resolve: function(callback){		
		/*
		require(X) from module at path Y
		1. If X is a core module,
			a. return the core module
			b. STOP
		2. If X begins with './' or '/' or '../'
			a. LOAD_AS_FILE(Y + X)
			b. LOAD_AS_DIRECTORY(Y + X)
		3. LOAD_NODE_MODULES(X, dirname(Y))
		4. THROW "not found"
		*/

		var X = this.requiredPath;
		var Y = this.modulePath;

		if( X[0] == '/' || X.slice(0,2) == './' || X.slice(0,3) == '../' ){
			this.load(this.Path.resolve(Y, X), callback);
		}
		else{
			this.loadNodeModules(X, this.Path.dirname(Y), callback);
		}	
	}
};

module.exports = ModulePathResolver;
