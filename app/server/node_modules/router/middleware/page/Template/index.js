/*

TODO:

getContent devrait Ãªtre asynchrone

*/

require('promise/from');
require('string/prototype/capitalize');
var proto = require('proto');

var Template = proto.extend({
	fileSystem: require('fs'),
	content: null,
	HTMLTemplate: require('./MustachePercentTemplate'),
	ScriptTemplate: require('./ScriptTemplate'),

	constructor: function(path, params){
		this.path = path;
		this.params = params || {};
	},

	getContent: function(){
		return Promise.from(function(complete){
			return this.fileSystem.readFile(this.path, complete);
		}, this).then(function(content){
			this.content = content.toString(config.charset);
			return this.content;
		}.bind(this));
	},

	renderHTML: function(html, params){
		return this.HTMLTemplate(html).create().render(params);
	},

	renderScriptContent: function(script, params){
		return this.ScriptTemplate(script).create().render(params);
	},

	scriptReplaceRegexp: /(<script[^>]*>)([\s\S]*?)(<\/script>)/i,
	renderScript: function(script, params){
		return script.replace(this.scriptReplaceRegexp, function(match, open, content, close, offset, string){
			open = this.renderHTML(open, params);
			content = this.renderScriptContent(content, params);
			close = close;
			return open + content + close;
		}.bind(this));
	},

	scriptSplitRegexp: /(<script[^>]*>[\s\S]*?<\/script>)/gi,
	render: function(){
		if( this.response ) return Promise.resolve(this.response);

		return this.getContent().then(function(content){
			// split the file into parts: "foo<script>alert('ok');</script>bar"
			// will output parts = ["foo", "<script>alert('ok');</script>", "bar"]
			var parts = content.split(this.scriptSplitRegexp);

			// for each part replace "{%%}" with params
			parts = parts.map(function(part, index){
				if( index % 2 === 0 ){
					return this.renderHTML(part, this.params);
				}
				else{
					return this.renderScript(part, this.params);
				}
			}, this);

			var result = parts.join('');

			this.response = {
				body: result,
				// default text/html
				headers: {
					'content-type': config.getMimetype(this.path)
				}
			};

			return this.response;
		}.bind(this));
	}
});

module.exports = Template;