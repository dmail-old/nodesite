/*

dans send(path):

client_path devrait pas être commenté on peut imaginer délivrer une page n'étant pas coté client
// en passant un path se trouvant ailleurs
// ça se passe en partie dans pageURLS qui doit pas utiliser CLIENT_PATH et getPath mais partir
// du path qu'on lui fournit


le comportement de renvoyer app.page au lieu de index.page ne doit pas se passer ici

*/

var PageAccess = require('./access');
var PageURLS = require('./pageURLS');
var HTMLPage = require('./htmlPage');
var Handler = require('../handler');
var PageHandler = Handler.extend({
	name: null,
	module: null,
	handler: null,
	args: null,
	access: null,

	createHTMLPage: function(name){
		if( typeof name != 'string' ){
			name = this.request.pathname; // faut supprimer un éventuel
			name = 'html' + this.request.pathname;
		}

		if( !name.endsWith('.html') ) name+= '.html';

		var path = global.CLIENT_PATH + '/' + name;
		var htmlPage = HTMLPage.new(name);

		htmlPage.router = this;
		htmlPage.send = function(params){
			var html = this.render(params), response = this.router.response;

			// on impose le content-type
			response.setHeader('content-type', 'text/html');
			response.writeBody(html);
			response.end();
		};
	},

	getModule: function(){
		var module;

		try{
			module = require(PageURLS.getPath(this.name));
		}
		catch(e){
			module = e;
		}

		return module;
	},

	// MORE: faudrait vérifier à la manière que global.applyScript la longeur des arguments passées / au handler
	getArguments: function(){
		var request = this.request, args, params, handler = this.handler;

		if( Array.isArray(request.bodyParams) ){
			args = request.bodyParams;
		}
		else{
			// j'ai passé du json comme paramètre, cela prévaut sur queryString
			if( params.json ){
				params = params.json;
			}
			else{
				params = request.params;
			}

			if( params == null ){
				args = [];
			}
			else if( Array.isArray(params) ){
				args = params;
			}
			else if( typeof params == 'object' ){
				args = [];
				if( typeof handler == 'function' ){
					var names = Function.argumentNames(handler), i = 0, j = names.length - 1, name;

					for(;i<j;i++){
						name = names[i];
						args.push(params[name]);
					}
				}
			}
			else{
				args = [];
			}
		}

		return args;
	},

	getHandler: function(module){
		var handler;

		// accept all method
		if( typeof module == 'function' ){
			handler = module;
		}
		else if( typeof module == 'object' ){	
			if( this.request.method in module ){
				handler = module[this.request.method];
			}
			// accept all method
			if( '*' in module ){
				handler = module['*'];
			}

			if( typeof handler != 'function' ){
				handler = null;
			}
		}

		return handler;
	},

	send: function(path){
		if( path == null ) path = /*global.CLIENT_PATH + */this.request.pathname;

		this.name = PageURLS.toPage(path);

		if( !this.request.isAjax() && this.name != 'node_modules' ){
			this.name = 'app';
		}

		this.module = this.getModule();

		// page doesn't exists
		if( this.module instanceof Error ){	
			if( this.module.code == 'MODULE_NOT_FOUND' ){
				return this.respond(404);
			}			
			return this.error(this.module);
		}		

		this.handler = this.getHandler(this.module);

		if( this.handler ){
			this.access = PageAccess.new(this.name);
			this.args = this.getArguments();

			// this request has no right to call this page
			if( !this.access.has(this.args) ){
				return this.error(this.access.error);
			}

			try{
				this.handler.apply(this, this.args);
			}
			catch(e){
				this.error(e);
			}
		}
		// not implemented
		else{
			this.respond(501);
		}
	},

	handle: function(){
		if( PageURLS.isPage(this.request.pathname) ){
			return PageHandler.new(this).send();
		}
		else{
			this.next();
		}
	}
});

PageHandler.response = {
	sendPage: function(path){
		return PageHandler.new(this.router).send(path);
	}
};

/*
lorsqu'on demande une page, en général on recoit du text/html
on peut aussi recevoir du json selon ce que la page fait etc

lorsqu'on espère du HTML on devrait renvoyer une erreur formatée en HTML
pour le JSON on renvoit l'erreur formatée en JSON

lorsqu'on ne sait pas ou on en est par défaut on renvoit du HTML
*/

module.exports = PageHandler;