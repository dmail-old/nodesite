var proto = require('@dmail/proto');
var PageAccess = proto.extend({
	pageName: null,
	validator: null,
	error: null,
	propertyName: 'access',

	constructor: function(pageName){
		this.pageName = pageName;

		var name = this.findValidatorName();
		if( name ){
			this.validator = this.getValidator(name);
		}
	},

	hasValidator: function(name){
		return name in config.pages && config.pages[name][this.propertyName];
	},

	getValidator: function(name){
		return config.pages[name][this.propertyName];
	},

	findValidatorName: function(){
		/*
		check if action "database/search/findById" can be done
		search if an handler called "database/search/findById" exists
		then "database/search"
		then "database"
		then "/"
		then "*"
		*/

		var parts = this.pageName.split('/'), i, name;

		// pathname looks like '/action' or '/action/database/insert', we remove /action/ from the parts
		parts = parts.slice(2);
		i = parts.length;
		while(i--){
			name = parts.join('/');
			if( this.hasValidator(name) ) return name;
			parts.pop();
		}

		name = '/';
		if( this.hasValidator(name) ) return name;
		name = '*';
		if( this.hasValidator(name) ) return name;

		return null;
	},

	has: function(args){
		var validator = this.validator, result;

		if( validator ){
			if( typeof validator == 'function' ){
				result = validator.apply(this, this.args);
				if( result === false ){
					result = new Error('unauthorized');
				}
			}
			else{
				console.error('Page access Error: validator is not a function');
			}
		}

		if( result instanceof Error ){
			this.error = result;
			return false;
		}
		this.error = null;
		return true;
	}
});

module.exports = PageAccess;