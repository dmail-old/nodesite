/*

for a page at path

1. try to load a file at path ending by .page
2. try to load a file named path + '/' + index.page
3. repeat for all parent directories

examples:

resolve('/') -> '/index.page'
resolve('') -> 'index.page'
resolve('/index') -> 'index.page' or '/index/index.page'
resolve('/user/32/edit') ->
	'user/32/edit.page' or 'user/32/edit/index.page',
	'user/32.page' or 'user/32/index.page',
	'user.page' or 'user/index.page',
	'index.page'

-> prob: la page index récup toutes les requêtes
-> je pense pas que resolve('/') ou resolve('') avec l'algo actuel retourne index.page

*/

var Resolver = {
	fileSystem: require('fs'),
	Path: require('path'),

	index: 'index',
	extension: '.page',

	path: null,

	init: function(path){
		this.path = path;
	},

	isFile: function(path, fn){
		this.fileSystem.stat(path, function(error, stat){
			if( error ){
				if( error.code === 'ENOENT' ){
					fn.call(this, null, false);
				}
				else{
					fn.call(this, error);
				}
			}
			else if( stat.isFile() || stat.isFIFO() ){
				fn.call(this, null, true);
			}
			else{
				fn.call(this, null, false);
			}
		});
	},

	loadAsFile: function(path, fn){
		path+= this.extension;

		this.isFile(path, function(error, is){
			if( error ){
				fn.call(this, error);
			}
			// on a trouvé le fichier
			else if( is ){
				fn.call(this, null, path);
			}
			// on a pas trouvé
			else{
				fn.call(this);
			}
		});
	},

	loadAsDirectory: function(path, fn){
		this.loadAsFile(path + this.Path.sep + this.index, fn);
	},

	load: function(path, fn){
		this.loadAsFile(path, function(error, resolved){
			if( error ){
				fn.call(this, error);
			}
			else if( resolved ){
				fn.call(this, null, resolved);
			}
			else{
				this.loadAsDirectory(path, fn);
			}
		});
	},

	pagePaths: function(start){
		var Path = this.Path, parts = start.split('/'), dirs, dir, i, part;

		i = parts.length - 1;
		dirs = [];
		while( i > 0 ){
			part = parts.pop();
			dir = Path.join.apply(Path, parts);
			dirs.push(dir);

			// ne dois pas monter plus haut que app/client
			if( dir == global.CLIENT_PATH ) break;

			i--;
		}

		return dirs;
	},

	loadPages: function(path, fn){
		var dirs = this.pagePaths(path), i = 0, j = dirs.length, dir;

		function nextdirectory(){
			if( i < j ){
				dir = dirs[i];
				this.load(dir, function(error, resolved){
					if( error ){
						fn.call(this, error);
					}
					else if( resolved ){
						fn.call(this, null, resolved);
					}
					else{						
						nextdirectory.call(this);
					}
				});
			}
			else{
				fn.call(this);
			}

			i++;
		}

		nextdirectory.call(this);
	},

	resolve: function(fn){
		// load as file or as directory
		this.load(this.path, function(error, resolved){
			if( error ){
				fn.call(this, error);
			}
			else if( resolved ){
				fn.call(this, null, resolved);
			}
			else{
				// if not found try to load parent directories
				this.loadPages(this.path, fn);
			}
		});
	}
};

module.exports = Resolver;