var HTMLPage = {
	fileSystem: require('fs'),
	demand: null,
	name: null,
	
	content: null,
	params: null,
	parsed: null,

	// metas utilisant l'attribut "http-equiv"
	http_equiv: [
		'content-language',
		'content-type',
		'refresh',
		'pragma',
		'expires',
		'cache-control',
		'cache'
	],
	metaTemplate: '<meta {{attr}}="{{name}}" content="{{value}}" />',
	tags: {
		style: '<link href="#" type="text/css" rel="stylesheet" />',
		script: '<script src="#" type="text/javascript"></script>',
		favicon: '<link href="#" type="image/x-icon" rel="shortcut icon"/>'
	},

	create: function(demand, name, params){
		this.demand = demand;
		this.name = name;
		if( !this.name.endsWith('.html') ) this.name+= '.html';
		this.path = global.CLIENT_PATH + '/' + this.name;

		if( params ){
			this.setParams(params);
		}
	},

	parseStyle: function(name){
		return this.setTagUrl(this.tags.style, 'css/' + name + '.css');
	},

	parseStyles: function(names){
		var output = [];

		names.forEach(function(name){
			output.push(this.parseStyle(name));
		}, this);

		return output.join('\n\t');
	},

	parseScript: function(name){
		if( !name.endsWith('.js') ) name+= '.js';

		return this.setTagUrl(this.tags.script, name);
	},

	parseScripts: function(names){
		var output = [];

		names.forEach(function(name){
			output.push(this.parseScript(name));
		}, this);

		return output.join('\n\t');
	},

	setTagUrl: function(tag, path){
		var url = require('url').format({
			protocol: config.protocol,
			host: config.host + (config.port ? ':' + config.port : ''),
			pathname: path
		});

		return tag.replace('#', url);
	},

	parseMeta: function(name, value){
		name = name.toLowerCase();
		var attr = 'name', meta;

		if( this.http_equiv.contains(name) ){
			attr = 'http-equiv';
			name = name.capitalize();
		}

		if( name == 'charset' ){
			return '<meta charset="' + value + '" />';
		}

		return this.metaTemplate.parse({
			attr: attr,
			name: name,
			value: value
		});
	},

	parseMetas: function(metas){
		var output = [], name;

		for(name in metas){
			output.push(this.parseMeta(name, metas[name]));
		}

		return output.join('\n\t');
	},

	setParams: function(params){
		this.params = params;
	},

	getContent: function(){
		// TODO
		this.content = this.fileSystem.readFileSync(this.path);
		this.content = this.content.toString(config.charset);
	},

	parse: function(params){
		if( params ) this.setParams(params);
		this.getContent();
		this.parsed = this.content.parse(this.params);
		return this.parsed;
	},

	send: function(params){
		var parsed = this.parse(params);		

		this.demand.setContentType('text/html');
		// size is different of the filesize because im parsing content
		this.demand.setHeader('content-length', Buffer.byteLength(parsed, config.charset));

		this.demand.writeHead(200);
		this.demand.write(parsed);
		this.demand.end();
	}
};

module.exports = HTMLPage;