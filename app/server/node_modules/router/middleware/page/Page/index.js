/*

*/

require('promise/reduce');
require('core/function');
var proto = require('@dmail/proto');
var debug = require('debug');

var PageHandler = proto.extend({
	page: null,
	fn: null,
	bind: null,
	args: null,

	constructor: function(page, fn, bind){
		this.page = page;
		this.fn = fn;
		this.bind = bind;
	},

	getArguments: function(request){
		var args, params;

		if( Array.isArray(request.bodyParams) ){
			args = request.bodyParams;
		}
		else{
			params = request.urlParams;

			if( params == null ){
				args = [];
			}
			else if( Array.isArray(params) ){
				args = params;
			}
			else if( typeof params == 'object' ){
				args = [];
				if( typeof this.fn == 'function' ){
					var names = Function.argumentNames(this.fn), i = 1, j = names.length, name;

					for(;i<j;i++){
						name = names[i];
						args.push(params[name]);
					}
				}
			}
			else{
				args = [];
			}
		}

		return args;
	},

	createArgumentsLengthError: function(){
		var error = new Error();
		error.code = 'ARGUMENTS_LENGTH_ERROR';
		return error;
	},

	setArgumentsFromRequest: function(request){
		this.args = this.getArguments(request);
		if( this.args.length != (this.fn.length - 1) ){
			throw this.createArgumentsLengthError();
		}
	},

	handle: function(){
		return this.fn.apply(this.bind, [this.page].concat(this.args));
	}
});

var Page = proto.extend({
	Path: require('path'),
	Access: require('../Access'),
	Template: require('../Template'),

	requestHandler: null,
	request: null,

	path: null,
	pageExports: null,
	handler: null,
	access: null,

	constructor: function(requestHandler, path){
		this.requestHandler = requestHandler;
		this.request = requestHandler.request;
		this.path = path;

		// this.Template.fileSystem = requestHandler.fileSystem;
	},

	createHandler: function(fn, bind){
		return PageHandler.create(this, fn, bind);
	},

	createHandlerFromExports: function(pageExports){

		// accept all method
		if( typeof pageExports == 'function' ){
			return this.createHandler(pageExports);
		}
		if( typeof pageExports == 'object' ){
			// accept all method
			if( '*' in pageExports ){
				return this.createHandler(pageExports['*'], pageExports);
			}
			var method = this.request.method;
			// accept a specific method
			if( method in pageExports ){
				return this.createHandler(pageExports[method], pageExports);
			}
			else if( method.toUpperCase() in pageExports ){
				return this.createHandler(pageExports[method.toUpperCase()], pageExports);
			}

			if( typeof handler == 'object' ){
				// faudrais vérifier si l'url correspond au clé de l'objet, si oui on apelle les fonction en valeur
				// sauf que c'est surement une feature pas si utile que ça, on fait pas ça pour le moment
			}
		}

		return null;
	},

	createRouteNotFoundError: function(){
		var error = new Error();
		error.code = 'ROUTE_NOT_FOUND';
		error.status = 501;
		return error;
	},

	compile: function(){
		this.pageExports = require(this.path);
		this.handler = this.createHandlerFromExports(this.pageExports);

		if( !this.handler ){
			throw this.createRouteNotFoundError();
		}
	},

	allow: function(){
		this.handler.setArgumentsFromRequest(this.request);

		this.access = this.Access.create(this.path);
		// this request has no right to call this page
		if( this.access.has(this.handler.args) === false ){
			throw this.access.error;
		}
	},

	getPageResult: function(){
		var cache = this.pageExports.cache;

		if( cache ){
			var cachedEntry = cache.get(this.request);

			if( cachedEntry ){
				return cachedEntry.response;
			}

			this.requestHandler.promise.then(function(response){
				cache.set(this.request, response);
			}.bind(this));
		}

		return this.handler.handle();
	},

	// for a page in 'folder/page.page', search for 'folder/html/page.html'
	getTemplatePath: function(path){
		return this.Path.join(this.Path.dirname(path), 'html', this.Path.basename(path, '.page.js') + '.html');
	},

	createTemplate: function(path, params){
		path = path || this.getTemplatePath(this.path);
		return this.Template.create(path, params);
	},

	createTemplatePromise: function(path, params){
		var tpl = this.createTemplate(path, params);

		return tpl.render().catch(function(error){
			// template doesn't exist, send row data
			if( error && error.code === 'ENOENT' ){
				debug('template not found', tpl.path);
				return tpl.result;
			}
			return Promise.reject(error);
		});
	},

	createPromise: function(){
		return Promise.reduce([
			this.compile,
			this.allow,
			this.getPageResult
		], this);
	}
});

module.exports = Page;