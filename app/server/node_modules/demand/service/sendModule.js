/*

if .js not specified it looks for pathname + '/index.js' then pathname + '.js'
it will try to locate those files in app/client/node_modules then app/node_modules

*/

var FS = require('fs');
var Path = require('path');
module.exports = {
	moduleDirName: 'node_modules',
	modulePrefix: 'var module = new Module("{filename}");\n(function(exports, require, module, __filename, __dirname){\n',
	moduleSuffix: '\n}).call(module.exports, module.exports, module.require.bind(module), module, module.filename, module.dirname);\n',

	sendFileModule: function(path){
		this.emitter.on('header', function(){
			// adjust content-length
			var length = this.getHeader('content-length');
			length+= this.modulePrefix.length;
			length+= this.moduleSuffix.length;
			this.setHeader('content-length', length);
		});

		var pathname = path.replace(/\\/g, '/');
		var search = '/'+ this.moduleDirName +'/';
		var filepath = pathname.slice(pathname.indexOf(search) + search.length);
		
		this.modulePrefix = this.modulePrefix.replace('{filename}', filepath);
		this.moduleSuffix = this.moduleSuffix.replace('{filename}', filepath);

		// wrap filecontent with prefix and suffix
		this.sendFileContent = function(data){
			this.send(200, this.modulePrefix + data.toString() + this.moduleSuffix);
		};

		this.sendFile(path, false);
	},

	// TODO put the result in cache
	resolveModule: function(filename, callback, bind){
		bind = bind || this;
		var self = this;
		var sharedNodeModulesDirectory = global.APP_PATH;
		var clientNodeModulesDirectory = global.CLIENT_PATH;
		var extension = Path.extname(filename);
		var checkDirectory = extension === '';
		var checkNodeModules = startsWith(filename, '/', './', '../', sharedNodeModulesDirectory) === false;
		if( !checkDirectory ) filename = Path.dirname(filename) + Path.sep + Path.basename(filename, extension);

		var clientModule = clientNodeModulesDirectory + Path.sep + this.moduleDirName + Path.sep + filename;
		var sharedModule = sharedNodeModulesDirectory + Path.sep + this.moduleDirName + Path.sep + filename;
		
		function searchFile(filePath, fn){
			FS.stat(filePath, function(error){
				if( error ){
					fn();
				}
				else{
					fn(filePath);
				}
			});
		}

		function startsWith(str){
			var i = 1, j = arguments.length;
			for(;i<j;i++){
				if( str.startsWith(arguments[i]) ) return true;
			}
			return false;
		}

		function searchModule(modulePath, fail){
			searchFile(modulePath + '.js', function(validPath){
				if( validPath ){
					return callback.call(bind, validPath);
				}

				if( checkDirectory ){
					return searchFile(modulePath + Path.sep + 'index.js', function(validPath){
						if( validPath ){
							return callback.call(bind, validPath);
						}
						else{
							fail();
						}				
					});
				}

				fail();
			});
		}

		searchModule(clientModule, function(){
			if( checkNodeModules ){
				searchModule(sharedModule, function(){
					callback.call(bind);
				});
			}
			else{
				callback.call(bind);
			}			
		});

	},

	sendModule: function(path){
		this.resolveModule(path, function(modulePath){
			if( modulePath ){
				this.sendFileModule(modulePath);
			}
			else{
				this.send(404);
			}
		});
	}
};
