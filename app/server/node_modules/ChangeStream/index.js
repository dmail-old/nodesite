var ComputedStream = require('computedStream');
var CompositeStream = ComputedStream.extend({
	decoders: require('./decoders'),
	encoders: require('./encoders'),
	converters: require('./converters'),
	deconverters: require('./deconverters'),
	
	encoding: 'identity', // encoding used to encode & decode
	fromEncoding: 'indentity', // source encoding
	toEncoding: 'identity', // output encoding

	charset: 'utf8', // charset used to convert & deconvert
	fromCharset: 'utf8', // source charset 
	toCharset: 'utf8', // output charset

	init: function(){
		
	},

	decode: function(encoding){
		if( encoding != this.encoding ){
			if( encoding in this.decoders ){
				this.chain(this.decoders[encoding].call(this));
			}
			else{
				throw new Error('cannot decode ' + encoding );
			}
		}
	},

	encode: function(encoding){
		if( encoding != this.encoding ){
			if( encoding in this.encoders ){
				this.chain(this.encoders[encoding].call(this));
			}
			else{
				throw new Error('cannot encode ' + encoding);
			}
		}
	},

	deconvert: function(charset){
		if( charset != this.charset ){
			if( charset in this.deconverters ){
				this.chain(this.deconverters[charset].call(this));
			}
			else{
				throw new Error('cannot deconvert  ' + charset);
			}
		}
	},

	convert: function(charset){
		if( charset != this.charset ){
			if( charset in this.converters ){
				this.chain(this.converters[charset].call(this));
			}
			else{
				throw new Error('cannot convert  ' + charset);
			}
		}
	},	

	_resolve: function(){
		if( this.fromEncoding != this.toEncoding ){
			this.decode(this.fromEncoding);
			this.encode(this.toEncoding);
		}

		if( this.fromCharset != this.toCharset ){
			this.deconvert(this.fromCharset);
			this.convert(this.toCharset);
		}

		return ComputedStream._resolve.call(this);
	}
});

module.exports = CompositeStream;