var ansi = require('ansi');
var Logger = {
	logger: console,

	getLogLevel: function(){
		var status = this.statusCode, level;

		if( status >= 500 ){
			level = 'error';
		}
		else if( status >= 400 ){
			level = 'warn';
		}
		else{
			level = 'info';
		}

		return level;	
	},

	getStatusStyle: function(){
		var status = this.statusCode;

		if( status >= 500 ){
			return 'red';
		}
		if( status >= 400 ){
			return 'yellow';
		}
		if( status >= 300 ){
			return 'cyan';
		}
		if( status >= 200 ){
			return 'green';
		}		
		return 'inherit';
	},

	getLogMessage: function(){
		var response = this, request = response.request, message = '';

		if( request.user ){
			message+= '[' + request.user.name + '] ';
		}

		message+= ansi.magenta(request.method);
		message+= ' ' + ansi.setStyle(response.statusCode, this.getStatusStyle());
		message+= ' ' + ansi.magenta(request.url.pathname);

		// request.args n'existe pas puisque c'est l'objet FileHandler qui à cette info
		if( request.args ){
			message+= ' ' + ansi.grey(request.args);
		}

		if( response.hasHeader('x-response-time') ){
			message+= ' ' + ansi.grey(response.getHeader('x-response-time') + 'ms');
		}

		return message;
	}
};

module.exports = {
	response: Logger,

	handle: function(router){

		var response = router.response;
		var buffers = [];

		response.on('write', function(chunk, encoding){
			if( response.logBody ){
				if( typeof chunk == 'string' ){
					chunk = new Buffer(chunk, encoding);
				}
				buffers.push(chunk);
			}
		});
		
		// lorsque la requête est terminée, on la log
		// 'finish' c'est lorsque tout à été écrit (sinon x-response-time serait faussement court)
		response.on('finish', function(){
			var level = response.getLogLevel(), message = response.getLogMessage();

			response.logger.log(level, message);

			if( response.logBody ){
				response.logger.log(Buffer.concat(buffers));
			}
		});

		router.next();
	},

	use: function(router, args){
		var logger = args[0];

		if( logger ) router.Response.logger = logger;
	}
};