var proto = require('proto');
var debug = require('debug');

var File = proto.extend(require('./File'), {
	fileSystem: require('Router').prototype.RequestHandler.prototype.fileSystem
});
//File.prototype.aliases.push(require('./GzipAlias'));

module.exports = {
	name: 'file',
	requires: 'requestNegotiation',

	response: {
		modifiedSinceHeaderName: 'if-modified-since',

		createFilePromise: function(path){
			var file = new File(path);

			var modifiedSince = this.request.getHeader(this.modifiedSinceHeaderName);
			if( typeof modifiedSince === 'string' ){
				try{
					file.modifiedSince = new Date(modifiedSince);
				}
				catch(e){
					console.warn('bad if-modified-since header value');
				}
			}
			file.acceptGzip = this.request.accept('encoding', 'gzip');

			return file.createPromise();
		},

		sendFile: function(path){
			this.send(this.createFilePromise(path));
		}
	},

	use: function(router, path){
		router.RequestHandler.prototype.filePath = path;
	},

	// this here is router not FileHandler
	handle: function(request, response, handler){
		if( request.is('head', 'get') ){
			return response.createFilePromise(handler.filePath + request.url.pathname);
		}
	}
};