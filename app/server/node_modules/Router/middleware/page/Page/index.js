var Page = {
	Path: require('path'),
	Access: require('../Access'),
	Template: require('../Template'),
	
	path: null,
	module: null,
	handler: null,
	args: null,
	access: null,	

	init: function(path){
		this.path = path;
	},

	getHandler: function(module){
		var handler;

		// accept all method
		if( typeof module == 'function' ){
			handler = module;
		}
		else if( typeof module == 'object' ){	
			// accept all method
			if( '*' in module ){
				handler = module['*'];
			}
			else if( this.request.method in module ){
				handler = module[this.request.method];
			}

			if( typeof handler == 'object' ){
				// faudrais vérifier si l'url correspond au clé de l'objet, si oui on apelle les fonction en valeur
				// sauf que c'est surement une feature pas si utile que ça, on fait pas ça pour le moment
				handler = null;
			}
		}

		return 
	},

	getArguments: function(handler){
		var request = this.request, args, params;

		if( Array.isArray(request.bodyParams) ){
			args = request.bodyParams;
		}
		else{
			if( params == null ){
				args = [];
			}
			else if( Array.isArray(params) ){
				args = params;
			}
			else if( typeof params == 'object' ){
				args = [];
				if( typeof handler == 'function' ){
					var names = Function.argumentNames(handler), i = 0, j = names.length - 1, name;

					for(;i<j;i++){
						name = names[i];
						args.push(params[name]);
					}
				}
			}
			else{
				args = [];
			}
		}

		return args;
	},

	createRouteNotFoundError: function(){
		var error = new Error();
		error.code = 'ROUTE_NOT_FOUND';
		return error;
	},

	createArgumentsLengthError: function(){
		var error = new Error();
		error.code = 'ARGUMENTS_LENGTH_ERROR';
		return error;
	},

	compile: function(){
		var module, generator, bind;

		this.module = module = require(this.path);
		this.handler = handler = this.getHandler();
		
		if( typeof handler == 'function' ){
			this.args = this.getArguments(handler);

			if( this.args.length != (handler.length - 1) ){
				throw this.createArgumentsLengthError();
			}

			this.access = this.Access.new(this.name);

			// this request has no right to call this page
			if( this.access.has(this.args) === false ){
				throw this.access.error;
			}
		}
		else{
			throw this.createRouteNotFoundError();
		}
	},

	generate: function(callback){
		this.callback = callback;

		process.nextTick(function(){

			try{
				this.handler.apply(this.module, [this].concat(this.args));
			}
			catch(e){			
				callback(e);
			}

		}.bind(this));		
	},

	// for a page in 'folder/page.page', search for 'folder/html/page.html'
	getTemplatePath: function(path){
		return this.Path.join(this.Path.dirname(path), 'html', this.Path.basename(path, '.page'), '.html');
	},

	createTemplate: function(path){
		if( arguments.length === 0 ) path = this.getTemplatePath(this.path);
		return this.Template.new(path);
	},

	send: function(data){
		if( typeof data == 'object' ){
			var template;

			if( this.Template.isPrototypeOf(data) ){
				template = data;
			}
			else{
				// createTemplate ne doit pas échouer si le fichier n'existe pas
				// si pas de template pour cette page on envoit data tel quel
				template = this.createTemplate();
				template.render(data);
			}

			data = template;
		}

		this.callback.call(this, data);
	}
};

module.exports = Page;