/*

MORE: 

getArguments: faudrait vérifier à la manière que global.applyScript la longeur des arguments passées / au handler


module.exports = function(page){
	// gère toute les requêtes faite à cette page, this vaut function
};

module.exports = {
	'GET': function(){
		// gère toute les requête GET, this vaut module.exports
	},

	'POST': function(){
		// gère les requête POST
	},

	'*': function(){
		// gère les autres requête
	}
}

module.exports = {
	'GET': {
		'{id}/edit': function(page, id){
			
		},

		'{id}/delete': function(page, id){
				
		},

		'*': function(page){
	
		}
	}
}

*/

var Page = {
	Path: require('path'),
	Access: require('./Access'),
	Template: require('./Template'),
	
	path: null,
	module: null,
	args: null,
	access: null,

	init: function(path){
		this.path = path;
	},

	createTemplate: function(path){
		if( arguments.length === 0  ){
			// for a page in 'folder/page.page', search for 'folder/html/page.html'
			path = this.Path.join(this.Path.dirname(this.path), 'html', this.Path.basename(this.path, '.page'), '.html');
		}
		return this.Template.new(path);
	},

	getModule: function(){
		var module;

		try{
			module = require(this.path);
		}
		catch(e){
			module = e;
		}

		return module;
	},

	getArguments: function(handler){
		var request = this.request, args, params;

		if( Array.isArray(request.bodyParams) ){
			args = request.bodyParams;
		}
		else{
			// j'ai passé du json comme paramètre, cela prévaut sur queryString
			if( params.json ){
				params = params.json;
			}
			else{
				params = request.params;
			}

			if( params == null ){
				args = [];
			}
			else if( Array.isArray(params) ){
				args = params;
			}
			else if( typeof params == 'object' ){
				args = [];
				if( typeof handler == 'function' ){
					var names = Function.argumentNames(handler), i = 0, j = names.length - 1, name;

					for(;i<j;i++){
						name = names[i];
						args.push(params[name]);
					}
				}
			}
			else{
				args = [];
			}
		}

		return args;
	},

	send: function(data){
		if( typeof data == 'object' ){
			var template;

			if( this.Template.isPrototypeOf(data) ){
				template = data;
			}
			else{
				// createTemplate ne doit pas échouer si le fichier n'existe pas
				// si pas de template pour cette page on envoit data tel quel
				template = this.createTemplate();
				template.render(data);
			}

			data = template;
		}

		this.callback.call(this, null, data);
	},

	compile: function(callback){
		this.module = this.getModule();
		this.callback = callback;

		var module = this.module, handler, bind;

		// page doesn't exists
		if( this.module instanceof Error ){	
			return callback.call(this, this.module);
		}

		// accept all method
		if( typeof module == 'function' ){
			handler = module;
			bind = module;
		}
		else if( typeof module == 'object' ){	
			// accept all method
			if( '*' in module ){
				handler = module['*'];
				bind = module;
			}
			else if( this.request.method in module ){
				handler = module[this.request.method];
				bind = module;
			}

			if( typeof handler == 'object' ){
				// faudrais vérifier si l'url correspond au clé de l'objet, si oui on apelle les fonction en valeur
				// sauf que c'est surement une feature pas si utile que ça, on fait pas ça pour le moment
				handler = null;
			}
		}

		if( typeof handler == 'function' ){
			this.args = this.getArguments(handler);
			this.access = this.Access.new(this.name);

			// this request has no right to call this page
			if( this.access.has(this.args) === false ){
				return callback.call(this, this.access.error);
			}

			try{
				handler.apply(bind, [this].concat(this.args));
			}
			catch(e){
				callback.call(this, e);
			}
		}
		else{
			var error = new Error();
			error.code = 'NO_ROUTE';
			callback.call(this, error);
		}
	}
};

module.exports = {
	response: {
		sendPage: function(path){
			var page = Page.new(path);

			page.request = this.request;
			page.response = this;

			page.compile(function(error, result){
				if( error ){
					// page not found
					if( error.code == 'MODULE_NOT_FOUND' ){
						this.response.populate(404);
					}
					// not implemented
					else if( error.code == 'NO_ROUTE' ){
						this.response.populate(501);
					}
					// an error (authorization error, syntax error evaluating page sourcen or called internally in page)
					else{
						this.response.error(error);
					}
				}
				else{
					// default text/html
					if( false === this.response.hasHeader('content-type') ){
						this.response.setHeader('content-type', 'text/html');
					}
					this.response.writeBody(result);
					this.response.end();
				}
			});
		}
	},

	Resolver: require('./Resolver'),

	handle: function(router){
		var resolver = this.Resolver.new(router.request.url.pathname, global.CLIENT_PATH);

		resolver.resolve(function(error, filename){
			if( filename ){
				// redirect all non ajax page request to app.page
				if( router.request.isAjax() === false ){
					filename = 'app.page';
				}
				router.response.sendPage(global.CLIENT_PATH + '/' + filename);
			}
			else{
				router.next();
			}
		});
	}
};