/*

MORE: 

getArguments: faudrait vérifier à la manière que global.applyScript la longeur des arguments passées / au handler

*/

module.exports = {
	Page: require('./Page'),

	response: {
		sendPage: function(path){
			var page = this.router.Page.new(path);

			page.request = this.request;
			page.response = this;

			try{
				page.compile();
			}
			catch(e){
				// page not found
				if( e.code == 'MODULE_NOT_FOUND' ){
					this.response.populate(404);
				}
				// not implemented
				else if( e.code == 'ROUTE_NOT_FOUND' ){
					this.response.populate(501);
				}
				// an error (authorization error, syntax error evaluating page sourcen or called internally in page)
				else{
					this.response.error(e);
				}
				return;
			}
			
			page.generate(function(data){
				if( data instanceof Error ){
					this.error(data);
				}
				else{
					// default text/html
					if( false === this.response.hasHeader('content-type') ){
						this.response.setHeader('content-type', 'text/html');
					}
					this.writeBody(data);
					this.end();
				}
			}.bind(this));
		}
	},

	Resolver: require('./PageResolver'),

	handle: function(router){
		var resolver = this.Resolver.new(router.request.url.pathname, global.CLIENT_PATH);

		resolver.resolve(function(error, filename){
			if( filename ){
				// redirect all non ajax page request to app.page
				if( router.request.isAjax() === false ){
					filename = 'app.page';
				}
				router.response.sendPage(global.CLIENT_PATH + '/' + filename);
			}
			else{
				router.next();
			}
		});
	}
};