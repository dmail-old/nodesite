/*

TODO:

getContent devrait Ãªtre asynchrone

*/

require('core/string');
var proto = require('proto');

var Template = proto.create({
	fileSystem: require('fs'),
	content: null,
	result: null,

	HTMLTemplate: require('./MustachePercentTemplate'),
	ScriptTemplate: require('./ScriptTemplate'),

	// metas utilisant l'attribut "http-equiv"
	http_equiv: [
		'content-language',
		'content-type',
		'refresh',
		'pragma',
		'expires',
		'cache-control',
		'cache'
	],
	metaTemplate: '<meta {attr}="{name}" content="{value}" />',
	charsetMetaTemplate: '<meta charset="{value}" />',
	tags: {
		favicon: '<link href="#" type="image/x-icon" rel="shortcut icon"/>',
		style: '<link href="#" type="text/css" rel="stylesheet" />',
		script: '<script src="#" type="text/javascript"></script>',
		module: '<script src="#" type="text/module"></script>'
	},

	constructor: function(path){
		this.path = path;
	},

	setTagUrl: function(tag, path){
		var url = require('url').format({
			protocol: config.protocol,
			host: config.host + (config.port ? ':' + config.port : ''),
			pathname: path
		});

		return tag.replace('#', url);
	},

	renderTag: function(type, name){
		return this.setTagUrl(this.tags[type], name);
	},

	renderTags: function(type, names){
		var output = [];

		names.forEach(function(name){
			output.push(this.renderTag(type, name));
		}, this);

		return output.join('\n\t');
	},

	renderMetaTag: function(name, value){
		name = name.toLowerCase();
		var attr = 'name', meta;

		if( this.http_equiv.indexOf(name) != -1 ){
			attr = 'http-equiv';
			name = name.capitalize();
		}

		if( name == 'charset' ){
			return this.charsetMetaTemplate.render({
				value: value
			});
		}

		return this.metaTemplate.render({
			attr: attr,
			name: name,
			value: value
		});
	},

	renderMetaTags: function(metas){
		var output = [], name;

		for(name in metas){
			output.push(this.renderMetaTag(name, metas[name]));
		}

		return output.join('\n\t');
	},

	getContent: function(){
		this.content = this.fileSystem.readFileSync(this.path);
		this.content = this.content.toString(config.charset);
	},

	renderHTML: function(html, params){
		return this.HTMLTemplate.new(html).render(params);
	},

	renderScriptContent: function(script, params){
		return this.ScriptTemplate.new(script).render(params);
	},

	scriptReplaceRegexp: /(<script[^>]*>)([\s\S]*?)(<\/script>)/i,
	renderScript: function(script, params){
		return script.replace(this.scriptReplaceRegexp, function(match, open, content, close, offset, string){
			open = this.renderHTML(open, params);
			content = this.renderScriptContent(content, params);
			close = close;
			return open + content + close;
		}.bind(this));
	},		

	scriptSplitRegexp: /(<script[^>]*>[\s\S]*?<\/script>)/gi,
	render: function(params){
		this.getContent();

		var content = this.content;
		
		// split the file into parts: "foo<script>alert('ok');</script>bar"
		// will output parts = ["foo", "<script>alert('ok');</script>", "bar"]
		var parts = content.split(this.scriptSplitRegexp);

		// for each part replace "{%%}" with params
		parts = parts.map(function(part, index){
			if( index % 2 === 0 ){
				return this.renderHTML(part, params);
			}
			else{
				return this.renderScript(part, params);
			}
		}, this);

		this.result = parts.join('');

		return this.result;
	},

	toString: function(){
		return this.result;
	}
});

module.exports = Template;