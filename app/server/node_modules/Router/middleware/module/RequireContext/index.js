/*

*/

var proto = require('proto');
var Resolver = require('../RequireResolver');
require('String.prototype.startsWith');

var RequireContext = proto.create({
	Resolver: Resolver,
	clientFolder: null,
	cache: {},
	resolvedPaths : null,
	rootFolder: null,

	constructor: function(filename){
		if( filename in this.cache ){
			return this.cache[filename];
		}
		this.cache[filename] = this;
		this.filename = filename;
		this.resolvedPaths = {};
	},

	isClientReadable: function(){
		if( this.clientFolder && this.filename.startsWith(this.clientFolder) ) return true;
		if( this.meta && this.meta.clientReadable === true ) return true;
		return false;
	},

	resolve: function(path){
		if( path in this.resolvedPaths ) return Promise.resolve(this.resolvedPaths[path].path);

		var resolver = new this.Resolver(this.filename, path, this.rootFolder);
		var p = resolver.resolve();

		return p.then(function(resolvedPath){
			this.resolvedPaths[path] = {
				path: resolvedPath,
				meta: resolver.packageBody
			};
			return resolvedPath;
		}.bind(this));
	},

	toJSON: function(){
		return {
			filename: this.filename,
			resolvedPaths: this.resolvedPaths
		};
	}
});

module.exports = RequireContext;
