/*
https://github.com/substack/node-resolve/tree/master/lib 
http://nodejs.org/api/modules.html#modules_all_together 
*/

require('promise-extra');
var proto = require('proto');

var ModuleResolver = proto.create({
	Path: require('path'),
	fileSystem: require('fs'),

	folderName: 'node_modules',
	index: 'index',
	package: 'package.json',
	extension: '.js',
	rootFolder: process.cwd(),

	requiredPath: null, // path required by a module
	modulePath: null, // module filename
	packageBody: null,

	constructor: function(requiredPath, modulePath){
		this.requiredPath = requiredPath;
		this.modulePath = modulePath;
		this.rootModuleFolder = this.rootFolder + this.Path.sep + this.folderName;
	},

	resolvePath: function(path){
		return this.Path.resolve(this.rootFolder, path);
	},

	relativePath: function(path){
		return this.Path.relative(this.rootFolder, path);
	},

	loadAsFile: function(path){
		// get file stat
		return Promise.from(function(complete){
			this.fileSystem.stat(path, complete);
		}, this).then(
			function(stat){
				// it's a file, return the path
				if( stat.isFile() || stat.isFIFO() ) return path;
				// it's something else reject
				throw new Error('not a file');
			}.bind(this),
			function(error){
				// file not found, try to find with extension
				if( error.code === 'ENOENT' && this.Path.extname(path) != this.extension ){
					return this.loadAsFile(path + this.extension);
				}
				return Promise.reject(error);
			}.bind(this)
		);
	},

	loadAsDirectory: function(path){
		var packagePath = path + this.Path.sep + this.package;
		var indexPath = path + this.Path.sep + this.index;

		// read package.json
		return Promise.from(function(complete){
			this.fileSystem.readFile(packagePath, complete);
		}, this).then(
			function(json){
				var body = JSON.parse(json);
				this.packageBody = body;
				if( body.main ) return this.load(this.Path.resolve(path, body.main));
				return this.loadAsFile(indexPath);
			}.bind(this),
			// no package.json, load index.js
			function(){
				return this.loadAsFile(indexPath);
			}.bind(this)
		);		
	},

	load: function(path){
		return Promise.first([
			this.loadAsFile,
			this.loadAsDirectory
		], this, path);
	},

	// http://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders
	nodeModulePaths: function(start){
		/*
		1. let PARTS = path split(START)
		2. let ROOT = index of first instance of "node_modules" in PARTS, or 0
		3. let I = count of PARTS - 1
		4. let DIRS = []
		5. while I > ROOT,
			a. if PARTS[I] = "node_modules" CONTINUE
			c. DIR = path join(PARTS[0 .. I] + "node_modules")
			b. DIRS = DIRS + DIR
			c. let I = I - 1
		6. return DIRS
		*/

		var Path = this.Path;
		var parts = start.split('/'), dirs, dir, i, root, part;

		root = parts.indexOf(this.folderName);
		if( root == -1 ) root = 0;

		i = parts.length - 1;
		dirs = [];
		while( i > root ){
			part = parts.pop();
			if( part == this.folderName ) continue;
			dir = Path.join(Path.join.apply(Path, parts), this.folderName);
			dirs.push(dir);

			// ne dois pas monter plus haut que root
			if( dir == this.rootModuleFolder ) break;

			i--;
		}

		return dirs;
	},

	loadNodeModules: function(path, start){
		/*
		LOAD_NODE_MODULES(X, START)
		1. let DIRS=NODE_MODULES_PATHS(START)
		2. for each DIR in DIRS:
			a. LOAD_AS_FILE(DIR/X)
			b. LOAD_AS_DIRECTORY(DIR/X)
		*/

		var dirs = this.nodeModulePaths(start);

		return Promise.mapFirst(dirs, function(directory){
			return this.load(directory + this.Path.sep + path);
		}, this);
	},

	resolve: function(){
		/*
		require(X) from module at path Y
		1. If X is a core module,
			a. return the core module
			b. STOP
		2. If X begins with './' or '/' or '../'
			a. LOAD_AS_FILE(Y + X)
			b. LOAD_AS_DIRECTORY(Y + X)
		3. LOAD_NODE_MODULES(X, dirname(Y))
		4. THROW "not found"
		*/

		var X = this.requiredPath;
		var Y = this.modulePath;

		function cb(e, path){
			// si il s'agit d'une demande client et que le module est plus haut que app/node_modules
			// il doit faire partie d'une 'whitelist' de module qu'on envoie au client

		}

		if( X[0] == '/' || X.slice(0,2) == './' || X.slice(0,3) == '../' ){
			return this.load(this.Path.resolve(Y, X));
		}
		return this.loadNodeModules(X, this.Path.dirname(Y));
	}
});

module.exports = ModuleResolver;
