var RequireContext = require('./RequireContext');

var headers = {
	module: 'x-module',
	resolve: 'x-resolve',
	resolveParent: 'x-resolve-parent'
};

module.exports = {
	RequireContext: RequireContext,

	handle: function(request, response, handler){
		var Path = require('path'), requireContext;

		if( request.hasHeader(headers.resolve) ){
			path = request.getHeader(headers.resolveParent);
			path = Path.resolve(path, global.CLIENT_PATH);

			requireContext = new RequireContext(path);
			
			requireContext.resolve(request.getHeader(headers.resolve)).then(
				function(filename){
					console.log(filename, requireContext)

					if( requireContext.isClientReadable() ){						
						var relativePath = Path.relative(global.CLIENT_PATH, filename);
						relativePath = relativePath.replace(/\\/g, '/');
						response.end(relativePath);
					}
					else{
						response.statusCode = 503; // unauthorized
						response.end();
					}
				},
				function(error){
					if( error && error.code === 'MODULE_NOT_FOUND' ){
						response.statusCode = 404;
						response.end();
					}
					else{
						handler.next(error);
					}
				}
			);
		}
		else if( request.hasHeader(headers.module) ){
			path = request.getHeader(headers.module);
			var modulePath = Path.resolve(global.CLIENT_PATH, path);

			/*
			ici ça n'a plus rien à voir avec requireContext, ou alors on pars du principe qu'on est dans /
			quoiqu'il en soit l'idée ici c'est de récup d'éventuelle info sur ce chemin
			ptet qu'on connait déjà où se situe ce module
			on peut surement s'inspirer de nodejs là dessus
			*/
			
			if( true /*|| isClientReadable()*/ ){
				response.sendFile(modulePath);
			}
			else{
				response.statusCode = 503; // unauthorized
				response.end();
			}
		}
		else{
			handler.next();
		}
	},

	use: function(router, options){
		if( options ){
			if( options.rootFolder ){
				RequireContext.prototype.rootFolder = options.rootFolder;
			}
			if( options.clientFolder ){
				RequireContext.prototype.publicFolder = options.clientFolder;
			}
		}		
	}
};