/*

*/

var Module = {
	ModulePathResolver: require('./Resolver'),
	Path: require('path'),

	cache: {},
	new: function(filename, parent){
		// get filename using clientPath
		filename = this.Path.resolve(global.CLIENT_PATH, filename);

		var module;

		if( filename in this.cache ){
			module = this.cache[filename];
		}
		else{
			module = Object.prototype.new.call(this, filename, parent);
			this.cache[filename] = module;
		}

		if( parent ){
			parent.children.push(module);
		}

		return module;
	},

	init: function(filename, parent){
		this.filename = filename;
		this.parent = parent;
		this.resolvedPaths = {};
		this.children = [];
	},

	createChild: function(filename){
		return Module.new(filename, this);
	},

	resolve: function(path, fn, bind){
		if( path in this.resolvedPaths ){
			process.nextTick(function(){
				fn.call(bind, null, this.resolvedPaths[path]);
			}.bind(this));
		}
		else{
			var resolver = new this.ModulePathResolver(this.filename, path);

			resolver.resolve(function(error, filename){
				if( error ){
					fn.call(bind, error);
				}
				else if( filename ){
					// make filename relative to the client path
					filename = this.Path.relative(global.CLIENT_PATH, filename);

					this.resolvedPaths[path] = filename;
					this.createChild(filename);
					fn.call(bind, filename);
				}
				else{					
					fn.call(bind, new Error('not found'));
				}
			}.bind(this));
		}
	},

	toJSON: function(){
		return {
			filename: this.filename,
			resolvedPaths: this.resolvedPaths,
			children: this.children
		};
	}
};

var headers = {
	module: 'x-module',
	resolve: 'x-resolve',
	resolveParent: 'x-resolve-parent'
};

module.exports = {
	Module: Module,

	handle: function(router){
		var Path = require('path'), filename;

		if( router.request.hasHeader(headers.resolve) ){
			var module = Module.new(router.request.getHeader(headers.resolveParent));
			
			module.resolve(router.request.getHeader(headers.resolve), function(error, filename){
				if( error ){
					router.response.error(error);
				}
				else{
					router.response.end(filename);
				}
			}, router);
		}
		else if( router.request.hasHeader(headers.module) ){
			Module.new(router.request.getHeader(headers.module));
			router.response.sendFile(Module.filename);
		}		
		else{
			router.next();
		}
	}
};