/*

*/

var proto = require('proto');
var ModuleResolver = require('../ModuleResolver');
require('String.prototype.startsWith');

var Module = proto.create({
	ModuleResolver: ModuleResolver,
	clientFolder: null,
	cache: {},
	resolvedPaths : null,
	meta: null, // data from package.json file

	constructor: function(filename, parent){
		filename = ModuleResolver.prototype.resolvePath(filename);

		if( filename in this.cache ){
			return this.cache[filename];
		}
		
		this.cache[filename] = this;
		this.filename = filename;
		this.parent = parent;
		this.resolvedPaths = {};
		this.children = [];

		if( parent ){
			parent.children.push(module);
		}
	},

	createChild: function(filename){
		return new Module(filename, this);
	},

	isClientReadable: function(){
		if( this.clientFolder && this.filename.startsWith(this.clientFolder) ) return true;
		if( this.meta && this.meta.clientReadable === true ) return true;
		return false;
	},

	resolve: function(path){
		if( path in this.resolvedPaths ) return Promise.resolve(this.resolvedPaths[path]);

		var resolver = new ModuleResolver(this.filename, path);
		var p = resolver.resolve();

		return p.then(function(resolvedPath){
			if( !resolvedPath ) throw new Error('not found');

			this.meta = resolver.packageBody;
			// make filename relative to the root path
			var filename = resolver.relativePath(resolvedPath);

			this.resolvedPaths[path] = filename;
			this.createChild(filename);
		}.bind(this));
	},

	toJSON: function(){
		return {
			filename: this.filename,
			resolvedPaths: this.resolvedPaths,
			children: this.children
		};
	}
});

module.exports = Module;
