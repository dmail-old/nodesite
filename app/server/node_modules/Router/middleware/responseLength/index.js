var LengthGenerator = {
	length: 0,

	ondata: function(chunk, encoding){
		this.length+= Buffer.isBuffer(chunk) ? chunk.length : Buffer.byteLength(chunk, encoding);
	},

	onend: function(){
		this.response.length = this.length;
	}
};

module.exports = {
	response: {
		autoLength: true, // computeLength from body
		generatingLength: false,

		get length(){
			return this.hasHeader('content-length') ? parseInt(this.getHeader('content-length'), 10) : 0;
		},

		set length(length){
			this.setHeader('content-length', length);
		},

		generateLengthHeader: function(){
			if( false === this.hasHeader('content-length') && this.autoLength ){
				this.generatingLength = true;
				this.wait(LengthGenerator);
			}
		}	
	},

	handle: function(request, response, handler){
		response.on('beforeSendingHeaders', response.generateLengthHeader);
		handler.next();
	}
};