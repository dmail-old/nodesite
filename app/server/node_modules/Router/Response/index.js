/*

helper to manipulate the serverResponse

inspired from
https://github.com/mcavage/node-restify/blob/master/lib/response.js

node response source : 
https://github.com/joyent/node/blob/master/lib/_http_server.js

HOW TO SEND STATUS

response.statusCode = 200;

HOW TO SEND STATUS MESSAGE

response.statusMessage = 'ok'; 

HOW TO SEND BODY (prefer A or B)

A) readableStream.pipe(response);
B) response.end([String | Buffer], [encoding], [callback]);
C) readableStream.pipe(response, {end: false}); response.end(); 
D) response.write(String | Buffer, [encoding], [callback]); response.end();

------------- WITH CONTENT NEGOTIATION MIDDLEWARE -------------------

HOW TO SEND LENGTH

A) response.length = 10; // never touched
B) response.autoLength = true; // computed from the body

HOW TO SEND ENCODING

A) response.encoding = 'gzip'; // force gzip (can throw error)
B) response.negotiateEncoding = true; // use preferred encoding (can throw if no encoding is supported)

*/

var util = require('Stream-util');
var http = require('http');
var proto = require('proto');
var StringTemplate  = require('StringTemplate');
var ServerResponse = http.ServerResponse.prototype;
var Emitter = require('Emitter');

var Response = Emitter.create({
	serverResponse: null,
	router: null,
	request: null,
	writeCalls: null,
	waitCount: 0,

	init: function(response, router){
		Emitter.init.call(this);
		this.serverResponse = response;
		this.router = router;
		this.request = router.request;

		response.write = this.responseWrite.bind(this);
		response.end = this.responseEnd.bind(this);
		response.on('error', this.error.bind(this));

		/*
		node.js does this automatically
		this.on('beforeSendingHeaders', function(){
			if( this.hasHeader('content-length') === false ){
				// there is a body without content-length header, tell that to the browser
				this.setHeader('transfer-encoding', 'chunked');
				this.setHeader('accept-ranges', 'bytes');
			}
		});
		*/
	},

	responseWrite: function(chunk, encoding){
		if( !this.headersSent ){
			// IRRELEVANT?? AJAX request need a 200 statusCode to read the response
			if( this.statusCode < 200 && this.statusCode >= 400 && this.request.isAjax() ){
				this.setHeader(this.router.HEADERS.STATUS_CODE, this.statusCode); // error status are put in a header
				this.statusCode = 200;
			}

			this.emit('beforeSendingHeaders');
		}

		this.emit('write', chunk, encoding);
		if( this.writeCalls ){
			this.writeCalls.push(arguments);
			return false;
		}

		return ServerResponse.write.apply(this.serverResponse, arguments);
	},

	responseEnd: function(chunk, encoding){
		if( arguments.length !== 0 ){
			this.write(chunk, encoding);
		}

		if( this.writeCalls ){
			this.emit('end');
			return false;
		}

		return ServerResponse.end.call(this.serverResponse);
	},

	wait: function(fn, bind){
		if( !this.writeCalls ){
			this.writeCalls = [];
		}

		this.waitCount++;
		fn.call(bind, function(){
			// ce qu'on devait faire est terminé on peut appelé end
			this.waitCount--;
			if( this.waitCount === 0 ){
				this.writeCalls.forEach(function(args){
					ServerResponse.write.apply(this, args);
				}, this);
				ServerResponse.end.call(this);
			}
		}.bind(this));
	},

	get headers(){
		return this.serverResponse._headers;
	},

	set headers(object){
		for(var key in object){
			this.setHeader(key, object[key]);
		}
	},

	error: function(error){
		this.router.next(error);
	},

	next: function(error){
		this.router.next(error);
	},

	hasHeader: function(name){
		return typeof this.getHeader(name) != 'undefined';
	},

	send: function(status, chunk, encoding, callback){
		this.statusCode = status;
		return this.end(chunk, encoding, callback);
	}
});

// methods
['writeContinue', 'writeHead', 'setTimeout', 'setHeader',
'getHeader', 'removeHeader', /*'write',*/'addTrailers', 'end'].forEach(function(name){
	Response[name] = function(){
		return this.serverResponse[name].apply(this.serverResponse, arguments);
	};
});

// properties
['statusCode', 'headersSent', 'sendDate', 'statusMessage'].forEach(function(name){
	Object.defineProperty(Response, name, {
		get: function(){
			return this.serverResponse[name];
		},

		set: function(value){
			this.serverResponse[name] = value;
		}
	});
});

module.exports = Response;