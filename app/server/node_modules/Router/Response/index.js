/*

helper to manipulate the serverResponse

inspired from
https://github.com/mcavage/node-restify/blob/master/lib/response.js

node response source : 
https://github.com/joyent/node/blob/master/lib/_http_server.js

HOW TO SEND STATUS

response.statusCode = 200;

HOW TO SEND STATUS MESSAGE

response.statusMessage = 'ok'; 

HOW TO SEND BODY (prefer A or B)

A) readableStream.pipe(response); !! Ne marche pas response n'est pas un stream!
B) response.end([String | Buffer], [encoding], [callback]);
C) response.body = String | Buffer | ReadableStream; response.end();
C) readableStream.pipe(response, {end: false}); response.end(); 
D) response.write(String | Buffer, [encoding], [callback]); response.end();

------------- WITH CONTENT NEGOTIATION MIDDLEWARE -------------------

HOW TO SEND LENGTH

A) response.length = 10; // never touched
B) response.autoLength = true; // computed from the body

HOW TO SEND ENCODING

A) response.encoding = 'gzip'; // force gzip (can throw error)
B) response.negotiateEncoding = true; // use preferred encoding (can throw if no encoding is supported)

*/

var stream = require('stream');
var Emitter = require('Emitter');
var proto = require('proto');
var PassThrough = stream.PassThrough;

var Response = proto.extend(PassThrough, {
	ServerResponse: require('http').ServerResponse,
	serverResponse: null,
	request: null,
	body: null,
	bodyEncoding: null,

	constructor: function(serverResponse, options){
		PassThrough.call(this, options);
		this.serverResponse = serverResponse;
		this.pipe(this.serverResponse);

		this.on('beforeSendingHeaders', this.checkAjaxHeaders);

		/*
		node.js does this automatically
		this.on('beforeSendingHeaders', function(){
			if( this.hasHeader('content-length') === false ){
				// there is a body without content-length header, tell that to the browser
				this.setHeader('transfer-encoding', 'chunked');
				this.setHeader('accept-ranges', 'bytes');
			}
		});
		*/
	},

	checkAjaxHeaders: function(){
		// IRRELEVANT?? AJAX request need a 200 statusCode to read the response
		if( this.statusCode < 200 && this.statusCode >= 400 && this.request.isAjax() ){
			this.setHeader('x-status-code', this.statusCode); // error status are put in a header
			this.statusCode = 200;
		}
	},

	setHeaders: function(headers){
		for(var key in headers){
			this.setHeader(key, headers[key]);
		}
	},

	get headers(){
		return this.serverResponse._headers;
	},

	set headers(object){
		this.setHeaders(object);
	},

	error: function(error){
		this.emit('error', error);
	},

	hasHeader: function(name){
		return typeof this.getHeader(name) != 'undefined';
	},

	hasBody: function(){
		if( this.request.is('head') ){
			return false;
		}

		// https://github.com/joyent/node/blob/master/lib/_http_server.js#L205
		var statusCode = this.statusCode;
		if( statusCode === 204 || statusCode === 304 ){
			return false;
		}
		if( 100 <= statusCode && statusCode <= 199 ){
			return false;
		}

		return true;
	},

	prefetchers: null,
	dataBuffer: null,
	ondata: function(chunk, encoding){
		this.dataBuffer.push(arguments);
		this.prefetchers.forEach(function(prefetcher){
			prefetcher.ondata(chunk, encoding);
		});
	},

	onend: function(){
		this.prefetchers.forEach(function(prefetcher){
			prefetcher.onend();
		});

		this.prefetchers = null;

		this.dataBuffer.forEach(function(args){
			this.serverResponse.write.apply(this.serverResponse, args);
		}, this);

		this.dataBuffer = null;

		this.serverResponse.end();
	},

	prefetch: function(prefetcherPrototype){
		function Prefetcher(response){
			this.response = response;
			prefetcherPrototype.constructor.call(this);
		}

		Prefetcher.prototype = prefetcherPrototype;

		var prefetcher = new Prefetcher(this);

		if( this.prefetchers === null ){
			this.dataBuffer = [];
			this.prefetchers = [];

			this.unpipe(this.serverResponse);
			this.on('data', this.ondata);
			this.on('end', this.onend);
		}
		this.prefetchers.push(prefetcher);
	},

	pipeBody: function(body){
		return body.pipe(this);
	},

	writeBody: function(body, encoding){
		return this.write(body, encoding);
	},

	send: function(object){
		if( typeof object === 'number' ) object = {statusCode: object};

		if( Object(object) == object ){
			
			if( object.statusCode ) this.statusCode = object.statusCode;
			if( object.statusMessage ) this.statusMessage = object.statusMessage;
			if( object.headers ) this.setHeaders(object.headers);
			if( !this.headersSent ) this.emit('beforeSendingHeaders');

			if( object.hasOwnProperty('body') ){
				if( object.body instanceof stream.Readable ){
					this.pipeBody(object.body);
					return;
				}
				
				this.writeBody(object.body, object.bodyEncoding);
			}
		}

		return this.end();
	},

	getSourceObject: function(){
		var response = this.serverResponse;

		//response.write = this.ServerResponse.write;
		//response.end = this.ServerResponse.end;
		//response.removeListener('error', this.onerror);

		return response;
	}
});

// methods
['setTimeout', 'setHeader', 'getHeader', 'removeHeader'].forEach(function(name){
	proto.define(Response, name, function(){
		return this.serverResponse[name].apply(this.serverResponse, arguments);
	});
});

// properties
['statusCode', 'headersSent', 'sendDate', 'statusMessage', 'ended'].forEach(function(name){
	proto.defineProperty(Response, name, {
		get: function(){
			return this.serverResponse[name];
		},

		set: function(value){
			this.serverResponse[name] = value;
		}
	});
});

module.exports = Response;