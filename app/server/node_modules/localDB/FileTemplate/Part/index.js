/*

description: part of a file content

*/

var Part = {
	encoding: 'utf8',		// default encoding of buffer
	source: new Buffer(0),	// default source is now a buffer
	error: null,
	object: null,
	byte: null,

	init: function(buffer){
		this.buffer = buffer;
	},

	get buffer(){
		return this.source;
	},

	set buffer(buffer){
		this.source = this.prepareSource(buffer);
	},

	parse: function(string){
		throw new Error('unimplemented part.parse');
	},

	stringify: function(object){
		throw new Error('unimplemented part.stringify');
	},

	// source is converted to buffer
	prepareSource: function(source){
		var buffer = null;

		if( Buffer.isBuffer(source) ){
			this.object = this.parse(buffer.toString(this.encoding));
			buffer = source;
		}
		else if( typeof source == 'string' ){
			this.object = this.parse(source);
			buffer = new Buffer(source, this.encoding);
		}
		else if( typeof source == 'object' ){
			this.object = source;
			buffer = new Buffer(this.stringify(source), this.encoding);
		}

		return buffer;
	}
};

module.exports = Part;
