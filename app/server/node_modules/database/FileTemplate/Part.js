/*

description: part of a file content

*/

var Part = require('Splitter.Part').extend({
	encoding: 'utf8',		// default encoding of buffer
	buffer: new Buffer(0),	// part content as buffer
	object: null,			// part as object
	error: null,			// an error caused by prepareBuffer

	prepareBuffer: function(buffer){
		try{
			if( Buffer.isBuffer(buffer) ){		
				this.object = this.parse(buffer.toString(this.encoding));
			}
			else if( typeof buffer == 'object' ){
				this.object = buffer;
				buffer = new Buffer(this.stringify(this.object), this.encoding);				
			}
			else if( typeof buffer == 'string' ){
				this.object = this.parse(buffer);
				buffer = new Buffer(buffer, this.encoding);
			}
			else{
				throw new TypeError('Part.setBuffer expect buffer, string or object');
			}
		}
		catch(e){
			this.error = e;
		}

		return buffer;		
	},

	parse: function(string){
		throw new Error('unimplemented Part.parse');
	},

	stringify: function(object){
		throw new Error('unimplemented Part.stringify');
	},

	empty: function(){
		this.buffer = Part.buffer;
		this.object = null;
		return this;
	}
});

module.exports = Part;
