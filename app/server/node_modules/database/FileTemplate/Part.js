/*

description: part of a file content

*/

var Part = {
	byte: null,				// byte index where the part starts in the file content
	buffer: new Buffer(0),	// the part content as buffer
	parsed: null,			// the parsed result of buffer
	error: null,			// an error caused by setBuffer
	object: null,

	create: function(buffer, encoding){
		if( arguments.length > 0 ){
			this.setBuffer(buffer, encoding);
		}
	},

	setBuffer: function(buffer, encoding){
		this.error = null;

		if( Buffer.isBuffer(buffer) ){
			try{
				this.parsed = this.parse(buffer.toString(encoding));
			}
			catch(e){
				this.error = e;
			}
		}
		else if( typeof buffer == 'string' ){
			buffer = new Buffer(buffer, encoding);

			try{
				this.parsed = this.parse(buffer);
			}
			catch(e){
				this.error = e;
			}
		}
		else if( typeof buffer == 'object' ){
			this.parsed = buffer;
			
			try{
				buffer = this.stringify(buffer);
			}
			catch(e){
				this.error = e;
			}
		}
		else{
			this.error = new TypeError('Part.setBuffer expect buffer, string or object');
		}

		this.buffer = buffer;
	},

	parse: function(string){
		throw new Error('unimplemented Part.parse');
	},

	stringify: function(object){
		throw new Error('unimplemented Part.stringify');
	},

	setData: function(data){
		this.data = data;
	},

	empty: function(){
		this.buffer = Part.buffer;
		this.parsed = null;
		return this;
	},

	get item(){
		if( this.object ) return this.object;
		return this.object = this.toObject();
	},

	toObject: function(){
		return null;
	},

	toString: function(encoding){
		return this.buffer.toString(encoding);
	}
};

module.exports = Part;
