/* global ROOT_PATH, APP_PATH, SERVER_PATH, CLIENT_PATH */

//Error.stackTraceLimit = 20;

var Path = require('path');
global.ROOT_PATH = Path.resolve(process.cwd(), '../../');
global.APP_PATH = ROOT_PATH + Path.sep + 'app';
global.SERVER_PATH = APP_PATH + Path.sep + 'server';
global.CLIENT_PATH = APP_PATH + Path.sep + 'client';

require('@dmail/proto');
require('@dmail/object/define');
global.config = require(APP_PATH + Path.sep + 'config');
global.DEBUG = global.config.debug;

/*
Object.define(global, require('function'));
global.lang = global.loadLanguageDirectory(SERVER_PATH + '/lang/' + config.lang);
*/

var router = require('router').create({
	allowErrorTrace: config.debug
});

var logger = require('log/stream').create();

logger.registerStyles({
	'host': 'grey',
	'port': 'red'
});
logger.registerStyles({
	'version': 'yellow',
	'platform': 'blue',
	'path': 'magenta'
});

logger.info('node.js {version} on {platform}', process);

var server = {
	http: require('http'),
	config: global.config,
	logger: logger,
	router: router,

	emit: function(type){
		if( typeof process.send == 'function' ){
			process.send({
				type: type
			});
		}
	},

	onrequest: function(clientRequest, serverResponse){
		server.router.route(clientRequest, serverResponse);
	},

	onclientError: function(e){
		console.error(e.stack);
	},

	open: function(){
		this.connection = this.http.createServer();

		this.connection.on('request', this.onrequest);
		//this.connection.on('listening', this.onlistening);
		this.connection.on('clientError', this.onclientError);

		/*
		var socket = require('socket.io');
		var IO = socket.listen(this.server);

		IO.set('log level', 0);
		IO.set('authorization', this.authorize.bind(this));
		IO.sockets.on('connection', this.onClient.bind(this));
		*/
	},

	listen: function(port, host, callback){
		var connection = this.connection;

		function serverError(error){
			connection.removeListener('error', serverError);
			connection.removeListener('listen', serverListening);
			if( callback ) callback(error);
		}

		function serverListening(){
			connection.removeListener('error', serverError);
			connection.removeListener('listen', serverListening);
			if( callback ) callback();
		}

		connection.on('listening', serverListening);
		connection.on('error', serverError);
		connection.listen(port, host);
	},

	close: function(callback){
		this.connection.close(callback);
	},

	// lorsqu'une socket veut se connecter
	authorize: function(data, callback){
		callback(null, true);
	},

	onClient: function(socket){
		//new Client(socket);
	}
};

router.use('session');
router.use('logger', server.logger);
router.use('cors');
router.use('page');
router.use('file', global.CLIENT_PATH);
router.use('error');
router.use('helloworld');

module.exports = server;