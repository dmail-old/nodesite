/*

name: Object.cloning

provides:
	Object.setPairClone, Object.clone, Object.mergePair, Object.merge,
	RegExp.prototype.clone, Date.prototype.clone, Array.prototype.clone

*/


if( 'getOwnPropertyDescriptor' in Object ){

	function cloneProperty(key, object){
		if( object ){
			var descriptor = Object.getOwnPropertyDescriptor(object, key);
			if( 'value' in descriptor ) descriptor.value = cloneObject(descriptor.value);
			Object.defineProperty(this, key, descriptor);
		}
		else{
			this[key] = clone.cloneObject(object[key]);
		}
	}

}
else{

	function cloneProperty(key, object){
		this[key] = clone.cloneObject(object[key]);
	}

}

var property = require('property');

var clone = {
	cloneProperty: cloneProperty,

	cloneProperties: function(object){
		var clone = object;

		if( typeof object == 'object' && object != null ){
			if( typeof object.clone == 'function' ) clone = object.clone();
			else{
				clone = {};
				property.forEachOwn(object, clone.cloneProperty, clone);

				// only if es5
				if( !Object.isExtensible(object) ) Object.preventExtensions(clone);
				if( Object.isSealed(object) ) Object.seal(clone);
				if( Object.isFrozen(object) ) Object.freeze(clone);
			}
		}

		return clone;
	}
};

property.implement(Array, 'clone', function(){
	var i = this.length, clone = new Array(i);

	while(i--) clone[i] = clone.cloneProperties(this[i]);

	return clone;
});

module.exports = clone;
