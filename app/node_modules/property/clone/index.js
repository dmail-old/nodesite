/*

name: Object.cloning

*/

var clone = {
	enumerator: Object.keys,
	extensibility: false,

	cloneProperty: function(name, clone, object){
		clone[name] = this.cloneProperties(object[name]);
	},

	cloneProperties: function(object){
		var cloned = object;

		if( typeof object == 'object' && object != null ){
			if( typeof object.clone == 'function' ) cloned = object.clone();
			else{
				var names = this.enumerator(object), i = 0, j = names.length;

				cloned = {};
				for(;i<j;i++){
					this.cloneProperty(names[i], cloned, object);
				}

				// only if es5
				if( this.extensibility ){
					if( !Object.isExtensible(object) ) Object.preventExtensions(cloned);
					if( Object.isSealed(object) ) Object.seal(cloned);
					if( Object.isFrozen(object) ) Object.freeze(cloned);
				}
			}
		}

		return cloned;
	},

	cloneNative: function(){
		return this.constructor(this.valueOf());
	}
};

var property = require('property');

if( 'getOwnPropertyDescriptor' in Object ){
	property.append(clone, {
		extensibility: true,
		enumerator: Object.getOwnPropertyNames,
		
		cloneProperty: function(name, clone, object){
			var descriptor = Object.getOwnPropertyDescriptor(object, name);
			
			if( 'value' in descriptor ) descriptor.value = this.cloneProperties(descriptor.value);
			
			Object.defineProperty(clone, name, descriptor);		
		}
	});
}

[RegExp, Date, String, Number, Boolean].forEach(function(constructor){
	property.implement(constructor, 'clone', clone.cloneNative);
});

property.implement(Array, 'clone', function(){
	var i = this.length, clone = new Array(i);

	while(i--) clone[i] = clone.cloneProperties(this[i]);

	return clone;
});

module.exports = clone;
