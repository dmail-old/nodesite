/*

name: Object.cloning
https://gist.github.com/NV/1396086

*/

var References = function(){
	this.objects = [];
	this.values = [];
	this.index = 0;
};

References.prototype = {
	constructor: References,

	has: function(object){
		this.index = this.objects.indexOf(object);
		return this.index != -1;
	},

	add: function(object, value){
		this.objects.push(object);
		this.values.push(value);
	}
};

var clone = {
	enumerator: Object.keys,
	extensibility: false,

	// clone the value only if it's not a reference to a previously cloned object
	cloneValue: function(value, references){
		if( references.has(value) ){
			value = references.values[references.index];
		}
		else{
			value = this.cloneProperties(value, references);
		}
		return value;
	},

	cloneProperty: function(name, target, owner, references){
		target[name] = this.cloneValue(owner[name], references);
	},

	cloneProperties: function(object, references){
		var target = object;

		if( typeof object === 'object' && object !== null ){
			if( typeof object.clone === 'function' ){
				target = object.clone();
			}
			else{
				references = references || new References();
				var names = this.enumerator(object), i = names.length;		

				if( Object.prototype.toString.call(object) === '[object Array]' ){
					target = new Array(object.length);
				}
				else{
					target = Object.create(Object.getPrototypeOf(object));
				}

				references.add(object, target);
				while(i--){
					this.cloneMethod.call(this, names[i], target, object, references);
				}

				// only if es5
				if( this.extensibility ){
					if( !Object.isExtensible(object) ) Object.preventExtensions(target);
					if( Object.isSealed(object) ) Object.seal(target);
					if( Object.isFrozen(object) ) Object.freeze(target);
				}
			}
		}

		return target;
	},

	clonePrimitive: function(){
		return this;
	},

	cloneNative: function(){
		return new this.constructor(this.valueOf());
	}
};

String.prototype.clone = clone.clonePrimitive;
Number.prototype.clone = clone.clonePrimitive;
Boolean.prototype.clone = clone.clonePrimitive;
RegExp.prototype.clone = clone.cloneNative;
Date.prototype.clone = clone.cloneNative;

var property = require('property');

[String, Number, Boolean, RegExp, Date].forEach(function(constructor){
	property.implement(constructor, 'clone', constructor.prototype.clone);
});

clone.cloneProperties = clone.cloneProperties.bind(clone);
clone.cloneMethod = clone.cloneProperty;
if( 'getOwnPropertyDescriptor' in Object ){
	Object.assign(clone, {
		extensibility: true,
		enumerator: Object.getOwnPropertyNames,
		
		clonePropertyDescriptor: function(name, clone, object, references){
			var descriptor = Object.getOwnPropertyDescriptor(object, name);
			
			if( 'value' in descriptor ){
				descriptor.value = this.cloneValue(descriptor.value, references);
			}
			
			Object.defineProperty(clone, name, descriptor);
		}
	});

	clone.cloneMethod = clone.clonePropertyDescriptor;
}

module.exports = clone;
