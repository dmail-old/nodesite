/*

name: Object.cloning

*/

var clone = {
	enumerator: Object.keys,
	extensibility: false,
	heritance: true,

	cloneProperty: function(name, clone, object){
		clone[name] = this.cloneProperties(object[name]);
	},

	cloneProperties: function(object){
		var target = object;

		if( typeof object === 'object' && object !== null ){
			if( typeof object.clone == 'function' ){
				target = object.clone();
			}
			else{
				target = Object.create(Object.getPrototypeOf(object));
				this.cloneOwnProperties(object, target);
			}
		}

		return target;
	},

	cloneOwnProperties: function(object, target){
		var names = this.enumerator(object), i = 0, j = names.length;

		for(;i<j;i++){
			this.cloneMethod.call(this, names[i], target, object);
		}

		// only if es5
		if( this.extensibility ){
			if( !Object.isExtensible(object) ) Object.preventExtensions(target);
			if( Object.isSealed(object) ) Object.seal(target);
			if( Object.isFrozen(object) ) Object.freeze(target);
		}
	},

	cloneNative: function(){
		return this.constructor(this.valueOf());
	}
};

clone.cloneProperties = clone.cloneProperties.bind(clone);
clone.cloneMethod = clone.cloneProperty;

var property = require('property');

if( 'getOwnPropertyDescriptor' in Object ){
	Object.assign(clone, {
		extensibility: true,
		enumerator: Object.getOwnPropertyNames,
		
		clonePropertyDescriptor: function(name, clone, object){
			var descriptor = Object.getOwnPropertyDescriptor(object, name);
			
			if( 'value' in descriptor ){
				descriptor.value = this.cloneProperties(descriptor.value);
			}
			
			Object.defineProperty(clone, name, descriptor);		
		}
	});

	clone.cloneMethod = clone.clonePropertyDescriptor;
}

[RegExp, Date, String, Number, Boolean].forEach(function(constructor){
	property.implement(constructor, 'clone', clone.cloneNative);
});

property.implement(Array, 'clone', function(){
	var i = this.length, copy = new Array(i);

	while(i--) copy[i] = clone.cloneProperties(this[i]);

	return copy;
});

module.exports = clone;
