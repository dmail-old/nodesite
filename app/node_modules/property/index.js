/*

name: property

description: Help to manipulate object properties, required almost everywhere

*/

var property = {
	ownNames: Object.keys,

	forEach: function(object, fn, bind){
		for(var name in object) fn.call(bind, name, object);
		return object;
	},

	forEachOwn: function(object, fn, bind){
		var names = Object.keys(object), i = 0, j = names.length, name;

		for(;i<j;i++){
			name = names[i];
			fn.call(bind, name, object);
		}

		return object;
	},

	receiver: {},
	callForEach: function(forEach, array, fn, bind){
		var i = 0, j = array.length, item, temp;

		for(;i<j;i++){
			item = array[i];
			if( typeof item == 'string' ){
				this.receiver[item] = array[i];
				i++;
				item = this.receiver;
			}
			forEach.call(this, item, fn, bind);
		}
	},

	forEachOwnIn: function(array, fn, bind){
		return this.callForEach(this.forEachOwn, array, fn, bind);
	},

	forEachIn: function(array, fn, bind){
		return this.callForEach(this.forEach, array, fn, bind);
	},

	addProperty: function(name, object){
		this[name] = object[name];
	},

	implementProperty: function(name, object){
		this[name] = object[name];
	},

	completeProperty: function(name, object){
		// set name in this from object if not existing
		if( !(name in this) ){
			property.addProperty.call(this, name, object);
		}
		return this;
	},

	complementProperty: function(name, object){
		if( !(name in this) ){
			property.implementProperty.call(this, name, object);
		}
		return this;
	},

	append: function(object){
		this.forEachOwnIn(Array.prototype.slice.call(arguments, 1), this.addProperty, object);
		return object;
	},

	complete: function(object){
		this.forEachOwnIn(Array.prototype.slice.call(arguments, 1), this.completeProperty, object);
		return object;
	},

	implement: function(object){
		this.forEachOwnIn(Array.prototype.slice.call(arguments, 1), this.implementProperty, object.prototype);
		return this;
	},

	complement: function(object){
		this.forEachOwnIn(Array.prototype.slice.call(arguments, 1), this.complementProperty, object.prototype);
		return this;
	}
};

if( 'getOwnPropertyDescriptor' in Object ){

	property.append(property, {
		ownNames: Object.getOwnPropertyNames,

		// avoir custom getter being called
		cloneDescriptor: function(descriptor){
			var clone = {}, names, i, j, name;

			names = Object.getOwnPropertyNames(descriptor);
			i = 0;
			j = names.length;

			for(;i<j;i++){
				name = names[i];
				clone[name] = descriptor[name];
			}

			//if( !descriptor.set ) delete descriptor.set;

			return clone;
		},

		addProperty: function(name, object){
			var descriptor = Object.getOwnPropertyDescriptor(object, name);
			// not needed as we want the same descriptor as source
			//descriptor = property.cloneDescriptor(descriptor);
			Object.defineProperty(this, name, descriptor);
		},

		implementProperty: function(name, object){
			var descriptor = Object.getOwnPropertyDescriptor(object, name);
			// don't put enumerable = false on source descriptor
			descriptor = property.cloneDescriptor(descriptor);
			descriptor.enumerable = false;

			Object.defineProperty(this, name, descriptor);
		},

		forEach: function(object, fn, bind){
			var names = Object.getOwnPropertyNames(object), name, i, j, proto, protoNames;

			i = 0;
			j = names.length;
			for(;i<j;i++){
				name = names[i];
				fn.call(bind, name, object);
			}

			proto = object;
			while( proto = Object.getPrototypeOf(proto) ){
				if( proto == Object.prototype ) break;
				
				protoNames = Object.getOwnPropertyNames(proto);
				i = 0;
				j = protoNames.length;
				for(;i<j;i++){
					name = protoNames[i];
					if( names.indexOf(name) === -1 ){
						names.push(name);
						fn.call(bind, name, proto);
					}
				}
			}
		}
	});

	/*
	property.getPropertyOwner = function(object, name){
		while( object ){
			if( Object.prototype.hasOwnProperty.call(object, name) ) return object;
			object = Object.getPrototypeOf(object);
		}
		return null;
	};

	property.getPropertyDescriptor = function(object, name){
		object = property.getPropertyOwner(object, name);
		return object ? Object.getOwnPropertyDescriptor(object, name) : null;
	};
	*/

}

module.exports = property;