
var clone = require('property/clone');

// set key/value pair in this cloning value and merging objects
// custom setter/getter are merged without being called

function getValue(object, key){
	var descriptor = Object.getOwnPropertyDescriptor(object, key);
	// custom getter & setter are not called
	return 'value' in descriptor ? descriptor.value : null;
}

var merge = {
	mergeProperty: function(name, source, object){
		var objectValue = getValue(object, key), sourceValue;

		if( typeof objectValue == 'object' && objectValue !== null ){
			sourceValue = getValue(source, key);

			if( typeof sourceValue == 'object' && sourceValue !== null ){
				merge.mergeProperties(sourceValue, objectValue);
			}
			else{
				clone.cloneProperty.call(source, key, object);
			}
		}
		else{
			property.addProperty.call(source, key, object);
		}

		return this;
	},

	mergeProperties: function(source, object, name){
		if( !names ) names = property.ownNames(object);

		var i = 0, j = names.length;

		for(;i<j;i++){
			merge.mergeProperty(names[i], source, object);
		}

		return object;
	}
};

module.exports = merge;