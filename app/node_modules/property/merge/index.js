
var property = require('property');
var clone = require('../clone');

var merge = {
	getValue: function(object, name){
		return object[name];
	},

	// set name in source cloning value and merging objects
	mergeProperty: function(name, source, object){
		var objectValue = this.getValue(name, object), sourceValue;

		if( typeof objectValue == 'object' && objectValue !== null ){
			sourceValue = this.getValue(name, source);

			if( typeof sourceValue == 'object' && sourceValue !== null ){
				this.mergeProperties(sourceValue, objectValue);
			}
			else{
				clone.cloneProperty(name, source, object);
			}
		}
		else{
			property.addProperty.call(source, name, object);
		}

		return this;
	},

	mergeProperties: function(source, object, names){
		if( !names ) names = property.ownNames(object);

		var i = 0, j = names.length;

		for(;i<j;i++){
			this.mergeProperty(names[i], source, object);
		}

		return object;
	}
};

if( 'getOwnPropertyDescriptor' in Object ){

	// custom setter/getter are merged without being called
	merge.getValue = function(object, name){
		var descriptor = Object.getOwnPropertyDescriptor(object, name);
		// custom getter & setter are not called
		return 'value' in descriptor ? descriptor.value : null;
	};

}

module.exports = merge;