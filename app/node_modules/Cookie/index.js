require('object/assign');
var proto = require('proto');
var Cookie = proto.extend({
	name: null,
	path: '/',
	duration: false,
	secure: false,
	encode: true,
	value: null,
	domain: false,
	httpOnly: false,
	expires: false,

	constructor: function(options){
		if( typeof options == 'string' ){
			this.name = arguments[0];
			this.value = arguments[1];
			options = arguments[2];
		}

		if( typeof options == 'object' ){
			Object.assign(this, options);
		}
	},

	toString: function(){
		var output, date;

		output = this.encode ? encodeURIComponent(this.value) : this.value;

		if( this.path ) output+= "; path=" + this.path;
		if( this.duration ){
			date = new Date();
			date.setTime(date.getTime() + this.duration * 1000 * 60 * 60 * 24);
			output+= '; expires=' + date.toUTCString(); // toGMTString maybe?
		}
		else if( this.expires ){
			output+= '; expires=' + this.expires;
		}
		if( this.domain ) output+= "; domain=" + this.domain;
		if( this.secure ) output+= "; secure";
		if( this.httpOnly ) output+= "; httponly";

		return this.name + '=' + output;
	}
});

Object.assign(Cookie, {
	cache: {},

	getRegexp: function(name){
		var regexp = this.cache[name];

		if( regexp ) return regexp;

		regexp = new RegExp(
			"(?:^|;) *" +
			name.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&") +
			"=([^;]*)"
		);

		return this.cache[name] = regexp;
	},

	decodeValue: function(value){
		return value ? decodeURIComponent(value).trim() : null;
	},

	parse: function(source, name){
		var match;

		if( source ){
			match = source.match(this.getRegexp(name));
			return this.decodeValue(match ? match[1] : null);
		}

		return null;
	},

	parseAll: function(source){
		var cookies = source.split(';'), i = 0, j = cookies.length, pair, map = {};

		for(;i<j;i++){
			pair = cookies[i].split('=');
			map[pair[0].trim()] = this.decodeValue(pair[1]);
		}

		return map;
	}
});

module.exports = Cookie;

if( typeof document != 'undefined' ){
	document.setCookie = function(){
		var cookie = Cookie.create.apply(Cookie, arguments).toString();
		document.cookie = cookie;
		return cookie;
	};
	document.removeCookie = function(name){
		var cookie = Cookie.create({name: name, duration: -1});
		return this.setCookie(cookie);
	};
	document.readCookies = function(){
		return Cookie.parseAll(document.cookie);
	};
}
