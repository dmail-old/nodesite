var proto = require('proto');

var PropertyNotifier = proto.create({
	notifier: null,
	name: null,	
	fns: null,
	binds: null,
	descriptor: null,

	init: function(notifier, name){
		this.notifier = notifier;
		this.name = name;
		this.fns = [];
		this.binds = [];
	},

	open: function(){
		if( this.descriptor ) return;

		var object = this.notifier.object, name = this.name;
		var descriptor = Object.getOwnPropertyDescriptor(object, name) || {
			enumerable: true
			// value: undefined (don't set value to know if value is set to undefined)
		};

		this.descriptor = descriptor;

		// array.length or stuff like this are not configurable :(
		if( descriptor.configurable === false ){
			return false;
		}
		// the object is not suppoed to be modified (todo isFrozen, isSealed etc)
		if( descriptor.writable === false ){
			return false;
		}
		// custom getter and setter can't be watched, they should used getNotifier(this, 'test') (todo)
		if( 'get' in descriptor || 'set' in descriptor ){
			return false;
		}

		var self = this;
		var oldValue;
		Object.defineProperty(object, name, {
			get: function(){
				return descriptor.value;
			},

			set: function(value){
				oldValue = descriptor.value;

				if( oldValue !== value ){
					descriptor.value = value;
					self.notify(value, oldValue);
				}
			},

			enumerable: descriptor.enumerable,
			configurable: true
		});

		return true;		
	},

	close: function(){
		if( this.descriptor == null ) return;

		if( 'value' in this.descriptor ){
			Object.defineProperty(this.notifier.object, this.name, this.descriptor);
		}
		else{
			delete this.notifier.object[this.name];
		}

		this.descriptor = null;
	},

	addListener: function(fn, bind){
		this.fns.push(fn);
		this.binds.push(bind);
		if( this.fns.length === 1 ){
			return this.open();
		}
		return true;
	},

	removeListener: function(fn){
		if( fn ){
			var index = this.fns.indexOf(fn);

			if( index !== -1 ){
				this.fns.splice(index, 1);
				this.binds.splice(index, 1);
			}
		}
		else{
			this.fns.length = 0;
			this.binds.length = 0;
		}

		if( this.fns.length === 0 ){
			this.close();
			this.notifier.removeNotifier(this);
		}
	},

	notify: function(value, oldValue){
		var i = 0, j = this.fns.length;

		for(;i<j;i++){
			this.fns[i].call(this.binds[i], value, oldValue, this.name, this.notifier.object);
		}
	}
});

var ObjectNotifier = proto.create({
	object: null,
	propertyNotifiers: null,
	size: 0,

	init: function(object){
		this.object = object;
		this.propertyNotifiers = {};
	},

	getNotifier: function(name){
		var notifier;

		if( name in this.propertyNotifiers ){
			notifier = this.propertyNotifiers[name];
		}
		else{
			notifier = PropertyNotifier.new(this, name);
			this.propertyNotifiers[name] = notifier;
			this.size++;
		}

		return notifier;
	},

	removeNotifier: function(propertyNotifier){
		this.size--;
		delete this.propertyNotifiers[propertyNotifier.name];
		if( this.size === 0 ){
			PropertyWatcher.removeNotifier(this);
		}
	},
});

var PropertyWatcher = {
	objectNotifiers: [],

	indexOf: function(object){
		var notifiers = this.objectNotifiers, i = 0, j = notifiers.length, notifier, index = -1;

		for(;i<j;i++){
			notifier = notifiers[i];
			if( notifier.object === object ){
				index = i;
				break;
			}
		}

		return index;
	},

	getNotifier: function(object){
		var index = this.indexOf(object), notifier;

		if( index === -1 ){
			notifier = ObjectNotifier.new(object);
			this.objectNotifiers.push(notifier);
		}
		else{
			notifier = this.objectNotifiers[index];
		}

		return notifier;
	},

	removeNotifier: function(objectNotifier){
		this.objectNotifiers.splice(this.objectNotifiers.indexOf(objectNotifier), 1);
	},	

	watch: function(object, name, fn, bind){
		return this.getNotifier(object).getNotifier(name).addListener(fn, bind);
	},

	unwatch: function(object, name, fn){
		var index = this.indexOf(object), notifier;

		if( index !== -1 ){
			notifier = this.notifiers[index];

			if( name in notifier.propertyNotifiers ){
				notifier.propertyNotifiers[name].removeListener(fn);
			}
		}
	}
};

module.exports = PropertyWatcher;