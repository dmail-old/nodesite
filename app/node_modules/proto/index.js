/*

proto

provides: create, new, supplement, extend, extendFrom

*/

var property = require('property');

if( !Object.create ){
	Object.create = function(object){
		if( typeof o != 'object') throw TypeError('Argument must be an object');
		var F = function(){};
		F.prototype = object;
		return new F();
	};
}

var proto = {
	supplement: function(){
		property.forEachIn(arguments, property.addProperty, this);
		return this;
	},

	create: function(){
		var instance = Object.create(this);

		if( arguments.length > 0 ){
			proto.supplement.apply(instance, arguments);
		}

		return instance;
	},

	new: function(){
		var instance = Object.create(this), init = instance.init, ret;

		if( typeof init == 'function' ){
			ret = init.apply(instance, arguments);
			if( typeof ret == 'object' ) instance = ret;
		}

		return instance;
	},

	// equivalent to proto.create.call(bind, proto, ...)
	createFrom: function(bind){
		var instance = proto.create.call(bind, this);

		if( arguments.length > 1 ){
			instance.supplement.apply(instance, Array.prototype.slice.call(arguments, 1));
		}

		return instance;
	}
};

module.exports = proto;

// backward compat (we will no longer extend Object.prototype)
if( !true ){
	property.implement(Object, proto);
}
