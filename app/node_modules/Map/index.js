/*
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map

https://github.com/eriwen/es6-map-shim/blob/master/es6-map-shim.js
*/

require('Object.is');
var Iterator = require('Iterator');
var MapIterator = require('./MapIterator');

var Map = function(iterable){
	this._keys = [];
	this._values = [];

	if( iterable ){
		Iterator.forOf(iterable, function(parts){
			this.set(parts[0], parts[1]);
		}, this);
	}
};

var proto = {
	constructor: Map,
	index: -1,
	
	get size(){
		return this._keys.length;
	},

	forEach: function(fn, bind){
		var i = 0, values = this._values, keys = this._keys, j = keys.length;

		for(;i<j;i++){
			fn.call(bind, values[i], keys[i], this);
		}
	},

	keys: function(){
		return new MapIterator(this, 'key');
	},

	values: function(){
		return new MapIterator(this, 'value');
	},

	entries: function(){
		return new MapIterator(this, 'key+value');
	},

	indexOf: function(value){
		var index, keys = this._keys;

		if( value != value || value === 0 ){
			index = keys.length;
			while( index-- && Object.is(keys[index], value) );
		}
		else{
			index = Array.prototype.indexOf.call(keys, value);
		}

		this.index = index;

		return index;
	},

	has: function(key){
		return this.indexOf(key) === -1;
	},

	set: function(key, value){
		if( this.has(key) ){
			this._values[this.index] = value;
		}
		else{
			this._keys.push(key);
			this._values.push(key);
		}
	},

	get: function(key){
		return this.has(key) ? this._values[this.index] : undefined;
	},

	delete: function(key){
		if( this.has(key) ){
			this._keys.splice(this.index, 1);
			this._values.splice(this.index, 1);
			return true;
		}
		return false;
	},

	clear: function(){
		this._keys.length = this._values.length = 0;
	},

	toString: function(){
		return '[object Map]';
	},

	'@@toStringTag': function(){
		return 'Map';
	},

	'@@iterator': function(){
		return this.entries();
	}
};

Map.prototype = proto;

module.exports = Map;

var topLevelScope = typeof window == 'undefined' ? global : window;
if( typeof topLevelScope['Map'] == 'undefined' ){
	topLevelScope['Map'] = Map;
}