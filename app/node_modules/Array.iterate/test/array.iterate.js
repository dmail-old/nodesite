var array = ['a', 'b', 'c'];
var iterate = imports.iterate;

exports['call arg2 on every array elements passing value,index,array'] = function(test){
	var calls = [], passedArray;
		
	iterate(array,  function(value, index, ar){
		calls.push(value, index);
		passedArray = ar;
	});

	test.equal(calls.join(''), 'a0b1c2');
	test.equal(passedArray, passedArray);
	test.done();
};

exports['set arg3 as the function context'] = function(test){
	var context;
	
	iterate(array, function(value){
		context = this;
	}, 'yo');

	test.done(context == 'yo');
};

exports['iterate in reverse order when arg4 = "prev"'] = function(test){
	var calls = [];

	iterate(array, function(value){
		calls.push(value);
	}, null, 'prev');

	test.done(calls.join('') == 'cba');
};	

exports['start iteration from arg5'] = function(test){
	var calls = [];

	iterate(array, function(value){
		calls.push(value);
	}, null, 'next', 0);

	test.done(calls.join('') == 'bc');
};

exports['iterate in reverse order from arg5'] = function(test){
	var calls = [];
	module(['a', 'b', 'c'], function(value){
		calls.push(value);
	}, null, 'prev', 1, true);

	test.equal(calls.join(''), 'acb');
	test.done();
};

exports['handle a negative arg5 as 0'] = function(test){
	var calls = [];
	module(['a', 'b', 'c'], function(value){
		calls.push(value);
	}, null, 'next', -10, true);

	test.equal(calls.join(''), 'abc');
	test.done();
};

exports['handle arg5 > array.length as array.length when arg3 = prev'] = function(test){
	var calls = [];
	module(['a', 'b', 'c'], function(value){
		calls.push(value);
	}, null, 'prev', 100, true);

	test.equal(calls.join(''), 'cba');
	test.done();
};

exports['makes a loop when arg6 = true'] = function(test){
	var calls = [];

	module(array, function(value){
		calls.push(value);
	}, null, 'next', 0, true);

	test.done(calls.join('') == 'bca');
};

exports['stays between arg 5&6'] = function(test){
	var calls = [];

	module(['a', 'b', 'c', 'd', 'e'], function(value){
		calls.push(value);
	}, null, 'next', 0, 2);

	test.equal(calls.join(''), 'bc');
	test.done();
};

exports['stays between arg 5&6 with arg4 = prev'] = function(test){
	var calls = [];

	module(['a', 'b', 'c', 'd', 'e'], function(value){
		calls.push(value);
	}, null, 'prev', 2, 0);

	test.equal(calls.join(''), 'ba');
	test.done();
};

exports['noop when arg4 = next & arg5 > array.length'] = function(test){
	var calls = [];

	module(['a', 'b', 'c', 'd', 'e'], function(value){
		calls.push(value);
	}, null, 'next', 10);

	test.equal(calls.join(''), '');
	test.done();
};

exports['noop when arg4 = prev & arg5 <= 0'] = function(test){
	var calls = [];
	module(['a', 'b', 'c', 'd', 'e'], function(value){
		calls.push(value);
	}, null, 'prev', 0);

	test.equal(calls.join(''), '');
	test.done();
};