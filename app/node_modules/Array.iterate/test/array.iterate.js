// this file will be put in app/node_modules/array.prototype.iterate/tests/1.js
// server side all the website tree will be recursively browser searching for nodes_modules/tests/ folder
// the file within thoose folder will be consider as tests to run agains the module

it('call fn on every element of the array', function(test){
	var calls = [];
		
	module([0, 1, 2, 3], function(value){
		calls.push(value);
	});

	test.equal(calls.join(''), 0123);
	test.done();
});

it('get the index as second argument', function(test){
	var calls = [];
	module(['a', 'b', 'c'], function(value, index){
		calls.push(index);
	}, null, 'prev');

	test.equal(calls.join(''), '210');
	test.done();
});

it('start from a specific index', function(test){
	var calls = [];
	module(['a', 'b', 'c'], function(value){
		calls.push(value);
	}, null, 'next', 0);

	test.equal(calls.join(''), 'bc');
	test.done();
});

it('loop next from a specific index', function(test){
	var calls = [];
	module(['a', 'b', 'c'], function(value){
		calls.push(value);
	}, null, 'next', 0, true);

	test.equal(calls.join(''), 'bca');
	test.done();
});

it('loop prev from a specific index', function(test){
	var calls = [];
	module(['a', 'b', 'c'], function(value){
		calls.push(value);
	}, null, 'prev', 1, true);

	test.equal(calls.join(''), 'acb');
	test.done();
});

it('loop next with a negative start index', function(test){
	var calls = [];
	module(['a', 'b', 'c'], function(value){
		calls.push(value);
	}, null, 'next', -10, true);

	test.equal(calls.join(''), 'abc');
	test.done();
});

it('loop prev with an index > array.length', function(test){
	var calls = [];
	module(['a', 'b', 'c'], function(value){
		calls.push(value);
	}, null, 'prev', 100, true);

	test.equal(calls.join(''), 'cba');
	test.done();
});

it('call fn on every element from an index to an other index', function(test){
	var calls = [];
	module(['a', 'b', 'c', 'd', 'e'], function(value){
		calls.push(value);
	}, null, 'next', 0, 2);

	test.equal(calls.join(''), 'bc');
	test.done();
});

it('call fn on every element from an index to an other index in reverse order', function(test){
	var calls = [];
	module(['a', 'b', 'c', 'd', 'e'], function(value){
		calls.push(value);
	}, null, 'prev', 2, 0);

	test.equal(calls.join(''), 'ba');
	test.done();
});

it('never call fn for next with an index > array.length', function(test){
	var calls = [];
	module(['a', 'b', 'c', 'd', 'e'], function(value){
		calls.push(value);
	}, null, 'next', 10);

	test.equal(calls.join(''), '');
	test.done();
});

it('never call fn for prev with an index <= 0', function(test){
	var calls = [];
	module(['a', 'b', 'c', 'd', 'e'], function(value){
		calls.push(value);
	}, null, 'prev', 0);

	test.equal(calls.join(''), '');
	test.done();
});