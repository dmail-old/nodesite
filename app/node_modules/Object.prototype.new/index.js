/*

Object.instance

provides: Object.prototype.supplement, Object.prototype.extend, Object.prototype.new

*/

if( !Object.create ){
	Object.create = function(object){
		var F = function(){};
		F.prototype = object;
		return new F();
	};
}

var util = require('Object.util');

module.exports = {
	supplement: function(){
		util.eachPropertyIn(arguments, util.eachPair, util.appendPair, this);
		return this;
	},

	extend: function(){
		var object = Object.create(this);

		object.supplement.apply(object, arguments);

		return object;
	},

	// return an instance of this object calling it's create method
	new: function(){
		var instance = Object.create(this), create = instance.create;

		if( typeof create == "function" ) create.apply(instance, arguments);

		return instance;
	}
};

Object.implement(module.exports);