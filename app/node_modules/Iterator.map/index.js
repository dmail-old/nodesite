var Iterator = require('Iterator');
var proto = require('proto');

var MappedIterator = proto.extend(Iterator, {
	constructor: function(iterator, map, bind){
		if( typeof map != 'function' ) throw new TypeError('map must be a function');

		this.iterator = iterator;
		this.map = map;
		this.bind = bind;
	},

	next: function(){
		var next = this.iterator.next();

		if( next.done ){
			return next;
		}
		next.value = this.map.call(this.bind, next.value);
		return next;
	},

	toString: function(){
		return '[object Mapped Iterator]';
	}
});

var MappedIterable = proto.create({
	iterable: null,
	map: null,
	bind: null,

	constructor: function(iterable, map, bind){
		this.iterable = iterable;
		this.map = map;
		this.bind = bind;
	},

	toString: function(){
		return '[object Mapped Iterable]';
	}
});

MappedIterable.prototype[Symbol.iterator] = function(){
	return new MappedIterator(this.iterable[Symbol.iterator](), this.map, this.bind);
};

Iterator.map = function(iterable, map, bind){
	return new MappedIterable(iterable, map, bind);
};