var SelectorFactory = {
	constructors: [],

	addConstructor: function(condition, constructor){
		if( typeof condition == 'string' ){
			var type = condition;
			condition = function(selector){
				return typeof selector == type;
			};
		}

		this.constructors.push(condition, constructor);
	},

	new: function(selector){
		if( this.isPrototypeOf(selector) ) return selector;
		
		var i = 0, j = this.constructors.length, condition, constructor;

		for(;i<j;i+=2){
			condition = this.constructors[i];
			if( condition(selector) ){
				constructor = this.constructors[i+1];
				return constructor.new.apply(constructor, arguments);
			}
		}

		throw new TypeError(selector + ' is not a valid selector');
	}
};

SelectorFactory.addConstructor('boolean', require('./booleanSelector'));
SelectorFactory.addConstructor('function', require('./functionSelector'));
SelectorFactory.addConstructor('number', require('./numberSelector'));
SelectorFactory.addConstructor('string', require('./stringSelector'));
SelectorFactory.addConstructor(function(selector){ return selector == null; }, require('./nullSelector'));
SelectorFactory.addConstructor(function(item){ return item instanceof Array; }, require('./arraySelector'));
SelectorFactory.addConstructor(function(item){ return item instanceof RegExp; }, require('./regExpSelector'));
SelectorFactory.addConstructor('object', require('./objectSelector'));

module.exports = SelectorFactory;