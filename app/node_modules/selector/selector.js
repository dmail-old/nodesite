/*
---

name: Selector

description: Object having with a match function destined to be called on a value

requires: Function.TRUE, Function.FALSE

...
*/

var Selector = {
	alwaysTrue: Function.TRUE,
	alwaysFalse: Function.FALSE,
	ACCEPT: true, // a test return true? we found what we wanted break the loop
	REJECT: false, // a test return reject? we continue the loop
	selector: null,

	init: function(selector){
		this.selector = selector;
	},

	test: Function.FALSE,

	isRejected: function(value){
		return value === this.REJECT;
	},

	isAccepted: function(value){
		return value === this.ACCEPT;
	},

	callTest: function(test, value){
		return test.call(this, value);
	},

	match: function(value){
		return this.isAccepted(this.callTest(this.test, value));
	},

	matchReverse: function(value){
		return this.isRejected(this.callTest(this.test, value));
	},

	neverMatch: function(){
		return this.test === this.alwaysFalse;
	},

	setReverse: function(reverse){
		if( reverse ){
			this.match = this.matchReverse;
		}
		else{
			this.match = Selector.match;
		}
	}
};

module.exports = Selector;