/*
*/

require('es6');

var proto = require('proto');

var FilteredIterator = proto.createFrom(Iterator.prototype, {
	iterable: null,
	filter: null,
	bind: null,
	iterationKind: 'value',
	iterator: null,
	index: 0,	
	result: null,

	init: function(iterable, filter, bind, kind){
		this.iterable = iterable;
		this.filter = filter;
		this.bind = bind;
		if( typeof kind == 'string' ) this.iterationKind = kind;
		this.iterator = this.iterable['@@iterator']();
		this.index = 0;
		this.result = {done: false, value: undefined};
	},

	next: function(){
		var result, filter, bind, kind, iterator, next, key, value;

		result = this.result;
		filter = this.filter;
		bind = this.bind;
		kind = this.iterationKind;

		iterator = this.iterator;
		next = iterator.next();
		while( next.done === false ){
			value = next.value;

			if( filter === null || typeof bind == 'undefined' ? filter(value) : filter.call(bind, value) ){
				if( kind != 'value' ){
					key = typeof iterator.index == 'number' ? iterator.index : this.index;
					if( kind == 'key' ){
						value = key;
					}
					if( kind == 'key+value' ){
						value = [key, value];
					}
				}

				result.done = false;
				result.value = value;				

				return result;
			}

			next = iterator.next();
			this.index++;
		}

		result.done = true;
		result.value = undefined;
		return result;
	},

	count: function(){
		return Array.from(this).length;
	}
});

module.exports = FilteredIterator;