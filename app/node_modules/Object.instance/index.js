/*

Object.eachPair

provides: pair.eachPair, pair.eachPairIn,

*/

var property = require('Object.property');

if( 'getOwnPropertyNames' in Object ){

	property.eachKey = function(object, fn, bind){
		var names = Object.getOwnPropertyNames(object), name, i, j, parentNames;

		i = 0;
		j = names.length;
		for(;i<j;i++){
			name = names[i];
			fn.call(bind, name, object);
		}

		while( object = Object.getPrototypeOf(object) ){
			if( object == Object.prototype ) break;
			parentNames = Object.getOwnPropertyNames(object);
			i = 0;
			j = parentNames.length;
			for(;i<j;i++){
				name = parentNames[i];
				if( names.indexOf(name) === -1 ){
					names.push(name);
					fn.call(bind, name, object);
				}
			}
		}
	};

	/*

	Object.getPropertyOwner = function(object, key){
		while( object ){
			if( Object.prototype.hasOwnProperty.call(object, key) ) return object;
			object = Object.getPrototypeOf(object);
		}
		return null;
	};

	Object.getPropertyDescriptor = function(object, key){
		object = Object.getPropertyOwner(object, key);
		return object ? Object.getOwnPropertyDescriptor(object, key) : null;
	};

	*/

}
else{

	property.eachKey = function(object, fn, bind){
		for(var key in object) fn.call(bind, key, object);
		return object;
	};

}

property.eachKeyIn = function(array, fn, bind){
	return this.iterateKey(this.eachKey, array, fn, bind);
};

/*

Object.instance

provides: create, supplement, extend, new

*/

if( !Object.create ){
	Object.create = function(object){
		var F = function(){};
		F.prototype = object;
		return new F();
	};
}

var instance = {
	create: function(){
		return Object.create(this);
	},

	new: function(){
		var instance = this.create(), init = instance.init, ret;

		if( typeof init == "function" ){
			ret = init.apply(instance, arguments);
			if( typeof ret == 'object' ) instance = ret;
		}

		return instance;
	},

	supplement: function(){
		property.eachKeyIn(arguments, property.appendKey, this);
		return this;
	},

	extend: function(){
		var object = this.create();

		object.supplement.apply(object, arguments);

		return object;
	}
};

module.exports = instance;

// backward compat (we will no longer extend Object.prototype)
if( true ){
	property.implement(Object, instance);
}