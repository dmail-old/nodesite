/*
firstIndex & pushIndex can be used only for iterator providing a second value

It's the case for array (the second value is the index)
for object (the second value is the key)

thus it should be renamed
moreover es6 array iterator gives a pair [0, 'a'] for ['a']
and my implementation gives the value only

*/

var proto = require('proto');
var IteratorSelection = proto.create({
	Selector: require('../Selector'),
	iterator: null,
	selector: null,
	result: null,

	init: function(iterator, selector){
		this.iterator = iterator;
		this.selector = this.createSelector(selector);
	},

	createSelector: function(){
		return this.Selector.new.apply(this.Selector, arguments);
	},

	forOf: function(fn, bind){
		if( iterator.forOf ){
			iterator.forOf(fn, bind);
		}
		else{
			for(var value of iterator){
				// TODO
			}
		}
	},

	match: function(value){
		return this.selector.match(value);
	},
	
	firstIndex: function(value, index){
		if( this.match(value) === true ) this.result = index;
		return true;
	},

	pushIndex: function(value, index){
		if( this.match(value) === true ) this.result.push(index);
	},

	first: function(){
		if( this.match(value) === true ) this.result = value;
		return true;
	},

	push: function(){
		if( this.match(value) === true ) this.result.push(value);
	},

	increment: function(){
		if( this.match(value) === true ) this.result++;
	},

	findIndex: function(){
		this.result = -1;
		this.forOf(this.firstIndex);
		return this.result;
	},

	findIndexes: function(){
		this.result = [];
		this.forOf(this.pushIndex);
		return this.result;
	},

	find: function(){
		this.result = null;
		this.forOf(this.first);
		return found;
	},

	findAll: function(){
		this.result = [];
		this.forOf(this.push);
		return this.result;
	},

	count: function(){
		this.result = 0;
		this.forOf(this.increment);
		return this.result;
	}
});

module.exports = IteratorSelection;