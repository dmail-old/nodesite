/**

Sort an array towards the properties of object he contains

orderBy('name');
orderBy('name');
orderBy('name', 'index', -1, function(a){ return a.name.toLowerCase(); }, 'getCount()');

*/

module.exports = {
	PropertyPath: require('PropertyPath'),

	createAccessor: function(path){
		var accessor = new this.PropertyPath(path);
		return function(a){
			return accessor.setModel(a).value;
		};
	},

	createComparer: function(properties){
		var i, n, j = properties.length, fns = [], orders = [], property;

		i = n = 0;

		for(;i<j;i++){
			property = properties[i];
			switch(typeof property){
			case 'string':
				fns[n++] = this.createAccessor(property);
				break;
			case 'function':
				fns[n++] = property;
				break;
			case 'number':
				if( n ) orders[n-1] = property;
				break;
			}
		}

		function comparer(a,b){
			var calc, va, vb;
			for(i=0;i<n;i++){
				calc = fns[i];
				va = calc.call(a, a);
				vb = calc.call(b, b);

				if( va > vb ) return orders[i] || 1;
				if( va < vb ) return -(orders[i] || 1);
			}
			return 0;
		}

		return comparer;
	},

	sortBy: function(array){
		var comparer = this.createComparer(Array.prototype.slice.call(arguments, 1));
		return array.sort(comparer);
	}
};