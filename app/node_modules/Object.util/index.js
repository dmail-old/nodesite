/*

name: Object.util

description: required almost everywhere

provides:
	Object.eachPropertyIn, Object.ownKeys, Object.eachOwnPair,
	Object.appendPair, Object.append,
	Object.completePair, Object.complete
	Object.implementPair, Object.implement,
	Object.complementPair, Object.complement

*/

module.exports = {
	eachPropertyIn: function(array, propertyIterator, fn, bind){
		var i = 0, j = array.length, item;

		for(;i<j;i++){
			item = array[i];
			if( item instanceof Function ) item = item.prototype;

			switch(typeof item){
			case 'string':
				fn.call(bind, item, array[++i]);
				break;
			case 'object':
				propertyIterator.call(this, item, fn, bind);
				break;
			}
		}
	},

	ownKeys: 'getOwnPropertyNames' in Object ? Object.getOwnPropertyNames : Object.keys,

	eachOwnPair: function(object, fn, bind){
		var keys = this.ownKeys(object), i = 0, j = keys.length, key;
		for(;i<j;i++){
			key = keys[i];
			fn.call(bind, key, object[key], object);
		}
		return object;
	},

	append: function(object){
		this.eachPropertyIn(Array.prototype.slice.call(arguments, 1), this.eachOwnPair, this.appendPair, object);
		return object;
	},

	completePair: function(key){
		// set key/value pair in this if not existing
		if( !(key in this) ){
			module.exports.appendPair.apply(this, arguments);
		}
		return this;
	},

	complete: function(object){
		this.eachPropertyIn(Array.prototype.slice.call(arguments, 1), this.eachOwnPair, this.completePair, object);
		return object;
	},

	implement: function(){
		module.exports.eachPropertyIn(arguments, module.exports.eachOwnPair, module.exports.implementPair, this.prototype);
		return this;
	},

	complementPair: function(key, value){
		if( !(key in this) ){
			module.exports.implementPair.apply(this, arguments);
		}
		return this;
	},

	complement: function(){
		module.exports.eachPropertyIn(arguments, module.exports.eachOwnPair, module.exports.complementPair, this.prototype);
		return this;
	}
};

if( 'getOwnPropertyDescriptor' in Object ){

	module.exports.appendPair = function(key, value, object){
		if( object ){
			Object.defineProperty(this, key, Object.getOwnPropertyDescriptor(object, key));
		}
		else{
			this[key] = value;
		}
	};

	module.exports.implementPair = function(key, value, object){
		var descriptor;

		if( object ){
			descriptor = Object.getOwnPropertyDescriptor(object, key);
			descriptor.enumerable = false;
		}
		else{
			descriptor = {enumerable: false,  configurable: true, writable: true, value: value};
		}

		Object.defineProperty(this, key, descriptor);
	};

}
else{

	module.exports.appendPair = module.exports.implementPair = function(key, value, object){
		this[key] = value;
	};

}

/*

Object.eachPair

*/

if( 'getOwnPropertyNames' in Object ){

	module.exports.eachPair = function(object, fn, bind){
		var names = Object.getOwnPropertyNames(object), name, i, j, parentNames;

		i = 0;
		j = names.length;
		for(;i<j;i++){
			name = names[i];
			fn.call(bind, name, object[name], object);
		}

		while( object = Object.getPrototypeOf(object) ){
			if( object == Object.prototype ) break;
			parentNames = Object.getOwnPropertyNames(object);
			i = 0;
			j = parentNames.length;
			for(;i<j;i++){
				name = parentNames[i];
				if( names.indexOf(name) === -1 ){
					names.push(name);
					fn.call(bind, name, object[name], object);
				}
			}
		}
	};

	/*

	Object.getPropertyOwner = function(object, key){
		while( object ){
			if( Object.prototype.hasOwnProperty.call(object, key) ) return object;
			object = Object.getPrototypeOf(object);
		}
		return null;
	};

	Object.getPropertyDescriptor = function(object, key){
		object = Object.getPropertyOwner(object, key);
		return object ? Object.getOwnPropertyDescriptor(object, key) : null;
	};

	*/

}
else{

	module.exports.eachPair = function(object, fn, bind){
		for(var key in object) fn.call(bind, key, object[key], object);
		return object;
	};

}

module.exports.append(Object, module.exports);