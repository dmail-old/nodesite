var Emitter = require('Emitter');
var ObjectChangeEmitter = Emitter.extend({
	modelInstance: new WeakMap(),

	new: function(model){
		var instance = this.modelInstance.get(model);

		if( !instance ){
			instance = Emitter.new.call(this, model);
			this.modelInstance.set(model, instance);
		}

		return instance;
	},

	watcher: function(name, oldValue, value){
		if( oldValue !== value ){
			this.emit(name, name, oldValue, value);
		}
		return value;
	}
});

ObjectChangeEmitter.on('addListener', function(name, listener){
	// if it's the first listener
	if( this.listeners(name).length == 1 ){
		Object.prototype.watch.call(this.bind, name, this.watcher.bind(this));
	}
});
ObjectChangeEmitter.on('removeListener', function(name, listener){
	// if it's the last listener
	if( this.listeners(name) === false ){
		Object.prototype.unwatch.call(this.bind, name);
		if( Object.isEmpty(this.$listeners) ){
			this.modelInstance.delete(this.bind);
		}
	}
});

module.exports = ObjectChangeEmitter;