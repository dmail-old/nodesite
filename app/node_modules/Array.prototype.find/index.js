/*---name: Array.finddescription: Advanced search against arrayrequire: Object, Selector, Array.prototype.iterateprovides: Array.prototype.find, Array.prototype.findAll, Array.prototype.count$ES6 auras sa propre méthode find, je peux pas 'find'toute façon y'avait un truc qu'allait pas avec cette manière de fairefaut dabord créer une fonction qui retourn true ou falseensuite soit on fait findsoit on a sa propre méthode d'itérationhttp://www.2ality.com/2014/05/es6-array-methods.html...*/var Selector = require('../Selector');var ArrayIterator = require('ArrayIterator');module.exports = {	// loop through array testing all items	collectMatch: function(selector, first, direction, from, to){		/*		a speed improvment is possible is we just need to find the item through a number		if( typeof filter == 'number' ){			var value = array[(filter * direction == 'prev' ? -1 : 1) + (from || 0)];			if( typeof value == 'undefined' ) value = null;			return first ? value : [value];		}*/		var iterator = ArrayIterator.new(this, direction, from, to);		return iterator[first ? 'match' : 'matchAll'](selector.match, selector); 	},	// returns first item satifying selector or null	find: function(selector, direction, from, to){		return this.collectMatch(selector, true, direction, from, to);	},	// returns an array containing all items satifying selector	findAll: function(selector, direction, from, to){		return this.collectMatch(selector, false, direction, from, to);	},	// returns the number of items satisfying at least one arguments	// sauf qu'idéalement faudrait pouvoir passer en argument from et to aussi non?	count: function(selector){		selector = Selector.new(selector);		var count = 0, i = this.length;		while(i--){			if( selector.match(this[i]) ) count++;		}		return count;	}};Array.implement(module.exports);