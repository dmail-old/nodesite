exports['prototypal inheritance with proto & child observed'] = function(test){
	var proto = {};
	var childProto = Object.create(proto);
	var protoObserver = new test.imports(proto, 'name');
	var childObserver = new test.imports(childProto, 'name');

	protoObserver.open();
	childObserver.open();

	console.log(protoObserver, childObserver);

	proto.name = 'sandra';
	test.equal(childObserver.lastChange.object, proto);
	test.equal(childObserver.lastChange, protoObserver.lastChange);

	childProto.name = 'damien';
	test.equal(childObserver.lastChange.object, childProto);
	test.equal(proto.name, 'sandra');
	test.equal(childProto.name, 'damien');
};

exports['call fn on property change'] = function(test){
	var model = {}, bind = {};

	new test.imports(model, 'name').observe(function(change){
		test.equal(this, bind);
		
		test.equal(change.oldValue, undefined);
		test.equal(change.name, 'name');
		test.equal(change.object, model);

		test.done();
	}, bind);

	model.name = 'damien';
};

exports['change only when property is actually changed'] = function(test){
	return;
	var model = {}, observer, lastChange;

	observer = new test.imports(model, 'name');
	observer.open();
	model.name = 'damien';
	lastChange = observer.lastChange;

	model.name = 'damien';
	test.ok(lastChange == observer.lastChange);

	model.name = 0;
	test.ok(lastChange != observer.lastChange);
	lastChange = observer.lastChange;

	model.name = false;
	test.ok(lastChange != observer.lastChange);
	
	test.done();
};

exports['cannot observe non configurable property'] = function(test){
	test.equal(new test.imports([], 'length').open(), false);
};

exports['cannot observe custom getter or setter'] = function(test){
	test.equal(new test.imports({get foo(){}}, 'foo').open(), false);
	test.equal(new test.imports({set foo(value){}, get foo(){}}, 'foo').open(), false);
};

exports['close() delete the property when it does not exists'] = function(test){
	var model = {};

	var observer = new test.imports(model, 'name');
	observer.open();
	observer.close();

	test.equal('name' in model, false);
};

exports['close() does not affect the value'] = function(test){
	var model = {};

	var observer = new test.imports(model, 'name');
	observer.open();
	model.name = 'damien';
	observer.close();

	test.equal(model.name, 'damien');
};

exports['prototypal inheritance with proto observed'] = function(test){
	var proto = {};
	var childProto = Object.create(proto);
	var protoObserver = new test.imports(proto, 'name');

	protoObserver.open();

	proto.name = 'sandra';
	childProto.name = 'damien';
	
	test.equal(protoObserver.lastChange.object, proto);
	test.equal(childProto.name, 'damien');
};

exports['prototypal inheritance with child observed'] = function(test){
	var proto = {};
	var childProto = Object.create(proto);
	var protoObserver = new test.imports(proto, 'name');
	var childObserver = new test.imports(childProto, 'name');

	childObserver.open();

	proto.name = 'sandra';
	test.equal(childObserver.lastChange.object, proto);
	test.equal(childProto.name, 'sandra');

	childProto.name = 'damien';
	test.equal(childObserver.lastChange.type, 'add');
	test.equal(childObserver.lastChange.object, childProto);
	test.equal(proto.name, 'sandra');
	test.equal(childProto.name, 'damien');
};

exports['multiple prototype inheritance'] = function(test){
	var parentProto = {};
	var proto = Object.create(parentProto);
	var childProto = Object.create(proto);
	var childObserver = new test.imports(childProto, 'name');

	childObserver.open();

	parentProto.name = 'sandra';
	test.equal(childObserver.lastChange.value, 'sandra');
};

exports['prototype change ignored once object has property'] = function(test){
	var proto = {};
	var childProto = Object.create(proto);
	var childObserver = new test.imports(childProto, 'name');

	childObserver.open();

	childProto.name = 'sandra';
	proto.name = 'damien';
	test.equal(childObserver.lastChange.value, 'sandra');
};