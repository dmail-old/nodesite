var proto = require('proto');
var ComputedObserver = proto.extend({
	Observer: require('Observer').PropertyPathObserver,
	observers: null,
	values: null,
	value: undefined,
	size: 0,
	combinator: null,
	combinatorBind: null,
	closed: false,
	lastChange: null,

	constructor: function(combinator, combinatorBind){
		this.observers = {};
		this.values = {};
		if( arguments.length > 0 ){
			this.combinator = combinator;
			this.combinatorBind = combinatorBind || this;
		}
	},

	resolve: function() {
		if( this.closed === false ){
			if( this.combinator == null ){
				throw Error('ComputedBinding attempt to resolve without combinator');
			}
			else{
				this.value = this.combinator.call(this.combinatorBind, this.values, this);
			}
		}
	},

	onchange: function(change){
		this.lastChange = change;
		this.values[change.id] = change.value;
		this.resolve();
	},

	observe: function(name, model, path, supressResolve){
		this.unobserve(name, supressResolve);
		this.size++;

		if( supressResolve ){
			if( this.closed === false ) this.closed = true;
			else supressResolve = false;
		}
		this.observers[name] = this.Observer.create(path, model, this.onchange, this, name);
		if( supressResolve ){
			this.closed = false;
		}
	},

	unobserve: function(name, suppressResolve) {
		if( this.observers[name] ){
			this.size--;
			this.observers[name].close();
			delete this.observers[name];
			delete this.values[name];
			if( !suppressResolve ){
				this.resolve();
			}
		}
	},

	unobserveAll: function(supressResolve){
		for(var key in this.observers){
			this.unobserve(key, true);
		}
		if( !supressResolve ){
			this.resolve();
		}
	},

	close: function(){
		if( this.closed === false ){
			this.unobserveAll(true);
			this.closed = true;
			this.value = undefined;
		}
	}
});

module.exports = ComputedObserver;