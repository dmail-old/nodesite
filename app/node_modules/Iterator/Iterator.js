
var Iterator = function(object, keyOnly){
	if( arguments.length === 0 ){
		throw new TypeError('missing argument 0 when calling function Iterator');
	}
	if( object == null ){
		throw new TypeError('can\'t convert null to object');
	}
	if( !(this instanceof Iterator) ){
		return new Iterator(this, keyOnly);
	}

	object = Object(object); // will convert "a" into new String("a") for instance

	this.iteratedObject = object;
	this.keyOnly = keyOnly;
};

var proto = {
	constructor: Iterator,
	iteratedObject: null,
	keyOnly: false,

	next: function(){
		return {done: true, value: undefined};
	},

	'@@iterator': function(){
		return this;
	},

	toString: function(){
		return '[object Iterator]'; 
	}
};

Iterator.prototype = proto;
require('property').implement(Iterator.prototype, proto);

module.exports = Iterator;