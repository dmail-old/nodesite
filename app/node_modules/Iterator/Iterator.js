
var Iterator = function(object, keyOnly){
	if( arguments.length === 0 ){
		throw new TypeError('missing argument 0 when calling function Iterator');
	}
	if( object == null ){
		throw new TypeError('can\'t convert null to object');
	}

	object = Object(object); // will convert "a" into new String("a") for instance

	this.__object__ = object;
	this.__keyOnly__ = keyOnly;
};

var proto = {
	constructor: Iterator,
	__keys__: null,
	__object__: null,
	__keyOnly__: false,
	__index__: 0,
	__result__: {done: false, value: undefined},
	
	next: function(){
		var result = this.__result__, key, value;

		if( this.__index__ >= this.__keys__.length ){
			result.done = true;					
		}
		else{
			result.done = false;

			key = this.__nextKey();
			value = this.__keyOnly__ === true ? key : [key, this.__source__[key]];
		}

		result.value = value;

		return result;
	},

	__nextKey: function(){
		return this.__keys__[this.__index__++];
	},

	__getKeys: function(object){
		return Object.keys(object);
	},

	'@@iterator': function(){
		this.__keys__ = this.__getKeys(this.__object__);
		this.__index__ = 0;
		return this;
	},

	toString: function(){
		return '[object Iterator]'; 
	}
};

Iterator.prototype = proto;

// hide some properties
['__object__', '__keys__', '__getKeys', '__keyOnly__', '__index__', '__result__', 'toString'].forEach(function(method){
	require('keys').implement(Iterator.prototype, method, Iterator.prototype[method]);
});

module.exports = Iterator;