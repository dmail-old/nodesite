var Iterator = require('./Iterator');

var ObjectIterator = function(object, kind){
	this.iteratedObject = object;
	this.iterationKind = kind;
	this.iteratedKeys = Object.keys(object);
	this.nextIndex = 0;
	this.result = {done: false, value: undefined};
};

var proto = {
	iteratedObject: null,
	iteratedKeys: null,
	nextIndex: null,
	iterationKind: 'key+value',
	result: null,

	next: function(){
		var index = this.nextIndex, length = this.iteratedObject.length, key, value;
		var itemKind = this.iterationKind;
		var result = this.result;

		if( index >= length ){
			result.done = true;					
		}
		else{
			result.done = false;
			this.nextIndex++;

			if( itemKind == 'key' ){
				value = key;
			}
			else{
				value = this.iteratedObject[key];
				if( itemKind == 'key+value' ){
					value = [key, value];
				}
			}			
		}

		result.value = value;
		return result;
	},

	toString: function(){
		return '[object Object]';
	}
};

ObjectIterator.prototype = Object.create(Iterator);
require('property').implement(ObjectIterator, proto);

module.exports = ObjectIterator;
