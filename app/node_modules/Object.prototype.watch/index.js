// Object.watch polyfill

if( !Object.prototype.watch ){

	Object.defineProperty(Object.prototype, 'watch', {
		value: function(prop, handler){
			var oldval = this[prop], newval = oldval;

			function getter(){
				return newval;
			}

			function setter(val){
				oldval = newval;
				return newval = handler.call(this, prop, oldval, val);
			}

			if( delete this[prop] ){ // can't watch constants
				Object.defineProperty(this, prop, {
					get: getter,
					set: setter,
					enumerable: true,
					configurable: true
				});
			}
		}
	});

	Object.defineProperty(Object.prototype, 'unwatch', {
		value: function(prop){
			var val = this[prop];
			delete this[prop]; // remove accessors
			this[prop] = val;
		}
	});
	
}
