/**

Sort an array towards the properties of object he contains

orderBy('name');
orderBy('name');
orderBy('name', 'index', -1, function(a){ return a.name.toLowerCase(); }, 'getCount()');

*/

module.exports = {
	PathAccessor: require('../Object/PathAccessor'),

	createAccessor: function(path){
		var accessor = this.PathAccessor.new(path);
		return function(a){
			return accessor.setModel(a).get();
		};
	},

	createComparer: function(){
		var i, n, j = arguments.length, fns = [], orders = [], arg;

		i = n = 0;

		for(;i<j;i++){
			arg = arguments[i];
			switch(typeof arg){
			case 'string':
				fns[n++] = this.createAccessor(arg);
				break;
			case 'function':
				fns[n++] = arg;
				break;
			case 'number':
				if( n ) orders[n-1] = arg;
				break;
			}
		}

		function comparer(a,b){
			var calc, va, vb;
			for(i=0;i<n;i++){
				calc = fns[i];
				va = calc.call(a, a);
				vb = calc.call(b, b);

				if( va > vb ) return orders[i] || 1;
				if( va < vb ) return -(orders[i] || 1);
			}
			return 0;
		}

		return comparer;
	},

	orderBy: function(array, args){
		return this.sort(this.createComparer.apply(this, args));
	}
};

require('core/array');
Array.implement('orderBy', function(){
	return module.exports.orderBy(this, arguments);
});