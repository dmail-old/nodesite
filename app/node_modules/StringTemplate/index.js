/*
*/

var proto = require('proto');
var StringTemplate = proto.create({
	Compiler: require('./Compiler'),
	compiled: false,
	strings: null,
	expressions: null,
	executed: false,
	values: null,
	result: null,
	args: null,

	init: function(string){
		this.string = String(string);
	},

	compile: function(){
		var result = this.Compiler.compile(this.string);
		
		this.strings = result.strings;
		this.expressions = result.expressions;
		this.compiled = true;
	},

	rawExpression: function(expression){
		return this.Compiler.open + expression + this.Compiler.close;
	},

	getExpressionValueInNull: function(expression){
		return this.rawExpression(expression);
	},

	getExpressionValueInArray: function(expression, array, index){
		if( index in array ) return array[index];
		return this.rawExpression(expression);
	},

	getExpressionValueInObject: function(expression, object, index){
		// replace 'name' by object.name
		if( expression in object ) return object[expression];
		// replace 'name' by '{name}'
		return this.rawExpression(expression);
	},	

	getGetter: function(object){
		var getter;

		if( object == null ){
			getter = this.getExpressionValueInNull;
		}
		else if( object instanceof Array ){
			getter = this.getExpressionValueInArray;
		}
		else{
			getter = this.getExpressionValueInObject;
		}

		return getter;
	},

	exec: function(object, map, bind){
		if( this.compiled === false ) this.compile();
		var expressions = this.expressions, i = 0, j = expressions.length, values = new Array(j), getter, value;

		getter = this.getGetter(object);		

		for(;i<j;i++){
			value = getter.call(this, expressions[i], object, i);
			if( map ) value = map.call(bind, value, i, object);
			values[i] = value;
		}

		this.values = values;
		this.executed = true;

		return this;
	},

	reduce: function(concat, bind){
		if( this.executed === false ) this.exec();

		var strings = this.strings, values = this.values, i = 0, j = values.length, string, value;

		while(i<j){
			value = String(values[i]);
			string = strings[i + 1];
			concat.call(bind, value, string, i);
			i++;
		}

		return this;
	},

	concatString: function(value, string){
		this.result+= value + string;
	},

	toString: function(){
		this.result = this.strings[0];
		this.reduce(this.concatString, this);
		return this.result;
	},

	concatArray: function(value, string){
		this.result.push(string, value);
	},

	toArray: function(){
		this.result = [this.strings[0]];
		this.reduce(this.concatArray, this);
		return this.result;
	},

	render: function(object){
		return this.exec(object).toString();
	},

	tag: function(fn, bind){
		if( this.executed === false ) this.exec();
		if( this.args === null ) this.args = [this.strings].concat(this.values);
		return fn.apply(bind, this.args);
	}
});

module.exports = StringTemplate;
