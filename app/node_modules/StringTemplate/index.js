/*



*/

var proto = require('proto');

var ExpressionsResolver = {
	rawExpression: function(expression){
		return '{' + expression + '}';
	},

	getExpressionValueInNull: function(expression){
		return this.rawExpression(expression);
	},

	getExpressionValueInArray: function(expression, array, index){
		if( index in array ) return array[index];
		return this.rawExpression(expression);
	},

	getExpressionValueInObject: function(expression, object, index){
		// replace 'name' by object.name
		if( expression in object ) return object[expression];
		// replace 'name' by '{name}'
		return this.rawExpression(expression);
	},

	resolve: function(expressions, scope, map, bind){
		var i = 0, j = expressions.length, values = new Array(j), value, getter;

		if( scope == null ){
			getter = this.getExpressionValueInNull;
		}
		else if( scope instanceof Array ){
			getter = this.getExpressionValueInArray;
		}
		else{
			getter = this.getExpressionValueInObject;
		}

		for(;i<j;i++){
			value = getter.call(this, expressions[i], scope, i);
			if( map ) value = map.call(bind, value, i, scope);
			values[i] = value;
		}

		return values;
	}
};

var Renderer = {
	reduce: function(strings, values, fn, bind, buffer){
		var i = 0, j = values.length, string, value;

		while(i<j){
			value = String(values[i]);
			string = strings[i + 1];
			buffer = fn.call(bind, buffer, value, string, i);
			i++;
		}

		return buffer;
	},

	stringReducer: function(prev, value, string){
		return prev + value + string;
	},

	arrayReducer: function(prev, value, string){
		prev.push(value, string);
		return prev;
	},

	renderAsString: function(strings, values){
		return this.reduce(strings, values, this.stringReducer, this, strings[0]);
	},

	renderAsArray: function(strings, values){
		return this.reduce(strings, values, this.arrayReducer, this, [strings[0]]);
	}
};

var StringTemplate = proto.create({
	Compiler: require('./Compiler'),
	Result: TemplateResult,
	Resolver: ExpressionsResolver,
	Renderer: Renderer,
	string: null,
	scope: null,
	map: null,
	bind: null,
	mergeKeys: ['string', 'compilationResult', 'values'],
	merge: require('merge'),

	init: function(string){
		if( this.isPrototypeOf(string) ){
			this.populate(string);
		}
		else{
			this.string = string;
		}
	},

	populate: function(template){
		this.merge(this, template, this.mergeKeys);
		return template;
	},

	compile: function(string){
		return this.Compiler.compile(string);
	},

	get compilationResult(){
		return this.compile(this.string);
	},

	set strings(value){
		this.compilationResult.strings = value;
	},

	set expressions(value){
		this.compilationResult.expressions = value;
	},

	get strings(){
		return this.compilationResult.strings;
	},

	get expressions(){
		return this.compilationResult.expressions;
	},

	get values(){
		return this.Resolver.resolve(this.expressions, this.scope, this.map, this.bind);
	},

	toString: function(){
		return this.Renderer.renderAsString(this.strings, this.values);
	},

	toArray: function(){
		return this.Renderer.renderAsArray(this.strings, this.values);
	},

	tag: function(fn, bind){
		return fn.apply(bind, [this.strings].concat(this.values));
	},

	exec: function(scope, map, bind){
		this.scope = scope;
		this.map = map;
		this.bind = bind;
		this.values = null;
		return this;
	},

	render: function(scope, map, bind){
		return this.exec(scope, map, bind).toString();
	}
});

/*
	var descriptor = Object.getOwnPropertyDescriptor(this, property);
	var getter = descriptor.get;

	function get(){
		value = getter.call(this);
		Object.defineProperty(this, property, {value: value});
		return value;
	}

	function set(){
		if( property == null ){
			Object.defineProperty(this, property, customDescriptor);
		}
		else{
			Object.defineProperty(this, property, {value: value});
		}
	}

	var customDescriptor = {
		get: get,
		set: set
	};	

	Object.defineProperty(this, property, customDescriptor);
*/

/*
template.compilationResult value is cached
To invalidate the cache set the property to null or undefined
template.compilationResult = null
To set the cache without calling the getter, set the property to a value not null nor undefined
template.compilationResult = {string: [], expressions: []};
*/

StringTemplate.cacheGetter = function(property){
	var descriptor = Object.getOwnPropertyDescriptor(this, property);
	var getter = descriptor.get;
	var hasProperty = false, propertyValue;

	Object.defineProperty(this, property, {
		get: function(){
			if( hasProperty ){
				value = propertyValue;
			}
			else{
				value = getter.call(this);
				hasProperty = true;
				propertyValue = value;
			}
			return value;
		},

		set: function(value){
			if( value == null ){
				hasProperty = false;
			}
			else{
				hasProperty = true;
				propertyValue = value;
			}			
		}
	});
};
StringTemplate.cacheGetter('compilationResult');
StringTemplate.cacheGetter('values');
/*
String.format = function(string){
	var tpl = StringTemplate.new(string);

	if( arguments.length > 1 ){
		var scope = Array.prototype.slice.call(arguments, tpl.expressions.length);
		tpl.exec(scope);
	}

	return tpl.toString();
};
*/

module.exports = StringTemplate;
