
require('Object.instance');

var Splitter = require('Splitter');
var TagSplitter = Splitter.extend({
	cache: {},
	open: '{{',
	close: '}}',
	regexp: null,

	init: function(){
		Splitter.init.apply(this, arguments);
		this.regexp = new RegExp(this.open + '(.*?)' + this.close);
	},

	// https://github.com/Polymer/TemplateBinding/blob/master/src/TemplateBinding.js
	_split: function(string){
		return string.split(this.regexp);
	}
});

var StringTemplate = {
	Parser: TagSplitter,

	init: function(string){
		this.parser = this.Parser.new(string);
	},

	parse: function(){
		return this.parser.split();
	},

	empty: function(token){
		return this.parser.open + token + this.parser.close;
	},

	replacer: function(token, data){
		if( token in data ) return data[token];
		return this.empty(token);
	},

	stringify: function(value){
		return value;
	},

	// replace one token variable part at index with value
	replaceOne: function(tokens, index, value){
		value = this.stringify(value);

		return tokens.slice(0, index).concat(value, tokens.slice(index + 1)).join();
	},

	// replace all tokens variable parts with value found in data
	replace: function(tokens, data, replacer, bind){
		if( typeof replacer != 'function' ) throw new TypeError('replacer must be a function');

		var result, i, j, isVariable = false, value;

		result = [];
		i = 0;
		j = tokens.length;
		
		while( i < j ){
			if( isVariable === true ){
				value = replacer.call(bind, tokens[i], data, i);
				value = this.stringify(value);
				result[i] = value;
				isVariable = false;
			}
			else{
				result[i] = tokens[i];
				isVariable = true;
			}
			i++;
		}

		return result.join();
	},

	render: function(data){
		return this.replace(this.parse(), data, this.replacer, this);
	}
};

module.exports = StringTemplate;