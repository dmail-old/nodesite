// https://github.com/Polymer/TemplateBinding/blob/master/src/TemplateBinding.js
var StringTemplate = {
	open: '{',
	close: '}',
	string: null,
	parsed: null,
	cache: {},

	extend: function(){		
		// each StringTemplate instance must have his own cache
		var args = ['cache', {}];
		args = args.concat.apply(args, arguments);
		return Object.prototype.extend.apply(this, args);
	},

	new: function(string){
		if( string in this.cache ){
			return this.cache[string];
		}
		else{
			return this.cache[string] = Object.prototype.new.call(this, string);
		}
	},

	replacer: function(){
		if( value in this ) return this[value];
		return match;
	},

	create: function(string){
		this.string = String(string);
	},

	parse: function(){
		if( this.parsed ) return this.parsed;

		var string = this.string;
		var tokens = [], open = this.open, close = this.close, length = string.length;
		var startIndex = 0, lastIndex = 0, endIndex = 0;

		while( lastIndex < length ){
			startIndex = string.indexOf(open, lastIndex);
			endIndex = startIndex < 0 ? -1 : string.indexOf(close, startIndex + close.length);
			if( endIndex < 0 ){
				tokens.push(string.slice(lastIndex)); // TEXT
				break;
			}

			tokens.push(string.slice(lastIndex, startIndex)); // TEXT
			tokens.push(string.slice(startIndex + open.length, endIndex).trim()); // PATH
			lastIndex = endIndex + close.length;
		}

		if( lastIndex === length ){
			tokens.push(''); // TEXT
		}

		return this.parsed = tokens;
	},

	replace: function(string, replacer, bind){
		if( typeof replacer != 'function' ) throw new TypeError('replacer must be a function');

		var tokens, result, token, i, j, replace;

		tokens = this.parse(string);
		result = tokens[0];
		i = 0;
		j = tokens.length;
		for(;i<j;i+=2){
			token = tokens[i];
			result+= replacer.call(bind, this.open + token + this.close, token);
			result+= tokens[i + 1];
		}

		return result;
	},

	render: function(data){
		return this.replace(this.string, this.replacer, data);
	}
};

module.exports = StringTemplate;