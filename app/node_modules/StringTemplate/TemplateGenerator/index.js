var proto = require('proto');

/*
En utilisant un itérateur je peux soit itérer sur les templates existant
soit itérer sur ce qu'on va créer

*/
var TemplateGeneratorResult = proto.create({
	generator: null,
	array: null,
	map: null,
	bind: null,

	init: function(generator, array, fn, bind){
		this.generator = generator;
		this.array = array;
		this.map = fn;
		this.bind = bind;
	},

	generate: function(value, index, array){
		var template = this.template, instance;

		instance = template.new(template);		
		instance.scope = value;
		if( this.map ) instance = this.map.call(this.bind, instance, value, index, this);

		return instance;
	},

	generateAll: function(){
		var array = this.array, i = 0, j = array.length, result, templates = new Array(j);
		
		for(;i<j;i++){
			templates.push(this.generate(array[i], i, array));
		}

		return templates;
	},

	forOfGenerator: function(fn, bind){
		var array = this.array, i = 0, j = array.length, result, templates = new Array(j), template;
		
		for(;i<j;i++){
			template = this.generate(array[i], i, array);
			templates.push(template);
			fn.call(bind, template);
		}

		this.templates = templates;
	},

	forOfTemplates: function(fn, bind){
		this.templates.forEach(fn, bind);
	},

	forOf: function(){
		this.forOfGenerator.apply(this, arguments);
		this.forOf = forOfTemplates;
	},

	get templates(){
		return this.generateAll();
	},

	toString: function(){
		
	},

	toStylizedString: function(){
		
	}
});

var TemplateGenerator = proto.create({
	Template: require('StringTemplate'),
	template: null,
	separator: null,

	init: function(template, separator){
		if( typeof template == 'string' ) template = this.Template.new(template);
		this.template = template;
		this.separator = separator;
	},

	exec: function(array, fn, bind){
		return TemplateGeneratorResult.new(this, array, fn, bind);
	}
});

module.exports = TemplateGenerator;