var ExpressionsResolver = {
	rawExpression: function(expression){
		return '{' + expression + '}';
	},

	getExpressionValueInNull: function(expression){
		return this.rawExpression(expression);
	},

	getExpressionValueInArray: function(expression, array, index){
		if( index in array ) return array[index];
		return this.rawExpression(expression);
	},

	getExpressionValueInObject: function(expression, object, index){
		// replace 'name' by object.name
		if( expression in object ) return object[expression];
		// replace 'name' by '{name}'
		return this.rawExpression(expression);
	},

	resolve: function(expressions, scope, map, bind){
		var i = 0, j = expressions.length, values = new Array(j), value, getter;

		if( scope == null ){
			getter = this.getExpressionValueInNull;
		}
		else if( scope instanceof Array ){
			getter = this.getExpressionValueInArray;
		}
		else{
			getter = this.getExpressionValueInObject;
		}

		for(;i<j;i++){
			value = getter.call(this, expressions[i], scope, i);
			if( map ) value = map.call(bind, value, i, scope);
			values[i] = value;
		}

		return values;
	}
};

module.exports = ExpressionsResolver;