/*

StylizedTemplate.defineStyle('background-yellow', {background: 'yellow'});
StylizedTemplate.defineStyle('red', {color: 'red'});
StylizedTemplate.defineStyle('green', {color: 'green'});

var template = StylizedTemplate.new('Hello {name}, age: {age} !', 'green', 'red');
template.render({name: 'damien', age: 10});

var template = StylizedTemplate.new('Hello {name} !', {color: 'green'}, {color: 'red'});
template.globalStyle = 'background-yellow';
template.render({name: 'damien', age: 10});

*/

var proto = require('proto');
var StringTemplate = require('StringTemplate');

var StylizedTemplate = StringTemplate.create({
	styles: {},
	globalStyleName: null,

	init: function(string){
		StringTemplate.init.call(this, string);
		this.styles = Object.create(this.styles);
	},

	addFormat: function(name, styles){
		throw new Error('unimplemented method');
	},

	writeStyle: function(string, style){
		throw new Error('unimplemented method');
	},

	addStyle: function(name, format){
		if( typeof format != 'string' ) this.addFormat(name, format);
		this.styles[name] = format;
	},

	registerStyles: function(styles){
		if( style instanceof Array ){
			for(var i in styles){
				this.addStyle(this.expressions[i], arguments[i]);
			}
		}
		else{
			for(var style in styles){
				this.addStyle(style, styles[style]);
			}
		}
	},

	// add custom formats like 'error', 'info'
	registerFormats: function(formats){
		for(var format in formats){
			this.addFormat(format, formats[format]);
		}
	},

	set globalStyle(styleName){
		//if( !this.styles.exists(styleName) ) throw new Error('style has no rule');
		this.globalStyleName = styleName;
	},

	get globalStyle(){
		return this.globalStyleName;
	},

	stylizeValue: function(value, styleName){
		if( styleName in this.styles ){
			value = this.writeStyle(value, this.styles[styleName]);
		}
		return value;
	},

	stylizeValueAt: function(value, index){
		return this.stylizeValue(value, this.expressions[index]);
	},

	stylizeValues: function(values){
		var i = 0, j = values.length, stylizedValues = new Array(j);

		for(;i<j;i++){
			stylizedValues[i] = this.stylizeValueAt(values[i], i);
		}

		return stylizedValues;
	},

	toStylizedString: function(){
		var string;

		string = this.Renderer.renderAsString(this.strings, this.stylizeValues(this.values));	
		string = this.stylizeValue(string, this.globalStyle);

		return string;
	}
});

module.exports = StylizedTemplate;