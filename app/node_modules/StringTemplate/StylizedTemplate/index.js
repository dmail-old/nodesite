/*

StylizedTemplate.defineStyle('background-yellow', {background: 'yellow'});
StylizedTemplate.defineStyle('red', {color: 'red'});
StylizedTemplate.defineStyle('green', {color: 'green'});

var template = StylizedTemplate.new('Hello {name}, age: {age} !', 'green', 'red');
template.render({name: 'damien', age: 10});

var template = StylizedTemplate.new('Hello {name} !', {color: 'green'}, {color: 'red'});
template.globalStyle = 'background-yellow';
template.render({name: 'damien', age: 10});

*/

var proto = require('proto');
var StringTemplate = require('StringTemplate');

var StylizedTemplate = StringTemplate.create({
	Styles: Styles,
	styles: null,
	globalStyleName: null,

	init: function(string){
		StringTemplate.init.call(this, string);

		this.styles = this.Styles.new();

		if( arguments.length > 1 ) this.defineStyles.apply(this, Array.prototype.slice.call(arguments, 1));		
	},

	defineStyles: function(){
		for(var i in arguments){
			this.styles.add(this.expressions[i], arguments[i]);
		}
	},

	set globalStyle(styleName){
		if( !this.styles.exists(styleName) ) throw new Error('style has no rule');
		this.globalStyleName = styleName;
	},

	get globalStyle(){
		return this.globalStyleName;
	},

	writeStyle: function(string, rules){
		throw new Error('unimplemented writeStyle method');
	},

	stylize: function(value, index){
		var expression = this.expressions[index];

		if( this.styles.hasStyle(expression) ){
			return this.writeStyle(value, this.styles.getStyle(expression));
		}
		return value;
	},

	stylizeValues: function(values){
		var i = 0, j = values.length, stylizedValues = new Array(j);

		for(;i<j;i++){
			stylizedValues[i] = this.stylize(values[i], i);
		}

		return stylizedValues;
	},

	toStylizedString: function(){
		var string = this.Renderer.renderAsString(this.strings, this.stylizeValues(this.values)),
		style = this.globalStyle;
		if( style ){
			string = this.writeStyle(string, this.styles.get(style));
		}
		return string;
	}
});

var Styles = proto.create({
	styles: null,
	expressionStyles: null, 

	init: function(){
		this.styles = Object.create({});
		this.expressionStyles = Object.create({});
	},

	add: function(styleName, properties){
		this.styles[styleName] = properties;
	},

	remove: function(styleName){
		delete this.styles[styleName];
	},

	get: function(styleName){
		return this.styles[styleName];
	},

	exists: function(styleName){
		return styleName in this.styles;
	},

	define: function(styleName, properties){
		if( typeof styleName == 'object' ){
			for(var key in styleName){
				this.add(key, styleName[key]);
			}
		}
		else{
			this.add(styleName, properties);
		}
	},

	setStyle: function(expression, styleName){
		if( typeof styleName == 'object' ){
			this.add(expression, styleName);
			styleName = expression;
		}
		else if( !this.exists(styleName) ) throw new Error('style not found');
		
		this.expressionStyles[expression] = styleName;
	},

	unsetStyle: function(expression){
		delete this.expressionStyles[expression];
	},

	hasStyle: function(expression){
		return expression in this.expressionStyles;
	},

	getStyle: function(expression){
		return this.styles[this.expressionStyles[expression]];
	}
});

module.exports = StylizedTemplate;