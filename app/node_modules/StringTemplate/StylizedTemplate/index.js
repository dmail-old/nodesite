/*

StylizedTemplate.defineStyle('background-yellow', {background: 'yellow'});
StylizedTemplate.defineStyle('red', {color: 'red'});
StylizedTemplate.defineStyle('green', {color: 'green'});

var template = StylizedTemplate.new('Hello {name}, age: {age} !', 'green', 'red');
template.render({name: 'damien', age: 10});

var template = StylizedTemplate.new('Hello {name} !', {color: 'green'}, {color: 'red'});
template.globalStyle = 'background-yellow';
template.render({name: 'damien', age: 10});

*/

var StringTemplate = require('StringTemplate');

var StylizedTemplate = StringTemplate.create({
	styleRules: {},
	expressionStyles: {},
	globalStyleName: '',
	globalRules: null,

	init: function(string){
		StringTemplate.init.call(this, string);

		this.styleRules = Object.create(this.styleRules);
		this.expressionStyles = Object.create(this.expressionStyles);

		if( arguments.length > 1 ) this.stylize.apply(this, Array.prototype.slice.call(arguments, 1));		
	},

	hasRule: function(styleName){
		return styleName in this.styleRules;
	},

	defineStyle: function(name, rules){
		rules = typeof rules == 'string' ? [rules] : rules;
		this.stylesRules[name] = rules;
	},

	setStyle: function(expression, styleName){
		if( typeof styleName == 'object' ){
			this.styleRules[expression] = styleName;
			styleName = expression;
		}
		else if( !this.hasRule(styleName) ) throw new Error('style has no rule');
		
		this.expressionStyles[expression] = styleName;
	},

	hasStyle: function(expression){
		return expression in this.expressionStyles;
	},

	stylize: function(){
		// need this.expressions
		if( this.compiled === false ) this.compile();

		for(var i in arguments){
			this.setStyle(this.expressions[i], arguments[i]);
		}
	},

	set globalStyle(styleName){
		if( !this.hasRule(styleName) ) throw new Error('style has no rule');
		this.globalStyleName = styleName;
		this.globalRules = this.styleRules[styleName];
	},

	get globalStyle(){
		return this.globalStyleName;
	},

	_writeStyle: function(string, rules){
		throw new Error('unimplemented writeStyle method');
	},

	style: function(value, index, scope){
		var expression = this.expressions[index];

		if( this.hasStyle(expression) ){
			return this.writeStyle(value, this.styleRules[this.expressionStyles[expression]]);
		}
		return value;
	},

	exec: function(scope){
		return StringTemplate.exec.call(this, scope, this.style, this);
	}
});

module.exports = StylizedTemplate;