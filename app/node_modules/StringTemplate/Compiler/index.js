// https://github.com/Polymer/TemplateBinding/blob/master/src/TemplateBinding.js
var Compiler = {
	result: {
		strings: null,
		expressions: null
	},
	open: '{',
	close: '}',

	createResult: function(strings, expressions){
		this.result.strings = strings;
		this.result.expressions = expressions;
		return this.result;
	},

	compile: function(string){
		var open = this.open, close = this.close, length = string.length;
		var openLength = open.length, closeLength = close.length;
		var startIndex = 0, lastIndex = 0, endIndex = 0;
		var strings = [], expressions = [];

		while( lastIndex < length ){
			/*
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec

			while( result = regex.exec(string) ){
				if( result == null ) break;
				
				var sectionPath = result[0];
				var sectionTemplate = result[1];
				var section = Section.new(sectionPath, sectionTemplate);
				expressions.push(section);

				lastIndex+= regex.lastIndex;
			}
			*/

			startIndex = string.indexOf(open, lastIndex);
			// warnning here : '{name {}}' -> will be splitted into '{name {}', '}'
			endIndex = startIndex < 0 ? -1 : string.indexOf(close, startIndex + openLength);
			if( endIndex < 0 ){
				strings.push(string.slice(lastIndex)); // TEXT
				break;
			}

			strings.push(string.slice(lastIndex, startIndex)); // TEXT
			expressions.push(string.slice(startIndex + openLength, endIndex).trim()); // PATH
			lastIndex = endIndex + closeLength;
		}

		if( lastIndex === length ){
			strings.push(''); // TEXT
		}

		return this.createResult(strings, expressions);
	}
};

module.exports = Compiler;