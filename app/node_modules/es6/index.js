var Iterator = require('./Iterator');
var ObjectIterator = require('./Iterator/ObjectIterator');
var ArrayIterator = require('./Iterator/ArrayIterator');
var StringIterator = require('./Iterator/StringIterator');
var ArrayFrom = require('./Iterator/Array.from');

Iterator.prototype[Symbol.iterator] = function(){
	return new ObjectIterator(this.iteratedObject, this.keyOnly ? 'key' : 'key+value');
};

var topLevelScope = typeof window == 'undefined' ? global : window;
if( typeof topLevelScope['Iterator'] == 'undefined' ){	
	topLevelScope.Iterator = Iterator;

	var property = require('property');
	property.implement(Array, Symbol.iterator, function(){
		return new ArrayIterator(this, 'value');
	});
	property.implement(String, Symbol.iterator, function(){
		return new StringIterator(this);
	});
	Array.from = ArrayFrom;
	// object have no iterator, to iterate over an object use Iterator(object, true) or use Map, Set object
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
}

var es6 = {
	Symbol: require('./Symbol'),
	Iterator: Iterator,
	forOf: require('./Iterator/forOf'),
	ArrayIterator: ArrayIterator,
	StringIterator: StringIterator,
	ObjectIterator: ObjectIterator,
	indexOf: require('./indexOf'),
	Map: require('./Map'),
	Set: require('./Set')
};

module.exports = es6;