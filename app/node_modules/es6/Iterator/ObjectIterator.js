var Iterator = require('../Iterator');

var ObjectIterator = function(object, kind){
	this.iteratedObject = object;
	this.iterationKind = kind || 'key+value';
	this.iteratedKeys = Object.keys(object);
	this.nextIndex = 0;
	this.result = {done: false, value: undefined};
};

var proto = {
	constructor: ObjectIterator,
	
	next: function(){
		var index = this.nextIndex, keys = this.iteratedKeys, length = keys.length, itemKind, key, object;

		if( index >= length ){
			return this.createResult(undefined, true);			
		}

		this.nextIndex++;
		itemKind = this.iterationKind;
		key = this.keys[index];

		if( itemKind == 'key' ){
			return this.createResult(key, false);
		}

		object = this.iteratedObject;

		if( itemKind == 'value' ){
			return this.createResult(object[key], false);
		}
		
		return this.createResult([key, object[key]], false);
	},

	toString: function(){
		return '[object Object]';
	}
};

ObjectIterator.prototype = Object.create(Iterator);
require('property').implement(ObjectIterator, proto);

module.exports = ObjectIterator;
