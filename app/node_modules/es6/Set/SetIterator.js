var Iterator = require('../Iterator');

var SetIterator = function(set, kind){
	this.iteratedObject = set;
	this.nextIndex = 0;
	this.iterationKind = kind || 'key+value';
	this.result = {done: false, value: undefined};
};

var proto = {
	constructor: SetIterator,

	next: function(array){
		var index = this.nextIndex, set = this.iteratedObject, length = set.size, itemKind, value;

		if( index >= length ){
			return this.createResult(undefined, true);			
		}

		this.nextIndex++;
		itemKind = this.iterationKind;
		value = set.list[index];

		if( itemKind == 'key' || itemKind == 'value' ){
			return this.createResult(value, false);
		}
		
		return this.createResult([value, value], false);
	},

	toString: function(){
		return '[object Set Iterator]'; 
	}
};

SetIterator.prototype = Object.create(Iterator);
require('property').implement(SetIterator, proto);

module.exports = SetIterator;