/*

Hello {name}, your friends are : {#friends}({$$index}){name},{/friends}
{
	name: 'damien',
	friends: [{name: 'seb'}, {name: 'clément'}]
}

Expected result ->

Hello damien, your friends are : (0)seb, (1)clément


Comment faire ?

Lors de la compilation mustachetemplate doit commencer par trouver les sections :
/{#([A-Z][A-Z0-9]*)\b[^}]*}(.*?){\/\1}/i


'Hello {name}, your friends are : {#friends}{$$index}{name},{/friends}'
->
strings: ['Hello', ', your friends are :']
expressions: ['name', SectionExpression.new('friends', '{$$index}{name},')]]


-> puisqu'il existerais une sectionExpression, il faut un objet stringExpression qui réprésente 'name'
-> avec des méthode comme has(object), get(object), toString()

la sectionExpression a pour particularité que sa fonction get()
va générer des chaînes depuis l'objet qu'on lui passe

*/

var StringTemplate = require('StringTemplate');
var proto = require('proto');

var MustacheTemplate = proto.extend.call(StringTemplate, {
	PropertyPath: require('PropertyPath').Cached,

	replaceObject: function(expression, object, index){
		var accessor = this.PropertyPath.create(expression).setModel(object), value;

		accessor.setModel(object);

		// dont replace {name} when name does not exists in this
		if( accessor.has() ){
			value = accessor.value;
			return value == null ? '' : value;
		}

		return this.rawExpression(expression);
	}
});

module.exports = MustacheTemplate;