var Part = {
	index: null,
	buffer: '',

	init: function(buffer){
		if( arguments.length > 0 ) this.buffer = this.prepareBuffer(buffer);
	},

	prepareBuffer: function(buffer){
		return buffer;
	},

	get length(){
		return this.buffer.length;
	}
};

var Splitter = {
	__name__: 'Splitter',
	buffer: null,
	length: null,
	index: null,
	Part: Part,
	char: null, // current char
	part: null, // current part
	separator: '\n',

	init: function(buffer){
		this.buffer = buffer;
		this.length = buffer.length;
		this.index = -1;
	},

	read: function(index){
		return this.buffer[index];
	},

	readNext: function(index){
		if( index < this.length ){
			return this.read(index);
		}
		return null;
	},

	next: function(){
		this.index++;
		this.char = this.readNext(this.index);
		return this.char !== null;		
	},

	createPart: function(){
		return this.Part.new.apply(this.Part, arguments);
	},

	isSeparator: function(char){
		return char == this.separator;
	},

	indexOfPartEnd: function(){
		while( this.next() && !this.isSeparator(this.char) );
		return this.index;
	},

	createPartFromSlice: function(start, end){
		var part = this.createPart(this.buffer.slice(start, end));
		part.index = start;
		return part;
	},

	nextPart: function(){
		var part;

		if( this.index > this.length ){
			part = null;
		}
		else{
			part = this.createPartFromSlice(this.index, this.indexOfPartEnd());
			this.index+= 1; // on prend pas separator.length
		}

		return this.part = part;
	},

	split: function(separator){
		if( arguments.length > 0 ){
			this.separator = separator;
		}

		var parts = [], part;

		while( part = this.nextPart() ){
			parts.push(part);
		}

		return parts;
	},

	createError: function(error){
		return new Error(this.__name__ + ' Error: ' + error);
	}
};

module.exports = Splitter;