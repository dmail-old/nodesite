/*
var cachedProperty = CachedProperty.new('complexProperty', function(){
	// this operation takes time to be resolved
});

var object = {};

cachedProperty.install(object);

object.complexProperty; // calc complexProperty for object
object.complexProperty; // hit the cache

cachedProperty.removeCache(object); // remove the cache for this object

var child = Object.create(object);

child.complexProperty; // calc complexProperty for child
child.complexProperty; // hit the cache


// can do ComputedProperty.new(cachedProperty);
// can do ObservedProperty.new(cachedProperty)
*/

var proto = require('proto');

var CachedProperty = proto.create({
	name: null,
	getter: null,

	init: function(name){

	},

	install: function(object){

	},

	hasCache: function(object){

	},

	removeCache: function(object){

	}
});

var PropertyCache = proto.create({
	has: false,
	value: null,
	descriptor: null,
	observer: null, // observer for the cached property
	compoundObserver: null, // observer for all the property dependency
	// a property could be dependent of other property without being cached
	// the cached behaviour must me out of this one

	init: function(object, name){
		this.object = object;
		this.name = name;
		this.dependencies = {};
	},

	open: function(getter){
		this.getter = getter;

		var descriptor = {
			get: this.createGetter(),
			set: this.createSetter()
		};

		this.descriptor = descriptor;

		Object.defineProperty(this.object, this.name, descriptor);

		this.observer = this.PropertyObserver.new(this.object, this.name);
		this.compoundObserver = this.CompoundObserver.new();
	},

	close: function(){
		if( this.has ){
			Object.defineProperty(this.object, this.name, {
				value: this.value
			});
		}
		else{
			delete this.object[this.name];
		}
	},

	get: function(object){
		if( this.has === false ){
			this.has = true;
			this.value = this.getter.call(object);
		}

		return this.value;
	},

	set: function(object, value){
		this.has = true;
		this.value = value;

		this.observer.performSet(object, value);
	},

	invalidate: function(object){
		this.has = false;
	},

	createGetter: function(){
		var self = this;

		return function(){
			return self.get(this);
		};
	},

	createSetter: function(){
		var self = this;

		return function(value){
			return self.set(this, value);
		};
	},

	setDependencies: function(){

	},

	dependencyChanged: function(){
		this.invalidate();
	},

	addObserver: function(observer){
		this.compoundObserver.addObserver(observer);
	},

	addProperty: function(name){
		this.addObserver(this.PropertyObserver.new(this.object, name));
	},

	addPath: function(path){
		this.addObserver(this.PathObserver.new(this.object, path));
		//this.dependencies[name] = PropertyObserver.new(this.object, name, this.dependencyChanged);
	},

	removeObserver: function(observer){
		this.compoundObserver.removeObserver(observer);
	}
});