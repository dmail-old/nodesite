/*

https://gist.github.com/Benvie/1706159

var computedProperty = ComputedProperty.new('fullName', 'firstName', 'lastName');

computedProperty.defineGetter(function(firstName, lastName){
	return firstName + ' ' + lastName;
});
computedProperty.defineSetter(function(fullName)){
	return fullName.split(' ');
});

var object = {
	firstName: 'damien',
	lastName: 'maillard'
};

ComputedProperty.install(object);

object.fullName; 'damien maillard'
object.fullName = 'sandra machefer';
object.firstName; // sandra

var child = Object.create(object);

child.lastName = 'maillard';
child.fullName; // 'sandra maillard'

// and I can still to cachedProperty.new(computedProperty)
// and observedProperty.new(computedProperty)

*/

var proto = require('proto');

var ComputedProperty = proto.create({
	name: null,
	relatedNames: null,
	compoundObserver: null,

	init: function(name){
		this.name = name;
		this.relatedNames = Array.prototype.slice.call(arguments, 1);
	},

	defineGetter: function(getter){

	},

	defineSetter: function(setter){

	},

	define: function(getter, setter){		
		this.defineGetter(getter);
		this.defineSetter(setter);
	},

	install: function(object){

	}
});