/*

function getFullName(firstName, fullName){
	return firstName + ' ' + fullName;
}

API.defineCustomProperty({}, 'fullName', {
	subproperties: ['firstName', 'lastName']
	get: getFullName, // whill throw if get.length != 0 except if get.length == subproperties.length
	set: function(value){
		return value.split(' ');
		// when subproperties is defined
		// will throw if value returned.length != subproperties.length
	},
	cache: true, // will throw if no getter is defined, true,false,'once'
	meta: // store any information about the property
});

*/

var CustomPropertyDefinition = require('./CustomPropertyDefinition');

var API = {
	currentCustomProperty: null,

	hasOwnCustomProperty: function(object, name){
		if( Object.prototype.hasOwnProperty.call(object, name) ){
			var descriptor = Object.getOwnPropertyDescriptor(object, name);
			this.currentCustomProperty = CustomPropertyDefinition.getFromPropertyDescriptor(descriptor);
			return true;
		}

		return false;	
	},

	getOwnCustomProperty: function(object, name){
		if( this.hasOwnCustomProperty(object, name) ){
			return this.currentCustomProperty;
		}
		return null;
	},

	getOwnCustomPropertyDescriptor: function(object, name){
		var property = this.getOwnCustomProperty(object, name);
		return property ? property.descriptor : null;
	},

	defineCustomProperty: function(object, name, descriptor){
		return CustomPropertyDefinition.new(object, name).define(descriptor);		
	},

	addPropertyListener: function(object, name, fn, bind){
		var propertyDescriptor = Object.getOwnPropertyDescriptor(object, name), customDefinition;
		if( propertyDescriptor ){
			customDefinition = CustomPropertyDefinition.getFromPropertyDescriptor(propertyDescriptor);
		}
		if( customDefinition === null ){
			customDefinition = CustomPropertyDefinition.new(object, name);
		}
		return customDefinition.addListener(fn, bind);	
	},

	removePropertyListener: function(object, name, fn, bind){
		var propertyDescriptor = Object.getOwnPropertyDescriptor(object, name);
		if( propertyDescriptor === null ) return false;
		var customDefinition = CustomPropertyDefinition.getFromPropertyDescriptor(propertyDescriptor);
		if( customDefinition === null ) return false;
		return customDefinition.removeListener(fn, bind);
	}
};

for(var key in API){
	Object[key] = API[API[key]];
}

module.exports = API;