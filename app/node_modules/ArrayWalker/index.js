/*
*/

var proto = require('proto');
var ArrayWalker = proto.create({
	array: null,
	direction: 'next',
	sign: null,
	from: null,
	to: null,
	start: null,
	end: null,
	loopIndex: null,
	index: null,
	lastIndex: null,
	looped: false,
	result: {done: true, value: undefined},

	init: function(array, direction, from, to){
		if( array == null ){
			throw new TypeError("array is null or not defined");
		}

		direction = direction || this.direction;

		var length, sign, start, end;

		length = Object(array).length >>> 0;

		if( direction === 'next' ){
			sign = 1;
			start = -1;
			end = length - 1;
		}
		else{
			if( direction === 'both' ) to = true;
			sign = -1;
			start = length;
			end = 0;
		}

		//if( length === 0 ) return;

		// from should respect array limits
		if( typeof from != 'number' ) from = start;
		else if( sign == 1 ? from < start : from > start ) from = start;
		else if( sign == 1 ? from > end : from < end ) from = end;

		// if to === true we loop twice except if from == start as loop is useless
		if( to === true && from != start ) this.loopIndex = from;

		// to should respect array limits
		if( typeof to != 'number' ) to = end;
		else if( sign == 1 ? to > end : to < end ) to = end;
		else if( sign == 1 ? to < start : to > start ) to = start;

		// prevent infinite loop
		if( sign == 1 ? to < from : to > from ){
			to = from;
			this.loopIndex = null;
		}

		this.array = array;
		this.direction = direction;
		this.sign = sign;
		this.start = start;
		this.end = end;
		this.from = from;
		this.to = to;
	},

	reset: function(){
		this.index = this.from;
		this.lastIndex = this.to;
		this.looped = false;
	},
	
	next: function(){
		var result = this.result;

		if( this.index === this.lastIndex ){
			if( this.looped === true || typeof this.loopIndex != 'number' ){
				result.done = true;
				result.value = undefined;
				return result;
			}
			this.index = this.start;
			this.lastIndex = this.loopIndex;
			this.looped = true;
		}

		this.index+= this.sign;
		result.done = false;
		result.value = this.array[this.index];

		return result;
	},

	// es6, allow to write for(key of ArrayIterator.new(['a', 'b']))
	'@@iterator': function(){
		this.reset();
		return this;
	}
});

module.exports = ArrayWalker;	