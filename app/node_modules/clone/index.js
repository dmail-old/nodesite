/*

name: Object.cloning

provides:
	Object.setPairClone, Object.clone, Object.mergePair, Object.merge,
	RegExp.prototype.clone, Date.prototype.clone, Array.prototype.clone

*/

var property = require('property');

if( 'getOwnPropertyDescriptor' in Object ){

	property.setKeyClone = function(key, object){
		if( object ){
			var descriptor = Object.getOwnPropertyDescriptor(object, key);
			if( 'value' in descriptor ) descriptor.value = property.clone(descriptor.value);
			Object.defineProperty(this, key, descriptor);
		}
		else{
			this[key] = property.clone(object[key]);
		}
	};

}
else{

	property.setKeyClone = function(key, object){
		this[key] = property.clone(object[key]);
	};

}

property.clone = function(object){
	var clone = object;

	if( typeof object == 'object' && object != null ){
		if( typeof object.clone == 'function' ) clone = object.clone();
		else{
			clone = {};
			property.eachOwnKey(object, property.setKeyClone, clone);

			// only if es5
			if( !Object.isExtensible(object) ) Object.preventExtensions(clone);
			if( Object.isSealed(object) ) Object.seal(clone);
			if( Object.isFrozen(object) ) Object.freeze(clone);
		}
	}

	return clone;
};

property.implement(Array, 'clone', function(){
	var i = this.length, clone = new Array(i);

	while(i--) clone[i] = property.clone(this[i]);

	return clone;
});

module.exports = property.clone;

/*
// set key/value pair in this cloning value and merging objects
// custom setter/getter are merged without being called

function getValue(object, key){
	var descriptor = Object.getOwnPropertyDescriptor(object, key);
	// custom getter & setter are not called
	return 'value' in descriptor ? descriptor.value : null;
}

property.mergeKey = function(key, source, object){
	var objectValue = getValue(object, key), sourceValue;

	if( typeof objectValue == 'object' && objectValue !== null ){
		sourceValue = getValue(source, key);

		if( typeof sourceValue == 'object' && sourceValue !== null ){
			property.merge(sourceValue, objectValue);
		}
		else{
			property.setKeyClone.call(source, key, object);
		}
	}
	else{
		property.appendPair.call(source, key, object);
	}

	return this;
};

property.merge = function(source, object, keys){
	if( !keys ) keys = property.ownKeys(object);

	var i = 0, j = keys.length;

	for(;i<j;i++){
		property.mergeKey(keys[i], source, object);
	}

	return object;
};
*/