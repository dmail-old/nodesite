/*

name: Emitter

description: Emitter provide methods to emit and listen for events

*/

var proto = require('proto');
var Notifier = require('Notifier').create({
	bind: null,
	objectMethod: 'handleEvent',
	execListener: function(listener, args){
		listener.bind = typeof listener == 'object' ? this.objectMethod : this.bind;
		return Notifier.execListener.apply(this, arguments);
	}
});

var Emitter = proto.create({
	notifiers: {},
	bind: null,
	objectMethod: 'handleEvent',
	active: true,
	size: 0, // number of events
	count: 0, // total number of listeners
	eventRegExp: /\s+/,
	
	init: function(bind){
		this.bind = bind || this;
		this.notifiers = Object.create(Emitter.notifiers);
	},

	getNotifier: function(name){
		var notifier;

		if( name in this.notifiers ){
			notifier = this.notifiers[name];
		}
		else{
			notifier = Notifier.new();
			this.notifiers[name] = notifier;
			this.size++;
		}		

		return notifier;
	},

	isListened: function(name){
		if( this.active === false ) return false;
		if( name in this.notifiers === false ) return false;
		if( this.notifiers[name].active === false ) return false;
		if( this.notifiers[name].size === 0 ) return false;
		return true;
	},

	enable: function(name){
		return this.getNotifier(name).enable();
	},

	disable: function(name){
		return this.getNotifier(name).disable();
	},

	addListener: function(name, fn, bind, once){
		if( typeof name != 'string' && typeof name != 'number' ){
			throw new TypeError('name expect string or number, ' + name + ' given');
		}

		var notifier = this.getNotifier(name);

		if( notifier.add(fn, bind, once) ){
			this.count++;
		}

		if( name != 'addListener' ) this.applyListeners('addListener', arguments);

		return this;
	},

	removeListener: function(name, fn, bind){
		var notifiers = this.notifiers, notifier;

		if( arguments.length === 0 ){
			for(name in notifiers) this.removeListener(name);
		}
		else if( arguments.length === 1 ){
			if( name in notifiers ){
				notifiers[name].forEach(function(listener){
					this.removeListener(name, listener.fn, listener.bind);
				}, this);
			}
		}
		else if( name in notifiers ){
			notifier = notifiers[name];

			if( notifier.remove(fn, bind) ){
				this.count--;
				if( notifier.size === 0 ){
					this.size--;
					delete notifiers[name];
				}
			}

			if( name != 'removeListener' ) this.applyListeners('removeListener', arguments);
		}

		return this;
	},

	addVolatileListener: function(name, fn, bind){
		return this.addListener(name, fn, bind, true);
	},

	isInternal: function(name){
		return  name == 'applyListeners' || name == 'addListener' || name == 'removeListener' || name == '*';
	},

	applyListeners: function(name, args){
		if( !this.isInternal(name) ){
			this.applyListeners('*', arguments);
		}

		if( name in this.notifiers ){
			var notifier = this.notifiers[name];
			notifier.bind = this.bind;
			notifier.objectMethod = this.objectMethod;
			notifier.notifyArgs(args);
		}

		return this;
	},

	callListeners: function(name){
		return this.applyListeners(name, Array.prototype.slice.call(arguments, 1));
	},

	/*
	implement multiple event writing style:
	on({focus: function(){}, blur: function(){}});
	off('focus blur');
	emit('focus blur', true);
	*/
	eachEvent: function(method, bind, args){
		var name = args[0], key;

		if( args.length === 0 ){
			method.call(bind);
		}
		else if( typeof name == 'string' ){
			if( this.eventRegExp.test(name) ){
				args[0] = name.split(this.eventRegExp);
				return this.eachEvent(method, args);
			}
			else{
				method.apply(bind, args);
			}
		}
		else if( typeof name == 'number' ){
			method.apply(bind, args);
		}
		else if( name instanceof Array ){
			var i = 0, j = name.length;
			for(;i<j;i++){
				args[0] = name[i];
				method.apply(bind, args);
			}
		}
		else if( typeof name == 'object' ){
			args = Array.prototype.slice.call(args, 1);
			for(key in name){
				method.apply(bind, [key, name[key]].concat(args));
			}
		}

		return this;
	},

	on: function(){
		return this.eachEvent(this.addListener, this, arguments);
	},

	off: function(){
		return this.eachEvent(this.removeListener, this, arguments);
	},

	once: function(){
		return this.eachEvent(this.addVolatileListener, this, arguments);
	},

	emit: function(){
		return this.eachEvent(this.callListeners, this, arguments);
	}
});

module.exports = Emitter;