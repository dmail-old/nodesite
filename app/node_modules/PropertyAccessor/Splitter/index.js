/*



*/

var Splitter = require('Splitter').extend({
	Part: require('../Part'),
	specials: '.[]()',
	singleQuote: '\'',
	doubleQuote: '"',
	
	isSpecial: function(char){
		return this.specials.indexOf(char) !== -1;
	},

	isNumber: function(char){
		return '0' <= char && char <= '9';
	},

	isAlpha: function(char){
		return (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z') || char === '_' || char === '$';
	},

	isAlphaNum: function(char){
		return this.isAlpha(char) || this.isNumber(char);
	},

	isSingleQuote: function(char){
		return char == this.singleQuote;
	},

	isDoubleQuote: function(char){
		return char == this.doubleQuote;
	},

	unexpectedChar: function(){
		throw this.createError('Unexpected char ' + this.char + ' at ' + this.index + ' in ' + this.buffer);
	},

	unterminatedQuote: function(index){
		throw this.createError('Unterminated quote at ' + index + ' in ' + this.buffer);
	},

	createPartFromSlice: function(){
		var part = Splitter.createPartFromSlice.apply(Splitter, arguments);

		if( this.char == '(' && this.next() && this.char == ')' ){
			// token.args = eval('['+ this.buffer.slice(this.index, this.getSeparatorIndex(')'))  +']''); 
			// et faire pareil pour les expression entre []
			// tention: gros problème de sécurité si j'autorise ça coté serveur
			part.args = [];
		}

		return part;
	},

	indexOfPartEnd: function(index){
		var quoteIndex;

		while( this.next() ){
			if( this.isSpecial(this.char) ){
				continue;
			}

			// begining of a token
			if( this.isAlphaNum(this.char) ){
				while( this.next() && this.isAlphaNum(this.char) );
				break;
			}

			if( this.isSingleQuote(this.char) ){
				quoteIndex = this.index;
				while( this.next() && this.isSingleQuote(this.char) );
				if( quoteIndex != this.index && !this.isDoubleQuote(this.char) ){
					this.unterminatedQuote(quoteIndex);
				}
				break;	
			}

			if( this.isDoubleQuote(this.char) ){
				quoteIndex = this.index;
				while( this.next() && this.isDoubleQuote(this.char) );
				if( quoteIndex != this.index && !this.isDoubleQuote(this.char) ){
					this.unterminatedQuote(quoteIndex);
				}
				break;
			}

			this.unexpectedChar();
		}

		return this.index;
	}
});

module.exports = Splitter;