/*

name: PropertyAccessor

description: Help to set/get a value at a given path in an object

provides: ObjectPath

*/
var PropertyAccessor = {
	partPrototype: require('./Part'),
	Lexer: require('./Lexer'),

	path: null,
	firstPart: null,
	lastPart: null,

	init: function(path){
		if( typeof path != 'string' ) throw new TypeError('path must be a string');
		this.path = path;
		this.parse();
	},

	createPart: function(){
		return this.partPrototype.new.apply(this.partPrototype, arguments);
	},

	parse: function(){
		var lexer = this.Lexer.new(this.path), token, part = null, previousPart = null;

		while( token = lexer.next() ){
			if( part ){
				previousPart = part;
			}
			part = this.createPart(token.value);
			part.args = token.args;

			if( previousPart ){
				previousPart.nextPart = part;
				part.previousPart = previousPart;
			}
			else{
				this.firstPart = part;
			}
		}

		this.lastPart = part;
	},

	setModel: function(){
		this.firstPart.setModel.apply(this.firstPart, arguments);
		return this;
	},

	unsetModel: function(){
		this.firstPart.unsetModel.apply(this.firstPart, arguments);
		return this;
	},

	has: function(){
		return this.lastPart.has.apply(this.lastPart, arguments);
	},

	apply: function(){
		return this.lastPart.apply.apply(this.lastPart, arguments);
	},

	call: function(){
		return this.lastPart.call.apply(this.lastPart, arguments);
	},

	get value(){
		return this.lastPart.value;
	},

	set value(value){
		return this.lastPart.value = value;
	},

	get model(){
		return this.firstPart.model;
	}
};

module.exports = PropertyAccessor;