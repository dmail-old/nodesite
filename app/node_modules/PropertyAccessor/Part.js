var Part = {
	name: null, // Number|String 
	hasModel: false,
	model: null,
	previousPart: null,
	nextPart: null,
	args: null,

	create: function(name){
		this.name = name;
	},

	setModel: function(model){
		this.unsetModel(true);
		this.model = model;
		this.hasModel = true;
		this.propagate();
		return this;
	},

	propagate: function(unset){
		if( this.nextPart ){
			if( unset ){
				this.nextPart.unsetModel();
			}
			else{
				this.nextPart.setModel(this.value);
			}
		}
	},

	unsetModel: function(){
		this.propagate(true);
		this.model = null;
		this.hasModel = false;
		return this;
	},

	set value(value){
		if( this.hasModel ){
			if( this.model != null ) this.model[this.name] = value;
			this.propagate();
			return true;
		}
		return false;
	},

	get value(){
		if( this.hasModel ){
			if( this.args ) return this.model[this.name].apply(this.model, this.args);
			return this.model[this.name];
		}
		return undefined;
	},

	apply: function(bind, args){
		if( this.hasModel){
			var fn = this.model[this.name];
			return typeof fn == 'function' ? fn.apply(bind, args) : undefined;
		}
		return undefined;		
	},

	call: function(bind){
		return this.apply(bind, Array.slice(arguments, 1));
	},

	has: function(){
		return this.hasModel && this.name in this.model;	
	},

	hasOwn: function(){
		return this.hasModel && Object.prototype.hasOwnProperty.call(this.model, this.name);
	}
};

module.exports = Part;