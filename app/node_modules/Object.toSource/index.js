// https://github.com/oliver-moran/toSource.js
if( 'toSource' in Object === false ){

	Object.toSource = function(object){
		if( object === null ) return 'null';
		if( object === undefined ) return 'undefined';
		if( typeof object.toSource === 'function' ) return object.toSource();
		return String(object);
	};

	function implementToSource(constructor, toSource){
		Object.defineProperty(constructor.prototype, 'toSource', {
			writable: true,
			value: toSource
		});
	}

	implementToSource(Number, function(){
		return this.toString();
	});

	implementToSource(Boolean, function(){
		return this.toString();
	});

	implementToSource(RegExp, function(){
		return this.toString();
	});

	implementSource(Date, function(){
		return '(new Date(' + this.valueOf() + '))';
	});

	implementToSource(String, function(){
		var source = this.replace(/"/g, '"');
		source = source.replace(/\n/g, '\\n');
		source = source.replace(/\r/g, '\\r');
		return '"' + source + '"';
	});

	implementToSource(Function, function(){
		return '(' + this.toString(); + ')';
	});

	implementToSource(Array, function(){
		var source, i = 0, j = this.length;

		source = '[';
		for(;i<j;i++){
			source+= Object.toSource(this[i]);
			if( i < j - 1 ) source+= ', ';
		}
		source+= ']';

		return source;
	});

	implementToSource(Object, function(){
		var source, props = Object.getOwnPropertyNames(this), i = 0, j = props.length, prop, value;

		source = '({';
		for(;i<j;i++){
			prop = props[i];
			// faut checker les références circulaires
			value = this[prop];
			source+= prop + ': ' + Object.toSource(value);
			if( i < j - 1 ) source += ', ';
		}
		source+= '})';

		return source;
	});
	
}

/*

test pour les références circulaires (faut pas les mettre)

Object.toSource = function(object){
	if( object === null ) return 'null';
	if( object === undefined ) return 'undefined';
	if( typeof object.toSource === 'function' ) return object.toSource();
	return String(object);
};

Object.prototype.toSource = function(){
	var source, props = Object.getOwnPropertyNames(this), i = 0, j = props.length, prop;

	source = '({';
	for(;i<j;i++){
		prop = props[i];
		source+= prop + ': ' + Object.toSource(this[prop]);
		if( i < j - 1 ) source += ', ';
	}
	source+= '})';

	return source;
};

var a = {}; var b = {}; a.b = b; b.a = a;
source.call(a);

*/