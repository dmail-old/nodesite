/*
*/

var proto = require('proto');
var Collector = proto.create({
	forOf: require('./polyfill-Iterator/forOf'),
	iterable: null,
	filter: null,
	bind: null,
	result: null,
	types: {
		'first': {
			firstBreak: true
		},

		'all': {
			firstBreak: false
		},

		'count': {
			result: 0,
			firstBreak: false,
			encode: function(){
				this.result++;
			}
		},

		// must be called on ArrayIterator only
		'firstIndex': {
			result: -1,
			firstBreak: true,
			encode: function(){
				return this.iterable.index;
			}
		},

		// must be called on ArrayIterator only
		'allIndex': {
			firstBreak: false,
			encode: function(){
				this.result.push(this.iterable.index);
			}
		}	
	},
	type: null,

	init: function(iterable, filter, bind){
		this.iterable = iterable;
		if( arguments.length > 1){
			this.filter = filter;		
		}
		this.bind = bind || this;
	},

	/*
	createSelector: function(){
		return this.Selector.new.apply(this.Selector, arguments);
	},
	*/

	handleNext: function(value){
		if( this.filter === null || this.filter.call(this.bind, value) ){
			var result = this.type.encode ? this.type.encode.call(this, value) : value;

			if( this.type.firstBreak ){
				this.result = result;
				return true;
			}
			else{
				this.result.push(result);
			}
		}
	},

	collect: function(typeName){
		this.type = this.types[typeName];
		this.result = 'result' in this.type ? this.type.result : null;
		this.forOf(this.iterable, this.handleNext, this);
		return this.result;
	}
});

Object.key(Collector.types).forEach(function(method){
	Collector[method] = function(){
		return this.collect(method);
	};
});

// speed improvment
Collector.count = function(){
	// my custom iterators have a length property
	if( this.selector == null && typeof this.iterator.length === 'number' ) return this.iterator.length;
	return this.collect('count');
};

module.exports = Collector;