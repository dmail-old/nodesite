/*
*/

require('Iterator');

var proto = require('proto');

var CollectorIterator = proto.createFrom(Iterator, {
	iterable: null,
	filter: null,
	bind: null,
	iterator: null,
	index: 0,
	generateIndex: false,

	init: function(iterable, filter, bind, generateIndex){
		this.iterable = iterable;
		this.filter = filter;
		this.bind = bind;
		this.generateIndex = generateIndex;
		this.reset();
	},

	reset: function(){
		this.iterator = this.iterable['@@iterator']();
		this.index = 0;
		this.result = {done: false, value: undefined};
	},

	next: function(){
		var result, filter, bind, iterator, next, value;

		result = this.result;
		filter = this.filter;
		bind = this.bind;

		iterator = this.iterator;
		next = iterator.next();
		while( next.done === false ){
			value = next.value;

			if( filter === null || typeof bind == 'undefined' ? filter(value) : filter.call(bind, value) ){
				if( this.generateIndex === true ){
					value =  typeof iterator.index == 'number' ? iterator.index : this.index;
				}

				result.done = false;
				result.value = value;				

				return result;
			}

			next = iterator.next();
			this.index++;
		}

		result.done = true;
		result.value = undefined;
		return result;
	},

	'@@iterator': function(){
		this.reset();
		return this;
	}
});

var Collector = proto.create({
	args: null,

	init: function(){
		this.args = arguments;
	},

	'@@iterator': function(){
		return CollectorIterator.new.apply(CollectorIterator, this.args);
	},

	collectIndexes: function(){
		var args = Array.prototype.slice(arguments);
		args[3] = true;
		return CollectorIterator.new.apply(CollectorIterator, args);
	},

	count: function(){
		return Array.from(this).length;
	}
});

module.exports = Collector;