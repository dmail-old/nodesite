/*
*/

var proto = require('proto');
var Iterator = require('./Iterator');

var Collector = proto.createFrom(Iterator, {
	iterable: null,
	iterator: null,
	filter: null,
	filterBind: null,	
	generateIndex: false,
	result: {done: false, value: undefined},
	index: 0,

	init: function(iterable, filter, filterBind){
		this.iterable = iterable;
		this.iterator = this.iterable['@@iterator']();
		this.filter = filter;
		this.filterBind = filterBind;
	},

	next: function(){
		var result, filter, filterBind, iterator, next, value;

		result = this.result;
		filter = this.options.filter;
		filterBind = this.options.filterBind;

		iterator = this.iterator;
		next = iterator.next();
		while( next.done === false ){
			value = next.value;

			if( filter === null || typeof filterBind == 'undefined' ? filter(value) : filter.call(filterBind, value) ){
				if( this.generateIndex === true ){
					value =  typeof iterator.index == 'number' ? iterator.index : this.index;
				}

				result.done = false;
				result.value = value;				

				return result;
			}

			next = iterator.next();
			this.index++;
		}

		result.done = true;
		result.value = undefined;
		return result;
	},

	createIterator: function(){
		var iterator = this.create({
			iterator: this.iterable['@@iterator'](),
			index: 0,
			result: {done: false, value: undefined}
		});

		return iterator;
	},

	'@@iterator': function(){
		return this.createIterator();
	},

	collect: function(typeName){
		return this['@@iterator']();
	},

	collectIndexes: function(){
		var iterator = this.createIterator();
		iterator.generateIndex = true;
		return iterator;
	},

	count: function(){
		return Array.from(this).length;
	}
});

module.exports = Collector;