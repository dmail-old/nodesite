// https://github.com/Polymer/TemplateBinding/blob/master/src/TemplateBinding.js
var MustacheParser = {
	open: '{{',
	close: '}}',
	replacer: null,

	parse: function(string){
		string = String(string);
		//if( typeof string != 'string' ) throw new TypeError('string expected');

		var tokens = [], open = this.open, close = this.close, length = string.length;
		var startIndex = 0, lastIndex = 0, endIndex = 0;

		while( lastIndex < length ){
			startIndex = string.indexOf(open, lastIndex);
			endIndex = startIndex < 0 ? -1 : string.indexOf(close, startIndex + close.length);
			if( endIndex < 0 ){
				tokens.push(string.slice(lastIndex)); // TEXT
				break;
			}

			tokens.push(string.slice(lastIndex, startIndex)); // TEXT
			tokens.push(string.slice(startIndex + open.length, endIndex).trim()); // PATH
			lastIndex = endIndex + close.length;
		}

		if( lastIndex === length ){
			tokens.push(''); // TEXT
		}

		return tokens;
	},

	replace: function(string, replacer, bind){
		if( typeof replacer != 'function' ) throw new TypeError('replacer must be a function');

		var tokens, result, token, i, j, replace;

		tokens = this.parse(string);
		result = tokens[0];
		i = 0;
		j = tokens.length;
		for(;i<j;i+=2){
			token = tokens[i];
			result+= replacer.call(bind, this.open + token + this.close, token);
			result+= tokens[i + 1];
		}

		return result;
	}
};

module.exports = MustacheParser;