/*

name: Object.util

description: required almost everywhere

provides:
	ownKeys, eachOwnPair, iteratePair, eachOwnPairIn
	appendPair, append, completePair, complete
	implementPair, implement, complementPair, complement

*/

module.exports = {
	ownKeys: 'getOwnPropertyNames' in Object ? Object.getOwnPropertyNames : Object.keys,

	eachOwnPair: function(object, fn, bind){
		var keys = this.ownKeys(object), i = 0, j = keys.length, key;

		for(;i<j;i++){
			key = keys[i];
			fn.call(bind, key, object[key], object);
		}

		return object;
	},

	iteratePair: function(pairIterator, array, fn, bind){
		var i = 0, j = array.length, item;

		for(;i<j;i++){
			item = array[i];
			if( item instanceof Function ) item = item.prototype;

			switch(typeof item){
			case 'string':
				fn.call(bind, item, array[++i]);
				break;
			case 'object':
				pairIterator.call(this, item, fn, bind);
				break;
			}
		}		
	},

	eachOwnPairIn: function(array, fn, bind){
		return this.iteratePair(this.eachOwnPair, array, fn, bind);
	},	

	append: function(object){
		this.eachOwnPairIn(Array.prototype.slice.call(arguments, 1), this.appendPair, object);
		return object;
	},

	complete: function(object){
		this.eachOwnPairIn(Array.prototype.slice.call(arguments, 1), this.completePair, object);
		return object;
	},

	implement: function(object){
		this.eachOwnPairIn(Array.prototype.slice.call(arguments, 1), this.implementPair, object.prototype);
		return this;
	},

	complement: function(object){
		this.eachOwnPairIn(Array.prototype.slice.call(arguments, 1), this.complementPair, object.prototype);
		return this;
	}
};

if( 'getOwnPropertyDescriptor' in Object ){

	module.exports.appendPair = function(key, value, object){
		if( object ){
			Object.defineProperty(this, key, Object.getOwnPropertyDescriptor(object, key));
		}
		else{
			this[key] = value;
		}
	};

	module.exports.implementPair = function(key, value, object){
		var descriptor;

		if( object ){
			descriptor = Object.getOwnPropertyDescriptor(object, key);
			descriptor.enumerable = false;
		}
		else{
			descriptor = {enumerable: false,  configurable: true, writable: true, value: value};
		}

		Object.defineProperty(this, key, descriptor);
	};

}
else{

	module.exports.appendPair = module.exports.implementPair = function(key, value, object){
		this[key] = value;
	};

}

module.exports.completePair = function(key){
	// set key/value pair in this if not existing
	if( !(key in this) ){
		module.exports.appendPair.apply(this, arguments);
	}
	return this;
};

module.exports.complementPair = function(key, value){
	if( !(key in this) ){
		module.exports.implementPair.apply(this, arguments);
	}
	return this;
};

Object.append = module.exports.append.bind(module.exports);