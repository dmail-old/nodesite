/**Array.prototype.iteratefn(value, index, array): a function that will be called over every value of the array,		returns true to break the iterationdirection: 'next'|'prev'|'both' default: 'next'from: number, index from wich to start iteration default: 0to: number|true, maximum index for the iteration default: array.length*/function iterate(fn, bind, direction, from, to){	var length = this.length, start, end, sign, loopIndex;	if( arguments.length === 0 ){		fn = console.log;		bind = console;	}	else if( arguments.length == 1 ){		bind = this;	}	if( typeof fn != 'function' ){		throw new TypeError(fn + 'is not callable');	}	if( length === 0 ){		return this;	}	if( !direction || direction === 'next' ){		sign = 1;		start = -1;		end = length - 1;	}	else{		if( direction === 'both' ) to = true;		sign = -1;		start = length;		end = 0;	}	// from should respect array limits	if( typeof from != 'number' ) from = start;	else if( sign == 1 ? from < start : from > start ) from = start;	else if( sign == 1 ? from > end : from < end ) from = end;	// if to === true we loop twice except if from == start as loop is useless	if( to === true && from != start ) loopIndex = from;	// to should respect array limits	if( typeof to != 'number' ) to = end;	else if( sign == 1 ? to > end : to < end ) to = end;	else if( sign == 1 ? to < start : to > start ) to = start;	// prevent infinite loop	if( sign == 1 ? to < from : to > from ) return this;	do{		while(from != to){			from+= sign;			if( fn.call(bind, this[from], from, this) === true ) return this;		}		if( typeof loopIndex != 'number' ) break;		from = start;		to = loopIndex;		loopIndex = null;	}	while(true);	return this;}Object.defineProperty(Array.prototype, 'iterate', {	value: iterate});